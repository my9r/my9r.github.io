<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<p>按时间排序：</p>
<h2 id="2024年-："><a href="#2024年-：" class="headerlink" title="[[2024年]]："></a>[[2024年]]：</h2><h2 id="2025年-："><a href="#2025年-：" class="headerlink" title="[[2025年]]："></a>[[2025年]]：</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241009/</url>
    <content><![CDATA[<h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><p>申必题，后面再做</p>
<p>算了先做吧</p>
<p>看来要高精度</p>
<p>先二进制拆分，然后递归输出</p>
<p>毕竟最后要输出，所以输出长度应该是有保障的</p>
<p>直接做即可</p>
<p>草了byd是大模拟</p>
<p>写了一个小时</p>
<p>希望能过</p>
<h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><p>SA板子题？</p>
<p>好像又不太对</p>
<p>感觉不如t1</p>
<p>这么大的询问一眼离线</p>
<p>建trie树，每个点此时表示一个子串</p>
<p>每个点额外维护一个 tim 表示子串最近加入时间</p>
<p>从左往右添加即可</p>
<p>对于区间加操作则差分</p>
<p>注意子串长度</p>
<p>对于一个点 $i$ ，他表示的子串长度为 $len_i$ ,时间为 $tim_i$ ，那么其左端点为 $tim_i-len_i+1$ ,新左端点为 $r-len_i+1$ ，那么对应的操作就是区间 $[tim_i-len_i+2,r-len_i+1]$ 加1</p>
<p>应该就做完了？</p>
<h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><p>不会，不会是字符串专场吧</p>
<p>欸</p>
<p>眼熟</p>
<p>草了，开猜</p>
<p>对于任意两个前缀 $S_1,S_1c$ 而言，$S_1$ 作为前缀且接上一个以 $c$ 为开头的后缀能够表示出来的字符串一定是 $S_1c$ 作前缀的子集</p>
<p>也就是说：$S_1+c$ 其实是无用的，不需要统计</p>
<p>但假设没有任意一个前缀满足 $S_1+z$ ，那么他就是唯一的</p>
<p>所以建两棵trie树， 排除掉其有儿子的情况后接上其他的即可</p>
<p>可能是对的？</p>
<p>建议跑跑对拍</p>
<p>等下</p>
<p>这个后缀不太对劲</p>
<p>它的开头有点问题</p>
<p>我的第一步其实本质上是在去重，即去掉相同前缀</p>
<p>第二步也需要去重，不过去的是后缀的重</p>
<p>但事实上而言，我是不是直接哈希也是可行的？</p>
<p>所以前面的去重，后面的哈希</p>
<p>可能会漏记</p>
<p>我们额外规定 “对于一个前缀树上的节点，若它的上层节点能够通过添加一个字符而变为它自身，那么就算合法”</p>
<p>其实本质上而言，我们是在对能够表示出来的字符串做分类</p>
<p>如果一个字符串 $S$ 能够被表示为 $S_1S_2$ 那么他一定能够表示为一个唯一的 $S_1S_2$ 匹配满足 $S_1$ 最长，$S_2$ 不为0</p>
<h1 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h1><p>矩阵乘法？</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241011/</url>
    <content><![CDATA[<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>不会，感觉像之前那道 bitset优化的大暴力</p>
<p>现在做完T2了还是不会，只会 $O(nm)$ 的</p>
<p>咱总不能正解真是这个复杂度吧</p>
<p>真是我捶死出题人</p>
<p>nm1e9 正好1e9</p>
<p>这是能跑的吗？</p>
<p>欸🤓👆，是不是可以这样子</p>
<p>我先一遍大 $n^2$ 求出所有两个数能合成出来的数，额外记录一个时间戳表示他最早在什么时候出现</p>
<p>然后接下来直接log查询就好了</p>
<p>unorder会T</p>
<p>pbds改变生活！</p>
<p>希望能过</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>矩阵乘法？</p>
<p>设状态分别为</p>
<p>|上一个数为无用数，上一个为 S，上两个为 SO |上一个数为无用数，上一个为 S，上两个为 SO |同|无所谓下一个是什么</p>
<p>​							已存在0个SOS                                                       已存在1个SOS</p>
<p>矩阵快速幂即可</p>
<p>总共10个状态</p>
<p>upd:8:18做完了:underage:</p>
<p>希望能过</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>显然是可以用线段树维护的</p>
<p>设 $f_{i}$ 表示有 $i$ 人选了一血气球的方案数</p>
<p>然后就可以线段树维护了</p>
<p>时间复杂度：$O(qc^2logn)$</p>
<p>考虑优化合并</p>
<p>卷卷卷卷卷积？逗我呢</p>
<p>拿个80pts跑人了</p>
<p>草了，好像只有50分</p>
<p>想想t1去了</p>
<h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>朴素dp</p>
<p>先找到重心，考虑重心的第二定义，即：每个子树的大小都不超过大小之和的一半</p>
<p>即</p>
<p>$\forall i \in son_u,siz_i\le\left \lceil \frac{\sum_{v\in son_u}siz_v}{2} \right \rceil$</p>
<p>当只有一个重心时，以其为根建树，设 $f_{i,j}$ 表示以 $i$ 为根的子树大小为 $j$ 的方案数即可</p>
<p>？不是？</p>
<p>这代码写的跟个垃圾场一样，我都不报希望了都</p>
<p>这tm能过大样例？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p>
<h2 id="赛后总结"><a href="#赛后总结" class="headerlink" title="赛后总结"></a>赛后总结</h2><p>本来第三题能做的，最后没时间了，以后考试还得是专注为好</p>
<p>时间越多机会越多</p>
<p>还有多尝试反向的角度，哪怕打心底认为不可以</p>
<p>t4也是，本来调代码的时候已经不抱希望了</p>
<p>相信奇迹吧，好运双倍给下一次</p>
<h3 id="T3正解"><a href="#T3正解" class="headerlink" title="T3正解"></a>T3正解</h3><p>正着做不是很好做，考虑设 $f_i$ 表示有 $i$ 人选择了一血气球的方案数</p>
<p>我们发现答案其实就是  $\prod_{i}(a_i+b_i)-\sum_{i&#x3D;0}^{c-1}f_i$</p>
<p>我们发现这个dp是可撤销的，比如说我们设 $f_i(k)$ 表示删去 $k$ 这个人后的方案数</p>
<p>那么有</p>
<p>$f_0(k)&#x3D;\frac{f_0}{(a_k+b_k)}$</p>
<p>$f_i(k)&#x3D;f_i - b_kf_i(k)-a_kf_{i-1}(k)$</p>
<p>也就是</p>
<p>$f_i(k)&#x3D;\frac{f_i - a_kf_{i-1}(k)}{1+b_k}$</p>
<p>$newf_i-a_kf_{i-1}&#x3D;b_kf_i$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241012/</url>
    <content><![CDATA[<p>感觉都不是很好做</p>
<p>难不成是贪心专场？</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>考虑线段树上维护某些信息</p>
<p>维护一个数组，表示从左往右或从右往左依次出现的字符为什么</p>
<p>这样子只需要记录30种不同的数即可</p>
<p>因为n只给到 $5\times 10^4$ ，所以很容易想到双log做法</p>
<p>我们把其中一个log换成 k 即可得到 $O(nklogn)$ 的做法</p>
<p>然后就过了？</p>
<p>希望能过</p>
<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>感觉像贪心，但是死活猜不出结论</p>
<p>不妨设数量少的那一边在下方</p>
<p>设 $f_{i,j}$ 表示当前选到第i个下方点，第j个上方点的最小权值</p>
<p>那么有转移</p>
<p>$f_{i,j}&#x3D;\min_{k&lt;j} f_{i-1,k}+ \mid a_j-a_i \mid$</p>
<p>发现当 $j$ 固定时一切都固定了</p>
<p>但这样是拿不了满分的</p>
<p>算了就这样吧，说不定接下来还有贪心结论</p>
<p>草，看错题了</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>感觉好像在哪里见过</p>
<p>根据相对运动的观点，一个字母往左移等价于另一个字母往右移</p>
<p>所以最后面一定存在一种方案为安排好左边再向右拓展</p>
<p>两个相同的字符不会交换，因为那样子没有意义</p>
<p>区间dp？</p>
<p>设 $f_{i,j,a,b}$ 表示 $[i,j]$ 这个区间的左右两端字符为 a,b 的最小操作步数</p>
<p>感觉不如T4</p>
<h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>考虑枚举区间中最大的数</p>
<p>问题就变成了“有多少个经过某点的区间满足异或起来比一个定值小”</p>
<p>容易想到前缀和，就变成了“有多少个包含某点的两点满足异或起来比一个定值小”</p>
<p>设中点为 $mid$ ，左端点为 $l$ ,右为 $r$ </p>
<p>那么答案就是</p>
<p>$\sum_{l \le i &lt;mid}\sum_{mid\le j \le r}[d_i\ xor\ d_j \le a_{mid}]$</p>
<p>主席树？可持久化trie？</p>
<p>容易想到枚举二进制位</p>
<p>完了，考的最炸的一集</p>
<p>这下死光光了</p>
<p>积攒运气吧</p>
<p>哭哭</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241015/</url>
    <content><![CDATA[<p>来冲得更猛烈一点吧！</p>
<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>容易想到最小生成树</p>
<p>跑完一遍之后继续加边，因为这条边联通的部分边都比他小，所以跟我有毛关系啊</p>
<p>直接加即可</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>我们把每个信息放在时间轴上进行排序</p>
<p>不难发现影响 minmax 的只有最左端的信息</p>
<p>对于 bad 而言，每次加入一个信息判断其左右两个点是否能够同时满足</p>
<p>set维护即可</p>
<p>判断还怪麻烦的</p>
<p>对时间进行排序后，若前几个的位置都为0，可以选择不走</p>
<p>我操了大分讨</p>
<p>首先把点分为两类：一类是位置为 1 且时间在最前排的，其他分为另一类</p>
<p>当加入一个另类点时，需要考虑是否要将左侧点移动到右侧</p>
<p>判断合法性时需要额外和最左侧的点判断，左侧不需要判</p>
<h4 id="对于Min"><a href="#对于Min" class="headerlink" title="对于Min"></a>对于Min</h4><p>若存在一个左侧点使得它和上一位左侧点不同奇偶，则到他为止都不能弹出</p>
<p>否则判断距离输出即可</p>
<h4 id="对于Max"><a href="#对于Max" class="headerlink" title="对于Max"></a>对于Max</h4><p>同理，但是直接找到右侧第一个点判断即可</p>
<p>若没有右侧点，则输出inf</p>
<p>草了先写T3吧</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>因为这是个子树查询问题，所以考虑dfs序+启发式合并，每次计算点数较少的一方</p>
<p>因为绝对值不是很好维护，所以考虑压到棵线段树上</p>
<p>对于两个点 $x,y$ ，不妨设 $a_y&gt;a_x$,$b_y&gt;b_x$ ，那么若有 $a_y-a_x&gt;b_y-b_x$ ，那么有</p>
<p>$0&gt;b_y-b_x-a_y+a_x$</p>
<p>我们发现一个很神奇的现象，若我们一开始时便在答案中加入 $a_y-a_x$ ，最后再加上数轴上小于0的部分那就恰好等于答案了</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241017/</url>
    <content><![CDATA[<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>考虑转曼哈顿距离</p>
<p>有<br>$$<br>\min(\mid X_i-X_j \mid,\mid Y_i-Y_j \mid)&#x3D; \mid X_i-X_j \mid+\mid Y_i-Y_j\mid -\left( \frac{\mid \mid X_i-X_j\mid - \mid Y_i+Y_j\mid \mid}{2}+\frac{\mid  \mid Y_i-Y_j \mid - \mid X_i+X_j \mid \mid}{2}   \right)<br>$$<br>欸但是你这么想，如果不小心取了max得话肯定不优对吧</p>
<p>那我此时如果再取一次min得话就会把它覆盖掉</p>
<p>我们再建一排点，表示不同的 X 间的距离</p>
<p>同理，再建Y的即可</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>窝趣咋过了</p>
<p>因为那个小于10的限制，所以猜想能两两gcd为k的数不会很多</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>窝趣是不是可以线段树直接暴力做啊</p>
<p>反正死了就不会再统计贡献了，那就直接暴力搜呐</p>
<p>记录一下区间没死的min(死了算-1)</p>
<p>再记录一下区间有多少个最小值(死了也算0，但是打了tag)</p>
<p>对于护盾而言也是一样，你插一个我就多个log而已</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241021/</url>
    <content><![CDATA[<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>什么寄吧</p>
<p>这个Y有什么存在的意义吗</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>？真的是我想的那样吗</p>
<p>反正最短路都唯一了，那就先跑一遍dij</p>
<p>然后对终点的所有出边判断一遍？</p>
<p>手玩样例也没问题啊？</p>
<p>难道是我想假了？</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>容易想到枚举开头元素，二分其长度</p>
<p>问题就变成了“我如何判断能不能取到这些数”</p>
<p>变成狗构造了（</p>
<p>首先当数的个数大于 $n+1$ 时一定无解，当不包含起始位置时当大于 $n$ 一定无解</p>
<p>容易发现它的逻辑其实是这样的：牺牲一边的数从而取到另一边的数</p>
<p>所以从中间开始拓展一定最优</p>
<p>草了好像没什么变化</p>
<p>check咋弄都是 $O(n)$ 的</p>
<p>其实就是说每个黑格子都得匹配一个上方的白格子嘛</p>
<p>欸那是不是就是说对于每个黑格子，都满足他顶上的黑格子数小于另一侧的白格子数</p>
<p>设每个格子当前值为其顶上的白-黑，那么应时刻保持其大于等于0</p>
<p>我们发现其实把一个格子从白变成黑的过程其实就会将其下方所有位置减去1</p>
<p>而我们又知道初始时这是一个排列</p>
<p>所以双指针+线段树维护即可</p>
<p>牛皮</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241022/</url>
    <content><![CDATA[<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>送的</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>完了，今天咋都这么难</p>
<p>不妨这样子，先建出两棵树，然后编号相同的点之间连一条边权为 0 的边</p>
<p>然后就变成了两点之间的最长路</p>
<p>更本质一点的问题：二分图和最小生成树有什么关系</p>
<p>如果我把边权改为负的，那这样不就把符号变成min了吗</p>
<p>从左到右求一遍</p>
<p>再从右到左求一遍</p>
<p>根据brufk算法，这样应该是正确的</p>
<p>而且最多进行log次</p>
<p>等下，距离某点最远的点</p>
<p>那不就是重心吗</p>
<p>所以先求出两棵树的重心，然后就得到了每个点作为x时的dis</p>
<p>然后就有了两点的边权</p>
<p>选择最小那个，然后两个重心就被连接上了</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241024/</url>
    <content><![CDATA[<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>感觉和最长上升子序列很像</p>
<p>求一个子序列，使得满足 $a’<em>ib_i&lt;a’</em>{i+1}$</p>
<p>取个对数？然后就变成了 $\ln a’<em>ib_i&lt;\ln a’</em>{i+1}$</p>
<p>也就是 $\ln a’<em>i+\ln b_i&lt;\ln a’</em>{i+1}$</p>
<p>变成了加法，感觉会好做一点</p>
<p>现在变成了加上一个权值的最长上升子序列</p>
<p>考虑在正常的最长上升子序列中，我们设 $f_i$ 表示长度为 $i$ 的子序列的最小最后一位值</p>
<p>之所以能够这样维护还是因为 $f_i$ 具有单调性</p>
<p>但考虑对于现在而言，这还带有单调性吗？</p>
<p>显然具有，而且比之前的更强，要求在加上一个权值后仍旧比上一位要大</p>
<p>注意 $f_i$ 具有单调性，但由于有 $f_{i+1}&gt;f_i+b_i$，所以 $f_i+b_i$ 也具有单调性</p>
<p>然后二分，应该就做完了？</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>转化下题意，其实就是问存在多少个 $x,y$ 使得<br>$$<br>d(x-1)+y \equiv a \pmod{w}\<br>d(y-1)+x \equiv b \pmod{w}\<br>$$<br>$a,b$ 对 $w$ 取模，$1\le x,y \le min(m,d)$<br>$$<br>dx+y-d \equiv a \pmod{w}\<br>dy+x-d \equiv b \pmod{w}\<br>(d+1)y+(d+1)x\equiv a+b+2d  \pmod{w}\<br>x+y\equiv \frac{a+b+2d}{(d+1)}  \pmod{w}\<br>$$<br>当 $w$ 与 $d+1$ 互质时，设 $\frac{a+b+2d}{(d+1)}&#x3D;D,min(m,d)&#x3D;M$</p>
<p>则答案即为<br>$$<br>\sum_{x&#x3D;1}^{M}\sum_{y&#x3D;1}^{M}[w \mid x+y-D]\<br>\sum_{k&#x3D;0}^{\frac{D+2}{w}}\sum_{x&#x3D;1}^{M}\sum_{y&#x3D;1}^{M}[x+y-D&#x3D;kw]\<br>\sum_{k&#x3D;0}^{\frac{D+2}{w}}\sum_{x&#x3D;1}^{M} [1 \le kw+D-x \le M]\<br>\sum_{k&#x3D;0}^{\frac{D+2}{w}}\sum_{x&#x3D;1}^{M} [kw+D-M \le x \le kw+D-1]\<br>\sum_{x&#x3D;1}^{M}\sum_{k&#x3D;0}^{\frac{D+2}{w}} [kw+D-M \le x \le kw+D-1]\<br>$$<br>二分左右完全包含区间</p>
<p>同样的，我们还有<br>$$<br>dx+y-d \equiv a \pmod{w}\<br>dy+x-d \equiv b \pmod{w}\<br>(1-d)y+(d-1)x\equiv a-b  \pmod{w}\<br>x-y\equiv \frac{a-b}{(d-1)}  \pmod{w}\<br>$$</p>
<p>从头来，一定是哪里算错了<br>$$<br>dx+y \equiv a+d \pmod{w}\<br>dy+x \equiv b+d \pmod{w}\<br>$$<br>将 $d$ 对 $w$ 取模，得到 $D$</p>
<p>若 $D&#x3D;0$ ，则此时是好算的</p>
<p>若 $D \not &#x3D; 0$ ，则其与 $w$ 互质，变成了<br>$$<br>Dx+y \equiv a+D \pmod{w}\<br>Dy+x \equiv b+D \pmod{w}\<br>$$<br>不妨设 $y$ 是一个定值，那么有<br>$$<br>Dx \equiv a+D-y \pmod{w}\<br>x \equiv b+D-Dy \pmod{w}\<br>.\<br>Dx \equiv Y_1 \pmod{w}\<br>x \equiv Y_2 \pmod{w}\<br>$$<br>也就是说<br>$$<br>x \equiv \frac{Y_1}{D} \pmod{w}\<br>x \equiv Y_2 \pmod{w}\<br>$$<br>所以说当 $Y_1D^{-1}&#x3D;Y_2$ 时，会产生 $\left\lfloor\frac{M-Y_2}{w} \right\rfloor +1$ 的贡献</p>
<p>设 $a+D&#x3D;A$，$b+D&#x3D;B$</p>
<p>那就是 $AD^{w-2}-yD^{w-2}\equiv B-Dy$</p>
<p>$AD^{w-2}-B\equiv (D^{w-2}+D)y$</p>
<p>所以说此时的答案即为<br>$$<br>\sum_{y&#x3D;1}^{M}<a href="%5Cleft%5Clfloor%5Cfrac%7BM-(b+D-Dy">(D^2-1)y \equiv a+(b-1)D+D^2</a>}{w} \right\rfloor +1)<br>$$<br>当 $$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241025/</url>
    <content><![CDATA[<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>考虑将所有数排序再二进制拆分，那么得到这样一个排列图</p>
<p>000|11111</p>
<p>00|1|00|11</p>
<p>0|1|0|0|1|0|1</p>
<p>枚举中间位 $j$ ，那么若 j 的这一位为 1，相当于01反转</p>
<p>变成统计每一层左右有多少个编号小于&#x2F;大于自身的个数</p>
<p>画两根数轴，每根数轴表示0&#x2F;1的编号</p>
<p>枚举下方的每一个区间，等价于问区间中有多少个待查寻线段</p>
<p>前缀和预处理一下即可</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>换成与先<br>$$<br>\begin{eqnarray}<br>&amp;&amp;  \sum_{i&#x3D;1}^{n-1}i \oplus (n-i)\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;1}^{n-1} i+n-i-i &amp; (n-i)\<br>&amp;&#x3D;&amp; n(n-1)-\sum_{i&#x3D;1}^{n-1} i &amp; (n-i)\</p>
<p>\end{eqnarray}<br>$$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241105/</url>
    <content><![CDATA[<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>三维BFS乱搞一下应该就可以了吧</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>经典套路，不难发现每个数最后到达的位置都是固定的</p>
<p>而根据冒泡排序的观点，其实排序也就等价于交换两个相邻的偏序点</p>
<p> $O(n^2)$ 枚举交换即可</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>GF?</p>
<p>假设我们固定某些位后，其实转换题意后，就是求<br>$$<br>\begin{eqnarray}<br>&amp;&amp; \left(\frac{1-x^{m+1}}{1-x} \right)^{L} \<br>&amp;&#x3D;&amp; \left(1-x^{m+1} \right)^{L} \left(1-x\right)^{-L}<br>\end{eqnarray}<br>$$<br>分别分解得到<br>$$<br>\begin{eqnarray}<br>&amp;&amp; \left(1-x^{m+1} \right)^{L}\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{L}C_{L}^{i}(-x^{im+i})\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{L}C_{L}^{i}(-1)^{im+i}x^{im+i}\<br>\end{eqnarray}<br>$$</p>
<p>$$<br>\begin{eqnarray}<br>&amp;&amp; \left(1-x\right)^{-L}\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{+\infty}C_{-L}^{i}(x)^i(-1)^i\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{+\infty}\frac{(-L)(-L-1)…(-L-i+1)}{i!}(x)^i(-1)^i\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{+\infty}\frac{(L)(L+1)…(L+i-1)}{i!}(-1)^{i}(x)^i(-1)^i\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{+\infty}C_{L+i-1}^{i}(x)^i\<br>\end{eqnarray}<br>$$</p>
<p>所以就有<br>$$<br>\begin{eqnarray}<br>\left(\frac{1-x^{m+1}}{1-x} \right)^{L} &amp;&#x3D;&amp; \sum_{i&#x3D;0}^{L}C_{L}^{i}(-x^{im+i})\sum_{j&#x3D;0}^{+\infty}C_{L+j-1}^{L-1}(x)^j\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{L}\sum_{j&#x3D;0}^{+\infty}C_{L}^{i}C_{L+j-1}^{L-1}(-1)^{im+i}(x)^{im+i+j}\<br>\end{eqnarray}<br>$$<br>假设我们要求其第 $d$ 项的值</p>
<p>那么其实就是<br>$$<br>\begin{eqnarray}<br>&amp;&amp; \sum_{i&#x3D;0}^{L}C_{L}^{i}C_{L+(d-im-i)-1}^{L-1}(-1)^{im+i}(x)^{d}\<br>\end{eqnarray}\<br>$$<br>不妨设 $f(x)&#x3D;\sum_{i&#x3D;0}^{L}C_{L}^{i}C_{L+(x-im-i)-1}^{L-1}(-1)^{im+i}$</p>
<p>我们要求的就是<br>$$<br>\begin{eqnarray}<br>\sum_{d&#x3D;0}^{P}f(d) &amp;&#x3D;&amp; \sum_{d&#x3D;0}^{P}\sum_{i&#x3D;0}^{L}C_{L}^{i}C_{L+(d-im-i)-1}^{L-1}(-1)^{im+i}\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{L}C_{L}^{i}(-1)^{im+i}\sum_{d&#x3D;0}^{P}C_{L+d-1-i(m+1)}^{L-1}\<br>\end{eqnarray}<br>$$<br>这是…组合数前缀和？<br>$$<br>\begin{eqnarray}<br>&amp;&amp; \sum_{i&#x3D;0}^{L}C_{L}^{i}(-1)^{im+i}\sum_{d&#x3D;0}^{P}C_{L+d-1-i(m+1)}^{L-1}\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{L}C_{L}^{i}(-1)^{im+i}\left( C_{L+P-i(m+1)}^{L}-C_{L-1-i(m+1)}^{L}  \right)\<br>\end{eqnarray}<br>$$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241107/</url>
    <content><![CDATA[<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>考虑提取出某个树上连通块的代表元</p>
<p>发现对于每个连通块，它的根都是唯一的</p>
<p>所以 树上连通块的数量 &#x3D; 树上无父亲点的数量</p>
<p>期望其实就是 $\frac{\sum_{p \in S} X_pY_p}{\mid S\mid}$ ,其中 $\mid S \mid &#x3D; 2^{n}$</p>
<p>变成求 $\sum\limits_{p\in S}X_pY_p$</p>
<p>考虑对 $X_p$ 分解，变为每个点无父亲时的贡献</p>
<p>也就是 $\sum\limits_{i&#x3D;1}^{n}E(i,fa_i)$ ，$E(i,j)$ 表示点 $i$ 必选 点 $j$ 必不选时第二棵树的贡献和</p>
<p>我们发现这其实等价于 点 $i$ 必选的贡献 - 点 $i,j$ 必选的贡献</p>
<p>考虑怎么求点 $i,j$ 必选的贡献，考虑从一开始的 $dp$ 开始入手</p>
<p>一开始，我们设 $f_{i,0&#x2F;1}$ 表示在以点 $i$ 为根的子树中，点 $i$ 选&#x2F;不选的期望</p>
<p>那么有<br>$$<br>f_{u,1}&#x3D;\sum_{v\in son_u} \frac12(f_{v,0}+f_{v,1})\<br>f_{u,0}&#x3D;\frac{\mid son_u \mid}{2}+\sum_{v\in son_u} \frac12(f_{v,0}+f_{v,1})\<br>$$<br>当某个点必选时，相当于某个点处的 $f_{u,0}$ 强制设为了 $0$ ，把二分之一去掉，楼上的加上 $\frac12$ 然后更新 $dp$ ，得到的 $f_{0,0}$</p>
<p>当某个点必选时，相当于某个点处的 $f_{u,1}$ 强制设为了 $0$ ，把二分之一去掉，楼上的减去 $\frac12$ 然后更新 $dp$ ，得到的 $f_{0,0}$</p>
<p>不妨设 $g_u&#x3D;f_{u,0}+f_{u,1}$ ，那么有<br>$$<br>g_{u}&#x3D;\frac{\mid son_u \mid}{2}+\sum_{v\in son_u} g_v\<br>\begin{eqnarray}<br>f_{0,0} &amp;&#x3D;&amp; g_0-f_{0,1}\<br>&amp;&#x3D;&amp; g_0-\frac12\sum_{v\in son_0} g_v\<br>&amp;&#x3D;&amp; g_0-\frac12g_1\<br>\end{eqnarray}<br>$$<br>考虑转变为求 $g_u$ </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/2024%E5%B9%B4/</url>
    <content><![CDATA[<p>[[20241009]]<br>[[20241011]]<br>[[20241012]]<br>[[20241015]]<br>[[20241017]]<br>[[20241021]]<br>[[20241022]]<br>[[20241024]]<br>[[20241025]]<br>[[20241029]]<br>[[20241105]]<br>[[20241107]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2024%E5%B9%B4/20241029/</url>
    <content><![CDATA[<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>挖槽，眼熟</p>
<h4 id="step1-到"><a href="#step1-到" class="headerlink" title="step1:到"></a>step1:到</h4><p>因为是树，所以先跑到 ST 的路径上先再说</p>
<p>此时有若干种可能：</p>
<p>若 $dep_{lca_{S,T}}&gt;dep_{lca_{S,S’}}$ ，则说明最快到达点为 $lca_{S,T}$</p>
<p>否则为 $lca_{S,S’}$ 与 $lca_{T,S’}$ 中深度较大的那一个</p>
<p>求出最快到达点后，开始追逐，设其为点 $M$</p>
<h4 id="step2-追"><a href="#step2-追" class="headerlink" title="step2:追"></a>step2:追</h4><p>当 $dis_{M,S’}&gt;dis_{M,S}$ 时，只能在终点相见了</p>
<p>否则答案为 $\left \lfloor\frac{dis_{S,S’}+1}{2}\right \rfloor$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.1.20/</url>
    <content><![CDATA[<p>模拟赛时间</p>
<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>发现其实就是问卷不卷的问题<br>而且求和再差导致了前面的决策并不会影响后边的<br>然后从第二个开始选择所有正值即可</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>点分治</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>我不会树状数组上二分啊（<br>其实就是找两个情况<br>火大于等于冰的第一个瞬间以及冰大于火的瞬间<br>两个其实相邻问题就变成了“如何寻找冰大于火的瞬间”<br>说不定卡常能过呢？<br>万一呢？<br>试试看吧</p>
<p>先把T1T2敲了，再说T3</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.1.21/</url>
    <content><![CDATA[<p>模拟赛时间</p>
<h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>感觉好像有点眼熟<br>感觉要证明些贪心的结论啥的</p>
<p>不管了，乱搞<br>首先对于最大的元素，显然有答案要么是最大次大的和取模，要么是双指针搞定</p>
<p>得到答案后显然后续的模数都必须大于这个值，发现砍掉了很大一块<br>所以乱搞即可</p>
<h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>草，典<br>思考我需要什么<br>一个朴素的LCA，一个向上的 $2^k$ 级父亲的位置，一个向下的 $2^k$ 级父亲的位置<br>我还需要知道某个点往上的第一个 xx 点的位置，这个其实倍增顺带求解即可</p>
<h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>发现他要求的其实是“结束排名的可能顺序有多少种”<br>而我们知道一种排名想要合法，那么应该满足其最小的使用数小于等于m<br>考虑设 $f_{S,i,j,k}$ 表示已经选的集合为 $S$ ，上一个选择的数为 $i$ ,上一次额外加的数为 $j$ ，总共额外加了 $k$ 的方案数</p>
<p>然后你发现其实 j 根本就没有意义，因为 j 显然与 $S$ 中的 $a_i$ 的最大值相等最好(或加减1)</p>
<p>所以就变成 $f_{S,i,0&#x2F;1,k}$ 表示已经选的集合为 $S$ ，上一个选择的数为 $i$ ,上一次的值为最大值是否加1 ，总共额外加了 $k$ 的方案数<br>应该就做完啦？</p>
<p>忘记一个条件了：$b_i$ 必须单调不降<br>那么也就是说，当我们产生一个 $b$ 时，后面的所有数都会吃到增益<br>我们发现这进而也就代表着“这一次的增大不会对后边的相对大小产生影响”<br>所以直接先一步统计即可<br>所以 $j$ 确实没什么用，我们用 $f_{S,i,k}$ 表示即可</p>
<p>晚上练习题：<a href="%E6%B5%8B%E8%AF%95%E8%AE%B2%E8%AF%84&%E4%B9%A0%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89.pdf">链接</a></p>
<h2 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h2><p>主席树乱搞</p>
<h2 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h2><p>感觉有点神秘</p>
<p>是不是可以按照dfs序双指针着选择相邻两个不同集合的节点？</p>
<p>考虑设每个节点的贡献为 “其能够选择的深度最大的LCA”</p>
<p>那么显然这个 LCA 一定位于其的祖先上</p>
<p>所以倍增的找到第一个满足子树内有另一个集合的点即可</p>
<h2 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h2><p>有点唐了</p>
<p>看到同时移动很本能的就能想到二分答案</p>
<p>显然每个点一定越往上越优</p>
<p>特别的，当一个点能到达首都时，他就需要做抉择——到哪个首都的子节点上</p>
<p>剩下的其实就是一个叶子节点区间染色问题，dfs序即可</p>
<h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>典</p>
<h2 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h2><p>怎么做过啊（</p>
<p>显然的一个序列分割问题</p>
<p>设 $f_{i,j}$ 表示当前在点 $i$ ，不和谐度和为 $j$ 的方案数</p>
<p>转移方程是好想的</p>
<p>$$f_{i,j}&#x3D;\sum_{k&#x3D;1}^{i-1}f_{k,j-\max{a_{i,k}+\min{a_{i,k}}}}$$</p>
<p>晚上聊了一下，感觉最近还是把dp &#x2F; ds 搞好为重</p>
<p>部分分大概率也不会以很难的形式给出，所以要尽可能的不被拉开差距</p>
<p>接下来重点练习些 CF2000* 的 dp 题，尽可能的将思维转化这一步做好</p>
<p>目标在进队，银牌，并不需要过难的知识点</p>
<p>尽可能的不要犯错，不 nt 就是赢</p>
<p>再开一题：<a href="https://mirror.codeforces.com/problemset/problem/1574/F">Dp</a></p>
<p>其实就是问你能构造出多少个数组 $a$ ，使得其满足对于所有的 $A_i$ 都有“其中的每个元素都被且仅被一个该串包含”</p>
<p>发现若一个 $A_i$ 中有重复元素，那么必死</p>
<p>对于两个 $A_i$ ，若他们有相同元素，那么必定两两拼接，若不能拼接，则死</p>
<p>剩下的情况那就是序列分割，中间插入未出现过的元素</p>
<p>然后就做完了？</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.1.22/</url>
    <content><![CDATA[<p>模拟赛时间</p>
<p><a href="test-2.pdf">题目链接</a></p>
<h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>发现这几个限制都可以转化为第一个</p>
<p>对于最后一个那就是全局异或一下就好</p>
<p>然后就变成一个区间异或，单点查询的问题</p>
<p>爆搜就好</p>
<h2 id="T2-最讨厌数学了"><a href="#T2-最讨厌数学了" class="headerlink" title="T2 最讨厌数学了"></a>T2 最讨厌数学了</h2><p>考虑设 $a_{n,i}&#x3D;x_i$ ，$a_{i,m}&#x3D;y_i$</p>
<p>然后你发现每个元素都只跟其行与列与 $a_{n,m}$ 有关系</p>
<p>不妨设 $a_{n,m}&#x3D;0$ ,接下来就只跟行列有关系了</p>
<p>我们就得到了若干个和式</p>
<p>我们想要让这里边的最大值减最小值尽可能的小</p>
<p>发现你的每次操作其实就等价于“将间隔的一段加一减一”</p>
<p>二分图染色？</p>
<p>我觉得它变换的次数不会很多，就像之前那道题一样</p>
<p>试一下？</p>
<p>$$<br>\begin{array}{|c|c|c|c|}<br>\hline  &amp;  &amp; -x_1-y_3-D &amp; y_3\<br>\hline  &amp; x_2+y_2-D &amp; x_1-y_2+D &amp; y_2\<br>\hline -x_3-y_1-D &amp; -x_2 +y_1+D &amp; -x_1-y_1-D &amp; y_1\<br>\hline x_3 &amp; x_2 &amp; x_1 &amp; D\<br>\hline<br>\end{array}<br>$$<br>沟槽的，不对</p>
<p>那个D不是全局加</p>
<p>有点难办了这下</p>
<p>欸我擦，不对</p>
<p>每个位置都非0啊</p>
<p>那就是说超 $10^6$ 就必炸了，救不回来</p>
<p>也就是说问怎么把负数都扣回来</p>
<h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>欸我擦，暴力能拿68分</p>
<p>这我还写个78正解啊</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.1.23/</url>
    <content><![CDATA[<p>![[problem (2).pdf]]</p>
<p>沟槽的第一题不会做啊</p>
<p>做第三先吧</p>
<h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>因为保安很神经的歪脖子，所以最右边的点一定会选</p>
<p>然后设 $f_{i,j}$ 表示区间 $[i,j]$ 的答案</p>
<p>因为一个保安能看到的范围是一段段不连续的区间，所以不连续的区间我们用 $f$ 去补齐就好</p>
<h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>我是不是有一个 $O(n^2 log)$ 的做法了？</p>
<p>为啥要保证互不相同啊？</p>
<h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>考虑每个点的贡献</p>
<p>当一个点收到普通传递时，取决于他是发送方还是接收方，产生正负自身标号的贡献</p>
<p>当收到特殊传递时，那么无论如何都是当前标号</p>
<p>如何判断是哪种传递呢？就是判断上一个数是否位置比自己大</p>
<p>沟槽的，我感觉像状压</p>
<p>考虑排序从小到大插入每种类型的数，也就是“对应位置赋值”</p>
<p>此时若上一个位置的数被插入过，则说明比当前位置小</p>
<p>否则比当前位置大，那就是两种不同的贡献</p>
<p>开始时用一个桶记录不同元素的相邻对的数量即可</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.10/</url>
    <content><![CDATA[<h2 id="模拟赛"><a href="#模拟赛" class="headerlink" title="模拟赛"></a>模拟赛</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>考虑每个格子最终的颜色，可以得出其对应的行和列的先后顺序</p>
<p>然后暴力的考虑添加每个列的位置就好</p>
<p>需要判断是否无解，最终的答案就是每个块内部随便排的方案数的乘积</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>考虑在每段序列的结束处统计贡献</p>
<p>不妨设 $f_{i,j}$ 表示当前位置在  $i$ ，当前的最长不降子序列</p>
<p>考虑枚举最长上升子序列的长度为 $d$ </p>
<p>在此基础上跑dp，设 $f_{i,j}$ 表示当前位置为 $i$ ，最长上升子序列中</p>
<p>对于一个序列的最长上升子序列，有</p>
<p>$$ans&#x3D;n+\max_{i\in[0,n]}sum_i-sum_n-i$$<br>我们考虑转换一下，要让最长上升子序列最大，同时令 1 的数量尽可能多，其实也就是要让 $ans \times n+count_1$ 最大，也就是</p>
<p>$$pans&#x3D;\max_{i\in[0,n]}n\times(sum_i-sum_n+n-i)+$$</p>
<p>考虑枚举 $ans$ 和 $c1$，此时问题就变成了问 “从右往左数第 $c1$ 个 $1$ 的位置大于 $ans-c1$ 且第 $c1+1$ 个 $1$ 的位置小于” </p>
<p>设 $f_{i,j,k,l}$ 表示当前在第 $i$ 位，前面共有 $j$ 个 $0$ ，目前的最长不降子序列为 $长k,l个1$  的产生概率 </p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>要求的即为<br>$$\begin{eqnarray}<br>f(X)&amp;&#x3D;&amp;\sum_{l&#x3D;1}^{n}\sum_{r&#x3D;l}^{n}[gcd(\max_{i\in[l,r]}a_i,\min_{i\in[l,r]}a_i)&#x3D;X]\<br>&amp;&#x3D;&amp;\sum_{l&#x3D;1}^{n}\sum_{r&#x3D;l}^{n}[X\mid \max_{i\in[l,r]}a_i][X\mid \min_{i\in[l,r]}a_i][gcd\left(\frac{\max_{i\in[l,r]}a_i}{X},\frac{\min_{i\in[l,r]}a_i}{X}\right)&#x3D;1]\<br>&amp;&#x3D;&amp;\sum_{d&#x3D;1}^{\left \lfloor\frac{n}{X} \right\rfloor }\mu(d)\sum_{l&#x3D;1}^{n}\sum_{r&#x3D;l}^{n}[Xd\mid \max_{i\in[l,r]}a_i \wedge Xd\mid \min_{i\in[l,r]}a_i]<br>\end{eqnarray}$$<br>发现这是一个调和级数问题，问题就变成了如何求</p>
<p>$$g(X)&#x3D;\sum_{l&#x3D;1}^{n}\sum_{r&#x3D;l}^{n}[X\mid \max_{i\in[l,r]}a_i \wedge X\mid \min_{i\in[l,r]}a_i]$$<br>考虑从右往左枚举每个点 $i$ 作为最大值时的贡献，枚举 $a_i$ 的约数</p>
<p>对于小于其的部分可以单调栈，每个单调栈上开一个桶维护后缀的，有此约数的数的个数</p>
<p>然后对于其作为最大值的贡献，需要找到其右侧第一个大于等于他的位置，也就是对应单调栈上的一个前缀，拿前缀减后缀即可</p>
<p>这个桶使用可持久化数组维护即可</p>
<p>然后就得到了 $O(nlog^3n)$ 的做法</p>
<p>但是我们发现其实并不需要可持久化，具体的，将其需要减去的后缀的位置离线下来，然后在其第一次出现时减去贡献即可</p>
<p>然后我们还需要反过来跑一遍</p>
<p>总时间复杂度： $O(nlog^2n)$</p>
<p>![[day2.pdf]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.11/</url>
    <content><![CDATA[<p>首先考虑什么情况下会出现 7</p>
<p>发现有 8 就有 7</p>
<p>有 9 就有 8<br>以此类推</p>
<p>所以最终答案一定不会超过 10</p>
<p>另外还需要考虑进位的影响</p>
<p>当出现 $min \ge mex$ ，</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.12/</url>
    <content><![CDATA[<p>![[1.pdf]]</p>
<h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>就是你考虑这么一件事情</p>
<p>首先情侣间一定是相反的</p>
<p>其次，连续三个中至少有一个相邻对是相反的</p>
<p>所以考虑建图，对 $a_i,b_i$ 之间连边，对 $i,i+1$ 之间连边</p>
<p>你发现他一定是一个二分图，所以二分图染色即可</p>
<p>![[2.pdf]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.13/</url>
    <content><![CDATA[<h2 id="模拟赛"><a href="#模拟赛" class="headerlink" title="模拟赛"></a>模拟赛</h2><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>首先对于一个序列而言，我们操作的最小代价就是他的逆序对数量</p>
<p>草我感觉像证结论然后贪心</p>
<p>但是我实在是没发现什么结论啊</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>考虑先将图上所有点的连通性处理出来，我们发现接下来我们关注的只有这个联通块对应的行的区间</p>
<p>问题就变成了：给定若干个区间，要求用若干条垂线将其联通的最小代价</p>
<p>首先考虑将所有区间排序，然后扫描线，当某个区间的右端点被加入时则考虑更新答案</p>
<p>使用数据结构维护 $f_i$ 表示上一次修改在第 $i$ 行的最小代价</p>
<p>然后每次更新时找到当前区间内 “从右往左数第一个 1&#x2F;2” 的位置，</p>
<p>连边的本质？</p>
<p>我们回到一开始，如果用dp我们会如何解决这个问题</p>
<p>我们会设 $f_{i}$ 表示在第 $i$ 行使用了一次，并且所有 $l$ 小于等于 $i$ 的区间都已经联通的最小代价</p>
<p>其实就相当于转化为一个序列分割问题</p>
<p>我们发现 $i$ 实际上的取值只有可能是每个区间从右往左数第一个 $1&#x2F;2$ 的位置，于是决策点的级别就缩到 $O(k)$ 了</p>
<p>什么样的点可以转移呢？满足它左边所有区间的右端点的最大值比 $i$ 更大的</p>
<p>然后就做完了？</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.14/</url>
    <content><![CDATA[<h2 id="模拟赛"><a href="#模拟赛" class="headerlink" title="模拟赛"></a>模拟赛</h2><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>考虑像之前那道题一样将折线图画出来</p>
<p>然后利用JOI那题的trick，枚举最后一次被 clear 的位置在哪里</p>
<p>我们发现 clear 的充要条件是最高进制位被消去，只要没有被 clear 则后半部分的最高位置就是折线图的最高位</p>
<p>那么次高位呢？我们发现当我们确定最高位过后，那么第一个 $1$ 的位置就无关紧要了，所以以它+1的位置作为新的原点建坐标系，递归上述过程即可</p>
<p>如何统计答案呢？我们考虑枚举每一位，于是问题就变成了“答案前缀为 1010101******” 的方案数</p>
<p>如何控制前缀为这个呢？其实也就是通过计算出</p>
<p>算了先去部分分了</p>
<p>对于 1-6 的点直接暴力 $f_{i,j}$ 即可，当处理询问时则处理一个前缀的答案和一个后缀的答案，考虑从此处用 0 进行合并，时间复杂度 $O(n2^k)$</p>
<p>对于 $7-14$ 的点，我们发现这样子是支持 $O(n^2k)$ 的</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>求</p>
<p>$$\left( \sum_{i&#x3D;1}^{n} f(a,b,i)  \right) \mod{998244353}$$</p>
<p>其中 $f(a,b,i)$ 表示 $ax \equiv b \pmod{i}$ 的最小整数解</p>
<p>对于 $f(a,b,i)$ ，我们正常的求法是先判断是否有 $gcd(a,i) \mid b$ ，然后再用 $exgcd$ 求解</p>
<p>所以转化为求出 $ax+ik&#x3D;gcd(a,i)$ 的最小整数解，设其为 $g(a,i)$，然后将其乘上 $\frac{b}{gcd(a,i)}$</p>
<p>所以先令，转化为</p>
<p>$$\begin{eqnarray}</p>
<p>&amp;&amp; \sum_{i&#x3D;1}^{n}[gcd(a,i)\mid b]g(a,i)\times \frac{b}{gcd(a,i)}</p>
<p>\end{eqnarray}$$</p>
<p>![[sol(3).pdf]]</p>
<h2 id="Upd"><a href="#Upd" class="headerlink" title="Upd"></a>Upd</h2><h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h3><p>因为每次操作只会对其后缀一段进行修改，所以理论上来说必须先修改后边的元素才能修改前边的</p>
<p>由于只有两种元素，所以每一位非 $0$ 则 $1$ ，而且最终答案只与其与 $r$ 的大小比较有关，所以我们可以考虑设状态转移方程 $f_{i,j,k}$ 表示当前在第 $i$ 位，当前与 $r$ 的LCP长度为 $j$ ，且LCP后半部分(不包括LCP+1)内 $1$ 的个数为 $k$ 的方案数</p>
<p>我么发现通过记录LCP我们就顺带着知道了前缀的模样，以及其与 $r$ 的大小关系</p>
<p>什么时候LCP的长度会增加呢？发现当且仅当正好补满或正好为空时</p>
<p>值得注意的是，LCP的增加的确是每次+1的，但是LCP的减少一次却不一定只减去1</p>
<p>所以最好的办法还是预处理一个转移矩阵或是什么东西</p>
<p>然后就做完了？</p>
<p>转来转去的，好麻烦</p>
<p>改成表示从右往左数第一个不相同的位置的左边一个点吧</p>
<p>我操了，好恶心</p>
<p>在这里讨论一下吧</p>
<p>首先是添加 $0$ 的情况，假设 lp,cnt</p>
<p>当 lp&#x3D;0 ，</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.15/</url>
    <content><![CDATA[<p>![[problem.pdf]]</p>
<p>不妨设 $d^k(n)&#x3D;D(n^k)$ ，那么有 </p>
<p>$$d^k(n)&#x3D;\prod_{p\in pri}k\times cnt_{p}+1$$<br>易证其为一个积性函数</p>
<p>要求的即为</p>
<p>$$\begin{eqnarray}<br>&amp; &amp; \sum_{i&#x3D;1}^{n}d^{k}(i)\<br>&amp;&#x3D;&amp; \sum_{i&#x3D;1}^{n} \prod_{p\in pri}(k \times cnt_{p}+1)\<br>\end{eqnarray}$$</p>
<p>发现对于不同的 $k$ ,后边的形式也是确定的</p>
<p>所以其实就可以拆成关于 $k$ 的多项式即可</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>考虑分身存在的位置，在时间轴上位置相同的一定是连续的一段</p>
<p>所以考虑变成一个序列分割问题，设 $f_{i}$ 表示是否存在用假人完成了第 $i$ 个任务的情况</p>
<p>考虑决策点 $j$ ，那么必须要满足条件：$j$ 到 $i$ 这段中独立走能够完成，$j$ 到 $i$ 这段能够额外走到 </p>
<p>由于 $x$ 坐标之间互不相同，所以事实上一个位置的假人最多只能影响到一次询问</p>
<p>所以我们考虑将整个答案按照假人完成的询问去分割，考虑设 $f_{i,j}$ 表示当前处理到第 $i$ 个询问，且当前位于 $x_i$ ，当前假人位于 $x_j$ 的方案是否存在</p>
<p>考虑转移，将其分为两种可能</p>
<ul>
<li>这一步由真人来走，从 $f_{i-1,…}$ 去转移</li>
<li>这一步由假人完成，那么从 $f_{i-2,i}$ 去转移</li>
</ul>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>不妨设每种题目的数量为 $c_i$，由于差不超过 1 的限制，首先会将尽可能的将他们铺平，也就是说每一列的数量一定是 $\left\lfloor\frac{c_i}{2}\right\rfloor$ 和 $\left\lceil\frac{c_i}{2}\right\rceil$ 中的一个，且上取整的数量一定为 $c_i \mod S$  </p>
<p>![[problem2.pdf]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.26/</url>
    <content><![CDATA[<h2 id="模拟赛"><a href="#模拟赛" class="headerlink" title="模拟赛"></a>模拟赛</h2><p><a href="http://47.92.197.167:5283/contest/601"># 比赛链接</a></p>
<p>糖丸了</p>
<p>第一题写了个假做法——枚举中点，对左右部分分别排序</p>
<p>但这样并非正确，考虑 3 4 5 6 7 8 9 10 11 1 12 13 2 14 这个数据</p>
<p>显然最优解为 3 4 5 6 7 8 9 10 11 12 13 14 2 1</p>
<p>但是若用我们上边的那个方法，会跑出来 3 4 5 6 7 8 9 10 11 14 13 12 2 1</p>
<p>换言之，最终选择反转的数并不一定是连续的一段，而是离散的若干个点</p>
<p>所以考虑每个点是否转化为下降段</p>
<p>发现它与 [[AT_awtf2024_d Almost Bubble Sort 题解|之前mx那题]] 不太一样，具体而言，对于两个转化后的点 $A,B$ ，若有 $A$ 转化后比 $B$ 更大，那么 $B$ 无论是否转化都会产生逆序对贡献</p>
<p>换言之，所有的选择之间是独立的</p>
<p>然后就做完了</p>
<p>为什么会想歪呢？可能从一开始思考方向就错了，因为没注意到反例的存在</p>
<p>最后的解法能不能独立想出来呢？我觉得未必</p>
<p>可能思想还是不够跳跃吧，容易陷到先前一步的思考中</p>
<p>所以一方面在想到一个结论时，不应该先入为主的认为它就正确，多思考特殊情况的存在</p>
<p>另一方面，在这种统计贡献的题中，多从是否转换的角度分别去思考产生的贡献，以及对于其他的转换，转换与否是否统计出来的形式一致，进而推出独立性</p>
<p>对于T2，其实还是少拿了20pts，事实上没能想到对值域进行离散化</p>
<p>烦，省选的时候不能犯这样的问题啊</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.27/</url>
    <content><![CDATA[<p>考前易错清单</p>
<ol>
<li>注意测试前用题面提供的编译参数跑一遍，避免产生不必要的CE</li>
<li>注意实际评测时以全局内存为准，而非使用内存(要算)</li>
<li>为避免结论错误，无法证明&#x2F;有疑问的题目一定要尝试暴力对拍</li>
<li>开场先将所有题面阅读一遍，并将暴力敲出，一方面方便结论证明，另一方面避免被拉开差距，在此基础上再去追求高档部分分</li>
<li>你觉得有点熟悉的题 $\not &#x3D;$ 思路相近，如果能提供一种新的思路必然是好事，考虑在看到题目时先将所有思路全部列出来，然后再逐个去证明是否能够用于求解</li>
<li>你不会的题 $\Rightarrow$ 你不知道它的难度或算法 $\Rightarrow$ 无法证明是否别人都会做出来 $\Rightarrow$ 不用去思考别人会不会做，专注于自己眼下的事情</li>
<li>审题，注意序列&#x2F;排列字眼</li>
<li>即使是读入，也可能要先取模</li>
<li>考试不到最后一刻不要放弃，也许最后半个小时也能想出更多分数</li>
<li>当想到可能会炸 long long 时，在代码一旁标记上，警示后面的自己记得开 long long，值得注意的是，区间的子区间数量也是有可能炸long long的</li>
<li>负数取模无论在什么情况下，只要不保留符号，那都是用 <code>(a%d+d)%d</code></li>
</ol>
<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ol>
<li>线段树合并，先合并后修改，否则两倍时间+空间常数</li>
<li>注意加边是加单向还是双向</li>
<li>树剖的时候，注意你填进去的究竟是 rk 还是 dfn</li>
<li>做当前弧优化时，如果有点会重复入栈，那么注意编号要取地址，否则复杂度会被卡成 $m^2$</li>
<li>遇到与同余相关的题目时，考虑等式的左右两边是否会有模数的倍数，从而产生影响</li>
<li>概率是顺推，而期望需要逆推</li>
<li>在2-Sat中，记得将反向关系添加上才能保证最后方案搜索的正确性</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.5/</url>
    <content><![CDATA[<h2 id="模拟赛"><a href="#模拟赛" class="headerlink" title="模拟赛"></a>模拟赛</h2><p><img src="/20250205.pdf" alt="题面"></p>
<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>假设从 $l$ 到 $r$ 有两条路径 $A,B$，且 $B$ 的字典序更大，则走 $B$ 一定比走 $A$ 更优</p>
<p>所以我们发现这个决策也是有比较的，考虑设 $f_{i}$ 表示到达第 $i$<br> 个位置的最小字典序字符串，那么有</p>
<p>$$f_{i}&#x3D;a_i+\max_{x_i-x_j \in [L,R]}f_j$$</p>
<p>其中的加号表示集合加</p>
<p>我们重定义一下字符串比较的方式，通过比较某类数的数量的LCP来判断大小关系</p>
<p>发现这跟之前那题很像，都是改变一部分的值，所以考虑使用 主席树+哈希 优化整个修改的过程，我们就得到了 $O(logn)$ 的比较方式</p>
<p>然后我们再开一棵线段树表示区间比较的最大值</p>
<p>然后就结束了？</p>
<p>两个log，害怕</p>
<p>哦滑动窗口，不用了</p>
<p>事实上是一个log的</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>上下界网络流？</p>
<p>似乎需要考虑成环</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>感觉这个 “总的左括号数” 就长得很 GF 的样子</p>
<p>考虑设 $f_{i}$ 表示插入 $i$ 个左括号的合法箱子数，考虑求出其对应的 GF</p>
<p>卡特兰数吗？</p>
<p>考虑设 $g_{i,j}$ 表示插入了 $i$ 个括号，剩余 $j$ 个左括号需要被匹配的方案数</p>
<p>其实就是不过 $y&#x3D;x+1$ 这条直线的方案数，那么有 $f_{i}&#x3D;C_{2i}^{i}-C_{2i}^{i-1}$</p>
<p>我们都知道有 $$[x^n]\left(\frac{1}{1-x}\right)^k&#x3D;C_{n+k-1}^{k-1}$$<br>欸等下，是不是跟那个旅游那题有点像</p>
<p>考虑根号分治</p>
<p>设当前插入的括号数为 $x$</p>
<p>若 $x \le \sqrt k$ ，则因为数量较小，则背包枚举其加入 </p>
<p>若 $x &lt; \sqrt k$ ，则</p>
<p>不对好像，n个盒子</p>
<p>我感觉还是要GF，处理这种不均等递推的问题</p>
<p>但是这个GF实在是处理不出来，可能 EGF可以？</p>
<p>算了感觉 $O(n^3)$ 极限了</p>
<p>$$<br>C_{2i}^{i}-C_{2i}^{i-1} \Rightarrow C_{2i+2}^{i+1}-C_{2i+2}^{i}\</p>
<p>$$</p>
<p>$$\frac{i+1}{i}C_{2i}^{i-1}&#x3D;C_{2i}^{i}$$<br>$$C_{2i}^{i}-C_{2i}^{i-1}&#x3D;\frac{1}{i}C_{2i}^{i-1}$$<br>$$C_{2i+2}^{i+1}-C_{2i+2}^{i}&#x3D;\frac{1}{i+1}C_{2i+2}^{i}$$</p>
<h2 id="下午讲题"><a href="#下午讲题" class="headerlink" title="下午讲题"></a>下午讲题</h2><p>不妨设 $F$ 表示卡特兰数生成函数</p>
<p>$$\begin{eqnarray}  </p>
<p>&amp;&amp; <a href="F-%5Bx%5Ek%5DFx%5Ek">x^m</a>^n \<br>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{n}C_{n}^{i}(-1)^iF^{n-i} [x^k]Fx^{ik}   \</p>
<p>\end{eqnarray}$$</p>
<p>设 $T&#x3D;[x^k]F$</p>
<p>$$\begin{eqnarray}  </p>
<p>&amp;&#x3D;&amp; \sum_{i&#x3D;0}^{n}C_{n}^{i}(-1)^iF^{n-i} Tx^{ik}   \</p>
<p>\end{eqnarray}$$<br>问题就变成了如何去求 $[x^{m-ik}]F^{n-i}$</p>
<p>$$\frac{72}{n}^{n}$$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.4/</url>
    <content><![CDATA[<p>模拟赛，<img src="/20250204.pdf" alt="题面"></p>
<h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>发现不用边分治（</p>
<p>变成启发式合并即可，考虑合并较小较小元素，较大的部分开桶记录即可</p>
<p>考虑将其分为两部分：”被完全包含的mex段与未被完全包含的mex段“</p>
<p>有状态转移方程 $f_{i}&#x3D;\max\limits_{j\in{i-k+1,i-1}}f_{j-1}+s_imex_{i,j}-s_{j-1}mex_{i,j}$</p>
<p>对于被完全包含的段，可以将 $mex_{i,j}$ 视作斜率，$-s_{j-1}mex_{i,j}+f_{j-1}$ 的最大值视作截距 作李超树，mex变化对应每段的最优决策点不变</p>
<p>对于未被完全包含的段，由于只有一段，因此 $mex$ 固定，同时 $s_i$ 为定值，故 $s_imex$ 为定值，故可以将 $s_{j-1}$ 视作斜率</p>
<p>考虑固定右端点 $r$ ，那么一个合法的 $l$ 需要满足 $\max\limits_{i \in [l,r]}pre_i \le l$<br>显然是一个后缀，故可以二分</p>
<p>或者说，设 $f_i$ 表示以 $i$ 为右端点的最小左端点，那么为 $f_{r}&#x3D;\max\limits_{i\in [1,n]} pre_{i}$ </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.6/</url>
    <content><![CDATA[<p>![[20250206.pdf]]</p>
<h2 id="模拟赛"><a href="#模拟赛" class="headerlink" title="模拟赛"></a>模拟赛</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>感觉跟之前查询最大值那题很像</p>
<p>$$f(x)&#x3D;(x \oplus a)-b$$</p>
<p>$$f(x_{i}) \times f(x_{i+1}) \le 0$$</p>
<p>此时答案由两种可能构成：</p>
<p>$$\begin{cases}(x \oplus a)-b&#x3D;0 \</p>
<p>(f(x_i)) \not &#x3D; (f_{x_{i+1}})\</p>
<p>\end{cases}$$<br>上面那个显然是可以一棵trie树维护的</p>
<p>对于下面那个，我们先考虑判断是否存在合法答案，即是否所有数都是同号</p>
<p>如何判断一个区间是否有正负数呢？其实也就是判断区间内 $\oplus a$ 的最大值和最小值即可</p>
<p>这时候就可以上我们那四个模板了，看看哪个最适合这道题</p>
<p>因为单点修改，所以主席树就不合适了</p>
<p>我们考虑一个弱化版的问题：从左往右数第一个大于 $b$ 的数在哪里</p>
<p>显然找出第一个大于与第一个小于后，必定有一个满足答案</p>
<p>所以可以考虑在trie树上二分</p>
<p>对于找第一个大于的问题，我们可以考虑在trie树上每个节点维护一个 $Min$ 表示最小下标</p>
<p>然后在搜索过程中若有 $\oplus a$  后与 $b$ 异号的节点，直接输出即可</p>
<p>找小于同理，若有任意一个没能找到则返回</p>
<p>然后就做完了</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>考虑进行放缩，将定义更改为 “若有长度为 $k(r+b)$” 的区间，且区间内 $R,B$ 数量分别为 $kr,kb$ ，则可以消除</p>
<p>发现这样定义后就不再会产生嵌套，且一定与原问题等价</p>
<p>欸这能证明吗？好像不太会证</p>
<p>考虑设数量较小那个为 $X$ ，较大为 $Y$ ，数量分别为 $x,y$  </p>
<p>那么最平均的情况下， 每 $x$ 个 $X$ 都能够分到 $y$ 个 $Y$ </p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>考虑这么一件事</p>
<p>首先最后面建出来的图一定是一棵树，其次由单调栈相关知识可得能够<br>建的天桥的数量一定是 $O(n)$ 级别的</p>
<p>所以其实每条桥已经确定，问题在于如何去确定他们在对应区间上的取值</p>
<p>发现每条桥之间相互独立，所以我们可以考虑拆贡献</p>
<p>哦并非独立</p>
<p>不妨设每条路径的贡献为在LCA处匹配，考虑设 $f_{x,i}$ 表示在点 $x$ 处建造高度为 $i$ 的天桥的最小贡献，发现是一个凹函数</p>
<h3 id="也是成功的换题了"><a href="#也是成功的换题了" class="headerlink" title="也是成功的换题了"></a>也是成功的换题了</h3><p>欸可以这么玩</p>
<p>你可以先将 $a_{i} \oplus a_{i+1}$ ，然后再让 $a_{i-1} \oplus a_{i}$ ，最后再 $a_{i} \oplus a_{i+1}$，也就是说后边的数字实际上可以不改变，进而也就说明了一个位置处能够变化的数其实就是他的后缀线性基异或上他本身能够表示出来的数<br>因为线性基只会添加 $log$ 次，所以考虑将他们进行分段</p>
<p>考虑一个朴素的暴力，在正常 dp 的过程中暴力的线性基去求 “是否能够正好比某数大”</p>
<p>考虑暴力的去匹配每一位，得出一个最接近于该数的其大或比其小的数</p>
<p>若比其更大，则可以暴力跳令其变得更小</p>
<p>若比其更小，则找到第一个能匹配上的位置再暴力跳</p>
<p>时间复杂度 ： $O(n^2log)$ ，理论能过50</p>
<h2 id="下午讲评"><a href="#下午讲评" class="headerlink" title="下午讲评"></a>下午讲评</h2><p>.l                                                                                                                                  </p>
<h3 id="T2-upd"><a href="#T2-upd" class="headerlink" title="T2 upd"></a>T2 upd</h3><p>考虑跟之前那样将线性基相同的一段分离出来</p>
<p>由于这段的线性基相同，也就意味着 这段的每个值都 其实都能够被线性基表示出来，因此 $a_i$    </p>
<p>于是乎这段的值一定是连续一段上升的最优，所以其实只要对 $log_V$ 个主元进行转移即可</p>
<p>问题就变成了我们如何用 $log$ 的时间求出前 $k$ 大的，似乎也是好做的</p>
<p>先找小于该数的第一个数，找到排名，将排名+len再求即可</p>
<p>所以是 $O(nlognlogV)$ 的</p>
<p>![[杂题选讲.pdf]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.7/</url>
    <content><![CDATA[<h2 id="模拟赛"><a href="#模拟赛" class="headerlink" title="模拟赛"></a>模拟赛</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>首先不难发现操作2的使用范围一定是一个后缀 ，因为若并非后缀，则中间这段的修改其实并不会对答案产生影响，每次的操作数始终为 $a_n-a_1$</p>
<p>我们发现实际上操作1是不受控的，每次必定只在产生差距的地方造成影响</p>
<p>不妨猜想后缀推平只会进行一次？好像挺显然的，若不是一次则后面再修改一定会花费更高的代价</p>
<p>问题就变成了如何去计算一段前缀跑 k 次的代价</p>
<p>发现每一段区别段的贡献是一个分段函数，所以可以考虑经典的爆仓线段树</p>
<p>然后就做完了？</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>逆向的矩阵树定理？</p>
<p>假设该图为一个DAG，那么有生成树数量最大为</p>
<p>$$\left(\frac{220}{V}\right)^{V}$$</p>
<p>其是否能够比 $10^{18}$ 更大？ 显然可以</p>
<p>试想一下是否 DAG 的生成树数量一定比一般图更大</p>
<p>哦好像不行，要是 K 中出现了一个非常大的质因子那就没法构造了</p>
<p>但是质因数分解能拿36分（</p>
<p>发现数据范围中 K 单调递增，考虑是否瓶颈在于K</p>
<p>总不能这真的是构造矩阵吧</p>
<p>外向树是入度</p>
<p>我怎么去构造一个矩阵，使得其行列式为 $K$ ？</p>
<p>总不能是差分约束吧</p>
<p>还是不明白当存在一个大质因子的情况该怎么处理</p>
<p>模拟整个矩阵消元的过程，其实就是对于任意 $i&lt;j$ ，做一次</p>
<p>$$a_{j,j} \rightarrow a_{j,j}-\frac{a_{j,i}}{a_{i,i}}a_{i,j}$$<br>难不成先将 $&gt; \sqrt K$ 的质因子提取出来，考虑在式子中构造？</p>
<p>欸等下，既然每个矩阵都能够被削成一个上三角矩阵</p>
<p>那是不是也就意味着每个图的矩阵都会唯一对应一个DAG的矩阵</p>
<p>也就意味着一个 图能够表示出来的生成树数量的集合 &#x3D; DAG能够表示出来的生成树数量的集合</p>
<p>既然题面里没说判断无解，那是不是也就意味着一定能构造出这么一棵树？</p>
<p>又不给大样例，遮遮掩掩的</p>
<p>说不定真的是诈骗题</p>
<p>写了</p>
<h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>实在是没有不依靠括号数量的算法啊</p>
<p>第一个点也不知道能不能过</p>
<p>可能45？</p>
<p>![[editorial(1).pdf]]</p>
<p>![[随机算法.pdf]]</p>
<p>不妨设上当前为 $i$ ，那么有</p>
<p>$$h(i)&#x3D;h(i-1)2^{i}+$$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.8/</url>
    <content><![CDATA[<h2 id="模拟赛"><a href="#模拟赛" class="headerlink" title="模拟赛"></a>模拟赛</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>不清楚，润</p>
<p>感觉可以状压</p>
<p>哦好像确实可行</p>
<p>考虑设 $f_{i,S}$ 表示当前在第 $i$ 行，从左侧继承而来的集合为 $S$ </p>
<p>不妨设 $2nm-n-m&#x3D;S$</p>
<p>一条边出现一次的概率是 $\frac{1}{S}$ ，两次则为 $\frac{1}{S^2}$</p>
<p>则一条边出现的概率为 $$\sum_{i&#x3D;1}^{+\infty}\frac{1}{S^i}$$<br>而我们有</p>
<p>$$\sum_{i&#x3D;1}^{+\infty}\frac{1}{S^i}-\frac{1}{S}\sum_{i&#x3D;1}^{+\infty}\frac{1}{S^i}&#x3D;\frac{1}{S}$$<br>所以有</p>
<p>$$\sum_{i&#x3D;1}^{+\infty}\frac{1}{S^i}&#x3D;\frac{1}{S-1}$$</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>考虑反过来想</p>
<p>因为答案只与结果有关，而不在乎中间过程，所以我们考虑确定终止状态后如何去用最小代价将其构造出来</p>
<p>首先最右侧的元素一定是两个连续的，证明显然</p>
<p>于是就可以唯一确定一个左移一格的元素，递归成子问题解决</p>
<p>其次可以证明，过程中一定不会出现四个连在一起的情况(数学归纳法)</p>
<p>因此递推回一列时最多有两个元素，且两元素相邻</p>
<p>但是这样可能会出现一些问题，比如说三个相连的情况</p>
<p>此时只有一种可能：这是之前元素补位上来的，但是这种情况下会产生一个类似“倒勾”的东西，也就意味着下面的拓展其实是有限的</p>
<p>所以我们可以对序列进行分段，考虑设 $f_{i}$ 表示用了 $i$ 次，末尾位置为 $2$ 的方案数</p>
<p>你发现其实所有的方案回归到本质上都是倒勾</p>
<p>每段二其实只有两种选择，一种是形成一个长倒勾，另一种是形成一个双倒勾</p>
<p>所以我们就有了状态转移方程</p>
<p>J:从何处转移，那么就还剩余 $i-j-1$ 次操作</p>
<p>$$</p>
<p>f_i&#x3D;f_{i-1}+\sum_{j&#x3D;1}^{i-1}f_{j}\times\left\lceil \frac{i-j-1}{2} \right\rceil</p>
<p>$$</p>
<p>$$f_{i,j}&#x3D;f_{i-1,j+1}+f_{i-1,j-1}+\sum_{k&#x3D;3}^{}f_{i-3-(2k-1),j+1}$$</p>
<p>感觉像矩阵快速幂</p>
<p>容易发现每一列最多只会进行两次分裂，所以考虑同时记录两段的矩形</p>
<p>然后就做完了？</p>
<p>$$\begin{bmatrix}<br>0000 &amp; 0001 &amp; 0010 &amp; 0011\<br>0100 &amp; 0101 &amp; 0110 &amp; 0111\<br>1000 &amp; 1001 &amp; 1010 &amp; 1011\<br>1100 &amp; 1101 &amp; 1110 &amp; 1111\<br>0000 &amp; 0001 &amp; 0010 &amp; 0011\<br>0100 &amp; 0101 &amp; 0110 &amp; 0111\<br>1000 &amp; 1001 &amp; 1010 &amp; 1011\<br>1100 &amp; 1101 &amp; 1110 &amp; 1111\<br>\end{bmatrix}$$<br>$$\begin{bmatrix}</p>
<p>\end{bmatrix}$$</p>
<h2 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h2><p>![[构造选讲_无题解.pdf]]</p>
<p>$$\subset  \subseteq   $$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025.2.9/</url>
    <content><![CDATA[<h2 id="模拟赛"><a href="#模拟赛" class="headerlink" title="模拟赛"></a>模拟赛</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>是不是跑个类似单调栈的东西就行？</p>
<h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>考虑转化为计数问题</p>
<p>考虑一个最简单的dp，设 $f_{i,j,k}$ 表示拥有三种线段的数量的情况的答案 红 绿 杂</p>
<p>那么枚举所有合并的可能</p>
<p>当 $i,j&#x3D;0$ 时，答案是显然的，其实答案最后面都可以转为杂色段的情况的贡献</p>
<p>当绿段与红段合并时，转化为杂色段，贡献为 $\frac{(4ij)}{(2i+k)(2j+k)}f_{i-1,j-1,k+1}$</p>
<p>当红段与杂段合并时，转化为红色段，贡献为 $\frac{(2ik)}{(2i+k)(2j+k)}f_{i,j,k-1}$</p>
<p>当绿段与杂段合并时，转化为绿色段，贡献为 $\frac{(2jk)}{(2i+k)(2j+k)}f_{i,j,k-1}$</p>
<p>当绿绿或者红红合并时，转化为纯色段，贡献为 $\frac{(\frac{i(i-1)}{2})}{(2i+k)(2j+k)}f_{i-1,j,k}+\frac{(\frac{j(j-1)}{2})}{(2i+k)(2j+k)}f_{i,j-1,k}$</p>
<p>![[day1.pdf]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%97%A5%E8%AE%B0/mygr%E7%9A%84%E6%97%A5%E8%AE%B0/2025%E5%B9%B4/2025%E5%B9%B4/</url>
    <content><![CDATA[<p>[[2025.1.20]]<br>[[2025.1.21]]<br>[[2025.1.22]]<br>[[2025.1.23]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>对于一个图 $G$ ，将其分割为若干个点集使得 $S_1 \cup S_2 … \cup S_n&#x3D;G$  ，对其中的每个 $S$ 求解出最小生成森林 ，删去非最小生成森林的边，再对 $S_1,S_2,S_3$ 这个整体求解出最小生成树，就能得到 $G$ 的最小生成树，配合一些奇奇怪怪的分治算法即可，<a href="https://www.luogu.com.cn/problem/AT_cf17_final_j"># AT_cf17_final_j Tree MST</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>用 spfa 判断负环时，有两种判断方式：</p>
<ul>
<li>判断某个点的 <strong>松弛</strong> 次数</li>
<li>判断某个点的最短路长度<br>常用于 [[差分约束]]</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9Trick/</url>
    <content><![CDATA[<h2 id="折半搜索-："><a href="#折半搜索-：" class="headerlink" title="[[折半搜索]]："></a>[[折半搜索]]：</h2><h2 id="异或-："><a href="#异或-：" class="headerlink" title="[[异或]]："></a>[[异或]]：</h2><h2 id="二分答案-："><a href="#二分答案-：" class="headerlink" title="[[二分答案]]："></a>[[二分答案]]：</h2><h2 id="启发式合并-："><a href="#启发式合并-：" class="headerlink" title="[[启发式合并]]："></a>[[启发式合并]]：</h2><h2 id="STD-："><a href="#STD-：" class="headerlink" title="[[STD]]："></a>[[STD]]：</h2><h2 id="随机化-："><a href="#随机化-：" class="headerlink" title="[[随机化]]："></a>[[随机化]]：</h2><h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<p>致永远的SP李超线段树</p>
<p>李超线段树也可以用于维护 <a href="https://www.luogu.com.cn/problem/P5508">全局点最值</a>，达到类似于堆的效果，用于最短路</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%A0%91%E5%88%86%E6%B2%BB/</url>
    <content><![CDATA[<h2 id="点分治"><a href="#点分治" class="headerlink" title="点分治"></a>点分治</h2><h2 id="边分治"><a href="#边分治" class="headerlink" title="边分治"></a>边分治</h2><p>对边分治无用论的一记 <a href="https://www.luogu.com.cn/problem/CF1019E">重拳</a></p>
<p>边分的好处就在于只需要处理边两端子树的情况，而并不需要考虑多子树的合并问题</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%A0%91%E4%B8%8A%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="点分治"><a href="#点分治" class="headerlink" title="[[点分治]]"></a>[[点分治]]</h2><h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><p>来自异象石的小 Trick<br>对于一个点列 $a_i$ ，将其按照 $dfs$ 序排序得到 $b_i$<br>那么有 $dep_{Lca(b_l,b_{l+1}…b_r)}&#x3D;\min_{i&#x3D;l+1}^{r} dep_{Lca(b_i,b_{i-1})}$ </p>
<p>一个点与另外一个点的 LCA 一定位于其祖先节点中，所以在 “找点对的LCA” 的问题中可以固定一个点，查看这个点的所有祖先的贡献 [[ 测试讲评&amp;习题（二）.pdf | HDU6031，练习题第二题 ]]</p>
<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>如何判断是否为 <strong>一棵树</strong>，同时满足无环(LCT&#x2F;并查集)与点数-边数&#x3D;1 </p>
<p>给出一个树上的点集，问该集合中所有点中的最优点，且所有点只会 <strong>整体</strong> 向上跳时，若任意一点作为根的子树中的点一定不优时，则可以将这部分点剔除出，剩余点跳跃是均摊 $O(n)$ 的 <a href="https://www.luogu.com.cn/problem/P6779"># P6779  rla1rmdq</a></p>
<p>对于树上多条路径，找其中两条使得其的交…的问题，可以考虑树链剖分，在每条链上考虑经过这条链的路径在这段上的贡献 <a href="https://www.luogu.com.cn/problem/CF704E"># Iron Man</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<p>当字符集较大时，可以考虑使用可持久化数组维护 <code>ch</code> 数组</p>
<p>AC自动机上判断某串的子串，考虑枚举前缀然后跳 $fail$ ，可以考虑建出 $fail$ 树，然后在走前缀的过程中用数据结构或连边建图表示出包含关系 <a href="https://www.luogu.com.cn/problem/CF590E"># birthday</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/BSET%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<p>相关链接：[[矩阵树定理]]，[[欧拉回路]]</p>
<p>对于一个有向图，对于它的欧拉回路个数 $ec(G)$ ，有</p>
<p>$$ec(G)&#x3D;root_{w}(G)\sum_{v\in V}(deg_v -1)!$$其中 $root_w(G)$ 表示以 $w$ 为根的 $G$ 的外向生成树有多少种</p>
<p>注意BEST定理计算的是两点间若干条边有顺序的方案数，如果是 “某条边能够经过的次数” 则应当除去 $\frac{1}{w!}$ 将顺序消掉</p>
<h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p><a href="https://www.luogu.com.cn/problem/CF1919E"># Counting Prefixes</a><br><a href="https://www.luogu.com.cn/problem/AT_agc051_d"># C4</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/DAG%E9%93%BE%E5%89%96%E5%88%86/</url>
    <content><![CDATA[<p>对于 DAG 上的节点，设 $f_{u}$ 表示以点 $u$ 为结束点的路径数，$g_u$ 表示从点 $u$ 开始的路径数，那么对于节点 $u$ 的所有出边，若存在一条边 $u \rightarrow v$ 使得 $2f_{v}&gt;f_{u},2g_{v}&gt;g_{u}$ ，那么我们则称 $u,v$ 是一条重边</p>
<p>对于任意一条路径，其路径上的轻边数量一定是 $O(logn)$ 级别的，因为每走一次轻边路径数都会折半</p>
<p>最常用的场景是在 [[后缀自动机]] 上快速的子串定位</p>
<p>为什么不倍增跳呢？ #under_construction</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/KD-Tree/</url>
    <content><![CDATA[<p>本质：将一个 $k$ 维的立方体内的点压缩到序列上 $O(n^{1-\frac{1}{k}})$ 个不相交区间</p>
<p>而这个序列就可以用正常方法去维护了</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P6783"># P6783 Ynoi2008 rrusq</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/Kmp/</url>
    <content><![CDATA[<p>kmp的fail数组既可以指<strong>最长的前后缀长度</strong>，也可以指<strong>当前位的最长的前缀匹配</strong>，也可以指<strong>最长的循环节长度</strong></p>
<p>#under_construction<br><a href="">字符串的所有前缀中，有多少个可以构成形如 “ABABA” 由 k 个A 组成的字符串</a></p>
<p>通过不断跳fail的方式可以求出最短的前缀匹配，可以通过继承优化到 $O(n+m)$ <a href="https://www.luogu.com.cn/problem/P3435">例子</a> </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/RMQ%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>考虑一个 $O(n)$ 预处理，$O(1)$ 查询的 RMQ 算法</p>
<p>考虑将序列按照 $logn$ 进行分块，对于不在一个同块内部的询问，我们用ST表维护整块的信息，再额外维护块内的前后缀最大值即可</p>
<p>对于在一个块内的查询，我们可以开一个单调栈维护一个前缀的单调下降序列，每一位使用一个整数状压单调栈内拥有的元素，查询 $l,r$ 时直接找 $r$ 对应的单调栈中第一个 $\ge l$ 的位置即可</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/STD/</url>
    <content><![CDATA[<p>找前 $k$ 大&#x2F;小 元素，用 nth_element() 而非 sort() 会更快</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/Trie/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<p>相关链接：[[二进制分组]]，[[Trie]]，[[异或]]</p>
<h2 id="异或-："><a href="#异或-：" class="headerlink" title="[[异或]]："></a>[[异或]]：</h2><h2 id="Trick："><a href="#Trick：" class="headerlink" title="Trick："></a>Trick：</h2><p>类比于前缀 gcd， 利用”优势段”有且仅有 log 段来使用数据结构暴力维护 <a href="https://www.codechef.com/problems/MINXORSEG"># MIN_XOR_SEG</a> ^8ecb0b</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p> 区间中位数也可以用二分答案法解决，区间内仅有大小比较的找数问题，都可以用 二分答案+01赋值法解决(例如众数)</p>
<p><a href="https://www.luogu.com.cn/problem/P2824"># HEOI2016&#x2F;TJOI2016 排序</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E7%BB%84/</url>
    <content><![CDATA[<p>其实与分治本质相同，都是确保两个不同的数都被分至两种不同的集合中过<br><a href="https://www.luogu.com.cn/problem/P5304"># 旅行者</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%87%B8%E5%8C%85/</url>
    <content><![CDATA[<h2 id="Trick："><a href="#Trick：" class="headerlink" title="Trick："></a>Trick：</h2><p>在做涉及到类似向量一类的问题时，考虑将两点化为线，将三点化为面，最后变为凸包去解决 <a href="https://www.luogu.com.cn/problem/P4049">合金</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%87%BD%E6%95%B0%E5%A4%8D%E5%90%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><a href="%E5%87%BD%E6%95%B0%E5%A4%8D%E5%90%88.pptx">经典PPT</a></p>
<p>本质是通过离线扫描线+权值平衡树将所有需要查询的部分离散到数轴上</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB/</url>
    <content><![CDATA[<h2 id="树分治"><a href="#树分治" class="headerlink" title="[[树分治]]"></a>[[树分治]]</h2><h2 id="朴素分治"><a href="#朴素分治" class="headerlink" title="朴素分治"></a>朴素分治</h2><p>本质有两种：</p>
<ul>
<li>对于计数&#x2F;查询问题，则是在统计经过中点的合法点对数量</li>
<li>对于决策问题，则是递归为两个与相同的子问题进行求解</li>
</ul>
<h3 id="决策问题"><a href="#决策问题" class="headerlink" title="决策问题"></a>决策问题</h3><h4 id="最优化决策"><a href="#最优化决策" class="headerlink" title="最优化决策"></a>最优化决策</h4><p>当证明出可以递归为两个相同的决策去求解出方案，再合并得出最终方案，且最终方案一定最优时，则可以考虑</p>
<h4 id="可行性决策"><a href="#可行性决策" class="headerlink" title="可行性决策"></a>可行性决策</h4><p>当一个可行的答案可以分解为两个子方案的和时，则可以考虑，注意需要满足分解的两个子问题存在合法解</p>
<p>而“合法解的存在” 一方面可以证明，另一方面可能 <a href="https://www.luogu.com.cn/problem/P9731">题目条件已经给出</a></p>
<h2 id="最值分治"><a href="#最值分治" class="headerlink" title="最值分治"></a>最值分治</h2><p>相关：[[笛卡尔树]]，[[启发式合并]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="总题单："><a href="#总题单：" class="headerlink" title="总题单："></a>总题单：</h2><p><a href="https://www.luogu.com.cn/training/465988">何为动态规划</a><br><a href="https://www.luogu.com.cn/training/617983">何为动态规划二代目</a></p>
<h2 id="状态压缩-："><a href="#状态压缩-：" class="headerlink" title="[[状态压缩]]："></a>[[状态压缩]]：</h2><h2 id="区间dp-："><a href="#区间dp-：" class="headerlink" title="[[区间dp]]："></a>[[区间dp]]：</h2><p>[[序列分段]]</p>
<h1 id="Trick："><a href="#Trick：" class="headerlink" title="Trick："></a>Trick：</h1><h2 id="放缩与删减状态"><a href="#放缩与删减状态" class="headerlink" title="放缩与删减状态"></a>放缩与删减状态</h2><p>放缩即为将必定较劣的答案 或 后续注定被删去的答案合并统计，从而达到减少分类讨论的效果</p>
<p>典型的题目有 #under_construction </p>
<p>删减状态即将某些在总决策中没有特长的决策删去，或者将相同类型的状态合并</p>
<p>典型的题目有 <a href="https://pjudge.ac/problem/21624">背包</a> ，<a href="https://www.luogu.com.cn/problem/P3643">划艇</a></p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p>注意观察已知部分，例如当已知当前选到第 $i$ 个位置时，那么当前位置必选，也就可能可以省略掉一些状态 <a href="https://www.luogu.com.cn/problem/AT_arc073_d">many moves</a></p>
<p>动态规划问题添加元素不一定是唯一的出路，也可以考虑在原有状态的基础上合并状态 <a href="https://www.luogu.com.cn/problem/P5228">找硬币</a></p>
<p>当碰到“某类方案数的 $x$ ”次方一类的题目时，可以考虑用类似多项式拆分一类的方法，将其拆为“ $x$ 个线程同时，全程相等的方案数 <a href="https://www.luogu.com.cn/problem/P1758">管道取珠</a></p>
<p>离散化是个好东西，有时候可以砍去许多本质相同的决策 <a href="https://www.luogu.com.cn/problem/P3643">划艇</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4dp/</url>
    <content><![CDATA[<p>数据范围较小且每个统计的问题可以分解为几个互不相干的小问题再合并处理时，考虑区间dp</p>
<p>关键在于合并的本质：枚举了所有可能的合并方式以及合并顺序，这也是其与线段树上合并信息的不同点 “信息间的合并顺序会对结果产生影响”</p>
<p>#under_construction<br><a href="">凸包的三角剖分与区间dp的结合</a></p>
<p>对于代价随着时间的变化而增长，满足条件后停止增长的问题，可以考虑把每一时刻的代价表示为每一时刻未满足条件的代价的和 <a href="https://www.luogu.com.cn/problem/UVA1336">修缮长城</a> ，或是将每一段的代价乘上未来累计所需的时间 <a href="https://www.luogu.com.cn/problem/P2053">修车</a></p>
<p>对于字符串的拼接问题，也可以使用区间dp去解决 <a href="%E6%9C%BA%E5%AF%86%E6%96%87%E4%BB%B6">https://www.luogu.com.cn/problem/P2400</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>有几种常见模型：</p>
<h2 id="区间查询区间序列中区间的最值"><a href="#区间查询区间序列中区间的最值" class="headerlink" title="区间查询区间序列中区间的最值"></a>区间查询区间序列中区间的最值</h2><p>这种问题一般都是在区间序列的基础上进行分块，然后考虑对块内所有区间合并答案，对散块用正常方法暴力查询，然后根号平衡即可</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P11750"># P11750 「TPOI-1D」谢谢您。</a></p>
<h2 id="区间查询区间并"><a href="#区间查询区间并" class="headerlink" title="区间查询区间并"></a>区间查询区间并</h2><p>转化为对区间序列的扫描线问题，元素序列上上标记 “上次被区间标记的时间”，查询时直接查询 “上次出现时间在左端点之后的” 元素的权值和，用分块朴素维护即可</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P6783"># P6783 Ynoi2008 rrusq</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97-%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>当无法使用双指针(不具备单调性时)，考虑转化为单调队列解决 <a href="https://www.luogu.com.cn/problem/P5665"># 划分</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/705613307"># 从零开始的博弈论</a><br><a href="https://www.luogu.com.cn/training/535042"># 何为博弈论</a><br>相关链接：[[异或]]</p>
<h2 id="反-Nim-游戏"><a href="#反-Nim-游戏" class="headerlink" title="反 Nim 游戏"></a>反 Nim 游戏</h2><p>对于一个游戏，当一个人无法取时则胜利</p>
<p>结论：</p>
<ul>
<li>当场面上 $\forall i,a_i&#x3D;1$ 时，若 $\mid a\mid \mod 2&#x3D;0$ 时则必胜，否则必败</li>
<li>当场面上存在一个位置使得 $a_i &gt; 1$ 时，若 $\oplus_{i}a_i \not &#x3D; 0$ 则先手必胜，否则必败<br>考虑证明</li>
</ul>
<p>对于结论一是好证的</p>
<p>对于结论二，则每一步先手都必定能够构造出一种方式使得 $\oplus_{i}a_i&#x3D;0$ ，而后手则一定不能，由于当前局面并非所有数都为 $1$ ，且会留给后手一个异或和为 $0$ 的状态，故此时后手的局面中必然存在 $\ge 2$ 个非 $1$ 的数，于是最后面一定会留给先手一个有且仅有一个数使得其 $&gt; 1$ 的情况，此时就可以随意控制其到上一个结论了</p>
<p>当遇见与异或相关的 SG 函数时，可以考虑将其往线性基上面去靠 <a href="https://www.luogu.com.cn/problem/P4301">New Nim</a></p>
<p>博弈论不一定要推奇奇怪怪的式子，也有可能从最朴素的 dp 出发也能达到推出类 SG 函数的状态式，而且就大部分题目而言的话还是 dp 占大头</p>
<p>博弈论问题，可以尝试将元素分组，利用二分图一类的性质，选择一边时就直接选择另一边 <a href="https://www.luogu.com.cn/problem/CF1839E">偶遇两人选数取min相减，实力强悍强如怪物，拼尽全力也无法战胜</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/</url>
    <content><![CDATA[<h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><ol>
<li>长度为 $2n$ 的合法括号序列数量</li>
<li>二维平面上只能向右或向上走，不经过直线 $y&#x3D;x+1$ 的方案数</li>
</ol>
<p>有递推式 </p>
<p>$$C_n&#x3D;\begin{cases}<br>1&amp; (n&#x3D;0) \<br>\sum\limits_{i&#x3D;0}^{n-1}C_iC_{n-i-1} &amp;otherwise\<br>\end{cases}$$<br>这个式子可以理解为在后方新增一个括号，形成类似 <code>...(...)</code> 的结构</p>
<p>有通项公式</p>
<p>$$C_n&#x3D;C_{2n}^{n}-C_{2n}^{n-1}$$<br>可以用 [[反射容斥]] 来搞</p>
<p>进阶：<a href="https://www.luogu.com/article/2cla01hw">卡特兰数的自卷积</a></p>
<p>设 $F$ 表示卡特兰数生成函数</p>
<p>那么根据上边的递推式有</p>
<p>$$\begin{eqnarray}<br>F&amp;&#x3D;&amp;1+xF^2\<br>F&amp;&#x3D;&amp;\frac{1-\sqrt{1-4x}}{2x}\</p>
<p>\end{eqnarray}$$</p>
<p>对于 $[x^n]F^m$ ，我们可以考虑他的组合意义：在 $m$ 个有序箱子中，存储 $m$ 个合法括号串，使得括号串的总左括号数为 $n$</p>
<p>我们可以考虑他的组合意义，先构造一个大括号串 <code>((()))</code> ，满足共有 $n$ 个左括号，考虑在其中插入括号序列，形成 <code>(((...)...)...)</code> 的结构，发现其与每种合法填空方式形成双射，故在其中插入括号串即可</p>
<p>而这个前缀的 $m$ 个左括号，则可以理解为在坐标轴上先向右移动了 $m$ 步，照常反射容斥即可</p>
<p>然后就做完了</p>
<p>详见：[[2025.2.5#T3]] </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%8F%8D%E5%B0%84%E5%AE%B9%E6%96%A5/</url>
    <content><![CDATA[<p>可用于求 [[卡特兰数]]</p>
<p>只能向右或向上，求不能经过两条直线到达某点的方案数 #under_construction </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p> 统计不同的子串数量，可以用每个后缀的长度减去每个 h[i] 求得</p>
<p>. LCP有两种求法，你知道嘛</p>
<ul>
<li>SA&#x2F;SAM 朴素求</li>
<li>前缀[[哈希]]+二分(可搭配主席树)</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="子串定位"><a href="#子串定位" class="headerlink" title="子串定位"></a>子串定位</h2><p>当已知其为原字符串的一部分时，可以在建图的同时得出 $S[1;r]$ 在SAM上的对应节点，求 $S[l;r]$ 时就在 $S[1;r]$ 的基础上向上跳 $fail$ ，直到跳到长度对应为止，用倍增优化此过程</p>
<p>另外可以使用 [[DAG链剖分]] 求解</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<p>相关链接：[[线段树合并]]</p>
<p>常见于只有合并没有撤销的题目</p>
<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>树上启发式合并从下往上求解答案</p>
<p><a href="https://www.luogu.com.cn/problem/P9168"># 人员调度</a><br><a href="https://www.luogu.com.cn/problem/P5290"># 春节十二响</a></p>
<p>注：树上用启发式合并合并堆是 $O(nlogn)$ 的</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C/</url>
    <content><![CDATA[<p>伟大的Oi-eR zyb 曾言：“万物皆可哈希”</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[[字符串]]，[[集合]]</p>
<h2 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h2><p>可用来判断字符串相等，寻找LCP用于比较字符串等等操作<br><a href="https://www.luogu.com.cn/problem/P8819"># 星战 - 异或哈希经典例题</a><br><a href="https://codeforces.com/contest/1608/problem/G"># 字符串比较上树</a></p>
<h2 id="集合哈希"><a href="#集合哈希" class="headerlink" title="集合哈希"></a>集合哈希</h2><p>万物皆可哈希，集合也不例外<br><a href="https://www.luogu.com.cn/problem/P10785"># NOI2024 集合</a></p>
<p>利用数列转某种类型数出现次数的 Trick ，可以将有序序列转化为无序集合并哈希，当需要进行区间加操作时，不妨设哈希函数为 $M(A)&#x3D;x^A$ ，那么区间加操作可以等效的视作区间乘 $x^v$ ，并继续使用上述方法维护集合 <a href="https://qoj.ac/problem/9774"># same sum</a></p>
<h2 id="数列哈希"><a href="#数列哈希" class="headerlink" title="数列哈希"></a>数列哈希</h2><p>不一定只有字符串才会用到哈希，具体要看这个数列是否需要满足字符串的某些形式(如字典序等)</p>
<p>例如 <a href="https://www.luogu.com.cn/problem/P5537">系统设计</a>，可以将与字符串相类似的数列等价的视作字符串，用字符串的方法去解决</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="树上问题-："><a href="#树上问题-：" class="headerlink" title="[[树上问题]]："></a>[[树上问题]]：</h2><h2 id="欧拉回路-："><a href="#欧拉回路-：" class="headerlink" title="[[欧拉回路]]："></a>[[欧拉回路]]：</h2><h2 id="连通性相关-："><a href="#连通性相关-：" class="headerlink" title="[[连通性相关]]："></a>[[连通性相关]]：</h2><h2 id="网络流-："><a href="#网络流-：" class="headerlink" title="[[网络流]]："></a>[[网络流]]：</h2><h2 id="最短路-："><a href="#最短路-：" class="headerlink" title="[[最短路]]："></a>[[最短路]]：</h2><h2 id="建图技巧-："><a href="#建图技巧-：" class="headerlink" title="[[建图技巧]]："></a>[[建图技巧]]：</h2><h2 id="最小生成树-："><a href="#最小生成树-：" class="headerlink" title="[[最小生成树]]："></a>[[最小生成树]]：</h2><h2 id="差分约束-："><a href="#差分约束-：" class="headerlink" title="[[差分约束]]："></a>[[差分约束]]：</h2><h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>对于两个位置只能选一个，选完后会产生不同贡献的问题，或者说两种决策选择一种，可以考虑转化为两点之间有一条边，变成 “给边定向” 的问题,然后分析图的性质或转化为 [[欧拉回路]] 问题给边定向</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%A0%86/</url>
    <content><![CDATA[<h2 id="对于用堆-启发式合并-用于树从下往上查询的题目"><a href="#对于用堆-启发式合并-用于树从下往上查询的题目" class="headerlink" title="对于用堆+[[启发式合并]] 用于树从下往上查询的题目"></a>对于用堆+[[启发式合并]] 用于树从下往上查询的题目</h2><p><a href="https://www.luogu.com.cn/problem/P9168"># 人员调度</a></p>
<p><a href="https://www.luogu.com.cn/problem/P5290"># 春节十二响</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AF%81%E6%98%8E/</url>
    <content><![CDATA[<p>调和级数：$\sum_{i&#x3D;1}^{n}\frac{n}{i}&#x3D; nlogn$</p>
<p>遇见倍数或者整除的问题时，若每个数唯一出现，考虑枚举倍数 $O(nlogn)$</p>
<p>若每个数不唯一出现，考虑枚举因数 $O(nlog^2n)$</p>
<p>$\sum_{d \mid n}d&#x3D;nloglogn$</p>
<p>随机数列最长上升子序列的期望长度为 $O(\sqrt n)$ <a href="https://www.zhihu.com/question/266958886?sort=created">好像只能计算机近似计算</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="Kmp-："><a href="#Kmp-：" class="headerlink" title="[[Kmp]]："></a>[[Kmp]]：</h2><h2 id="Trie-："><a href="#Trie-：" class="headerlink" title="[[Trie]]："></a>[[Trie]]：</h2><h2 id="AC自动机-："><a href="#AC自动机-：" class="headerlink" title="[[AC自动机]]："></a>[[AC自动机]]：</h2><h2 id="后缀数组-："><a href="#后缀数组-：" class="headerlink" title="[[后缀数组]]："></a>[[后缀数组]]：</h2><h2 id="后缀自动机-："><a href="#后缀自动机-：" class="headerlink" title="[[后缀自动机]]："></a>[[后缀自动机]]：</h2><h2 id="哈希-："><a href="#哈希-：" class="headerlink" title="[[哈希]]："></a>[[哈希]]：</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%A4%9A%E9%A1%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="普通多项式"><a href="#普通多项式" class="headerlink" title="普通多项式"></a>普通多项式</h2><p>当发现求解过程中出现了单单一个自变量的式子时，可以考虑将其拆分为一个多项式，然后在求解时在外部调用即可 <a href="https://www.luogu.com.cn/problem/P6060"># 传染病研究</a></p>
<h2 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h2><h2 id="多项式科技"><a href="#多项式科技" class="headerlink" title="多项式科技"></a>多项式科技</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%AF%B9%202%20%E5%8F%96%E6%A8%A1%E6%84%8F%E4%B9%89%E4%B8%8B%E7%9A%84%E7%BB%84%E5%90%88%E6%95%B0/</url>
    <content><![CDATA[<p>相关链接：[[组合数学]]，[[卢卡斯定理]]</p>
<p>考虑这个式子：<br>$$\begin{eqnarray}<br>&amp;&amp;  C_{n}^{m} \pmod{2}\<br>&amp;&#x3D;&amp;C_{\lfloor \frac{n}{2} \rfloor}^{\lfloor \frac{m}{2} \rfloor} \cdot C_{n \mod 2}^{m \mod 2} \pmod{2}\<br>\end{eqnarray}<br>$$<br>发现这个下取整可以无限递归下去，直至 $n,m$ 皆为 $0$<br>发现当 $m$ 存在一位二进制位使得 $m$ 为 $1$ 且 $n$ 不为 $1$ 时，则此时的组合数为 $0$<br>也就意味着整个 $C_{n}^{m} \pmod{2}$ 都为 $0$ </p>
<p>所以就能得到等式</p>
<p>$$C_{n}^{m} \pmod{2}&#x3D; [m &amp;n&#x3D;m]$$<br>或者说<br>$$C_{n}^{m} \pmod{2}&#x3D; [m \subseteq n]$$</p>
<p>当遇到方案数对 $2$ 取模的问题时，考虑能不能构造双射使得其去除掉某些计算过程，或将不满足条件的方案剔除</p>
<p>对于方案数对 $2$ 取模的题目，考虑是否能够通过 bitset 优化</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<p>不常考的算法，但得会</p>
<p>本质是通过最短路的思路求解出一个 $n$ 元一次方程组的解</p>
<p><a href="https://www.luogu.com.cn/problem/P7515"># 矩阵游戏</a></p>
<p><a href="https://www.luogu.com.cn/problem/P3275"># 糖果</a></p>
<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>当差分约束中所有边都为等价关系时，设所有关系皆为 $x_i+y_i&#x3D;c_i$，$x,y$ 内部之间没有连边，问 $\sum \mid x_i\mid +\mid y_i\mid$ 的最小值  </p>
<p>考虑将这个图画出来，得到一个图，因为内部之间都没有连边，所以最后面一定能够构造出来一个二分图</p>
<p>成为一个二分图，也就意味着当我们对其求解得到一个生成树后，深度为奇数的点一定向偶数点连边，假设有这么一个环</p>
<p>![[Pasted image 20250122221308.png]]</p>
<p>其中 c4 为非树边，那么我们发现就有等式</p>
<p>$$\begin{eqnarray}</p>
<p>x_1+y_1 &amp;&#x3D;&amp; c_1 \<br>x_2+y_1 &amp;&#x3D;&amp; c_2 \<br>x_2+y_2 &amp;&#x3D;&amp; c_3 \</p>
<p>\end{eqnarray} \Rightarrow x_1+y_2&#x3D;c_1+c_3-c_2&#x3D;c_4$$<br>所以我们发现，这个 $c_4$ 存在的唯一意义也就成了“检测是否合法”，然后就破环为树了</p>
<p>我们发现这个树有一个非常好的特点，即“当你确定一个位置的值时，所有点的值也就都确定了”，所以可以考虑设一个点为根，并令其等于 $x$ ，那么我们就得到了所有点关于 $x$ 的表达式</p>
<p>又有一个绝对值取最小值，像 <a href="https://www.luogu.com.cn/problem/P5817"># 分金币</a> 那样中位数定理去求就好了</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
    <content><![CDATA[<h2 id="函数复合问题-："><a href="#函数复合问题-：" class="headerlink" title="[[函数复合问题]]："></a>[[函数复合问题]]：</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%BA%8F%E5%88%97%E5%88%86%E6%AE%B5/</url>
    <content><![CDATA[<h5 id="序列分段问题"><a href="#序列分段问题" class="headerlink" title="序列分段问题"></a>序列分段问题</h5><p>形式：一个序列分成多段，每一段按照一定方式计算权值，使总权值取最值。</p>
<p>基本方法：使用 $f_i$ 表示到 $i$ 的最值，根据题目加入其他维度，从 $f_{i-1}$ 或 $f_j$ 转移（$f_{i-1}\to f_i$ 即决策 $i$ 是否为断点，$f_j\to f_i$ 即决策断点为 $j$），经典形式如 $f_i&#x3D;\max f_j+c(j+1,i)$。</p>
<p>根据两个区间之间的关系，有时需要决策本区间左端点，有时需要决策上一个区间右端点，有时二者皆可。</p>
<p>技巧：当每一段贡献同时与左右两端位置都有关，不妨直接在设置 $f_i$ 时令 $i$ 为区间右端点，这样枚举 $f_j$ 转移时就可以轻松计算。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P3628">P3628</a>：最经典形式，设 $f_i$ 表示考虑到 $i$ 的最大权值，则 $f_i&#x3D;\max_{j&#x3D;1}^{i-1}f_j+a(s_i-s_j)^2+b(s_i-s_j)+c$，其中 $s$ 为 $x$ 的前缀和。</li>
<li><a href="https://www.luogu.com.cn/problem/P3195">P3195</a>：同样的最经典形式，状态同上，$f_i&#x3D;\min_{j&#x3D;1}^{i-1}f_j+(i-j-1+s_i-s_j-L)^2$，其中 $s$ 为 $C$ 的前缀和。</li>
<li><a href="https://www.luogu.com.cn/problem/P4072">P4072</a>：有段数限制的问题，将段数加入状态。分段后第 $i$ 段的和为 $a_i$，则题目要求最小化 $\sum a_i^2$。设 $f_{i,j}$ 为到 $i$ 已经分了 $j$ 段的最值，则 $f_{i,j}&#x3D;\min_{k&#x3D;1}^{i-1}f_{k,j-1}+(s_i-s_k)^2$，$s$ 为路程长度前缀和。</li>
<li><a href="https://www.luogu.com.cn/problem/P1721">P1721</a>：较少的数合并比较多的数合并更优，较小的数先合并比较大的数先合并更优。于是在 $h$ 排序后转为与上题类似的问题，但是 $f$ 的值要加入合并，$f_{i,j}&#x3D;\max_{k&#x3D;1}^{i-1}{(f_{k,j-1}+s_i-s_k)&#x2F;(i-k+1)}$。</li>
<li><a href="https://www.luogu.com.cn/problem/P4158">P4158</a>：显然每个点都涂到一定不劣。若只有一行，也是类似的有段数限制的问题，但由于段的左端点的贡献不需要在确定右端点后产生，可以使用 $f_  {i-1}\to f_i$ 的形式转移，由于涂成的一段颜色需要相同，可以额外开一个 $0&#x2F;1$ 的维度表示涂色状态（红&#x2F;蓝，显然都涂色一定不劣），$f_{i,j,c_i}&#x3D;\max(f_{i-1,j,c_i}+1,f_{i-1,j-1,c_i}+1,f_{i-1,j-1,\neg c_i}+1)$，$f_{i,j,\neg c_i}&#x3D;\max(f_{i-1,j,\neg c_i},f_{i-1,j-1,c_i},f_{i-1,j-1,\neg c_i})$。</li>
<li><a href="https://www.luogu.com.cn/problem/P3648">P3648</a>：$a(b+c)+bc&#x3D;c(a+b)+ab$，于是分开的顺序不影响答案。若分出的每个块块内和为 $b$，则答案为  $\sum_{i&#x3D;1}^{k}b_i\sum_{j&#x3D;i+1}^{k+1}b_j$。将答案对称式地乘 $2$ 并加上 $\sum b_i^2$，得到 $(\sum_{i&#x3D;1}^{k+1}b_i)^2&#x3D;(\sum_{i&#x3D;1}^n a_i)^2$，于是答案可以转为 $\dfrac{(\sum_{i&#x3D;1}^n a_i)^2-\sum_{i&#x3D;1}^{k+1}b_i^2}{2}$，只需最小化 $\sum_{i&#x3D;1}^{k+1}b_i^2$ 即可。于是与 P4072 相同。</li>
<li><a href="https://www.luogu.com.cn/problem/UVA12991">UVA12991</a>：区间贡献与这个区间放乒乓球还是游泳有关，将其作为 $0&#x2F;1$ 加入状态。使用技巧进行转移，则 $f_{i,0}&#x3D;\max_{j&#x3D;1}^{i-1}f_{j,1}+g(j+1,i,P)$，$f_{i,1}&#x3D;\max_{j&#x3D;1}^{i-1}f_{j,0}+g(j+1,i,T)$，其中 $g(l,r,a)&#x3D;(\sum_{i&#x3D;l}^{\lfloor\frac{l+r}{2}\rfloor}(i-l+1)a_i)+(\sum_{i&#x3D;\lfloor\frac{l+r}{2}\rfloor+1}^{r}(r-i+1)a_i)$。</li>
<li><a href="https://www.luogu.com.cn/problem/P11233">CSP-S 2024 T3</a>：使用技巧进行转移，则 $f_i&#x3D;\max_{j&#x3D;1}^{i-1}f_j+c(j,i+1)+\sum_{k&#x3D;j+1}^{i-1}c(k,k+1)$。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%BC%82%E6%88%96/</url>
    <content><![CDATA[<p>相关链接：[[二进制]]，[[线性基]]</p>
<h2 id="用于判断元素个数是否为偶数"><a href="#用于判断元素个数是否为偶数" class="headerlink" title="用于判断元素个数是否为偶数"></a>用于判断元素个数是否为偶数</h2><p>随机权值+异或判断是否为 $0$ 即可<br><a href="https://www.luogu.com.cn/problem/P8819"># 星战 - 异或哈希经典例题</a></p>
<p> 区间找两个数异或的最大值有三种求法，你知道吗？</p>
<ul>
<li>主席树上二分</li>
<li>可持久化trie树上寻找</li>
<li>找每个数所拥有的 $O(logn)$ 个支配数，具体看 [[二进制]] 的 Trick</li>
</ul>
<p>对于一个数 $v$ 构造序列 $a_i&#x3D;v \oplus i$ ，那么 $a_i$ 的区间 $[1,n]$ 能够被分解为 $logn$ 段等差数列</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%BB%BA%E5%9B%BE%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>对于区间加边，考虑线段树优化建图</p>
<p>如果建图中只有前缀加边，可以考虑不使用线段树优化建图而使用前缀优化建图</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/</url>
    <content><![CDATA[<h2 id="配合dp"><a href="#配合dp" class="headerlink" title="配合dp"></a>配合dp</h2><p>一般而言，先将dp式子列出，后面再考虑拉格朗日插值优化<br>训练时不要刻意的往拉差方面去想，或者结束后去想“为什么要使用拉格朗日插值！”<br><a href="https://www.luogu.com.cn/problem/P5469"># 机器人</a><br><a href="https://www.luogu.com.cn/problem/P8290"># 填数</a><br><a href="https://zhuanlan.zhihu.com/p/709805452"># Sum of k-th powers</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%89%AB%E6%8F%8F%E7%BA%BF/</url>
    <content><![CDATA[<p>[[扫描线模型.pptx]]</p>
<p>本质是通过离线将某些询问的 side(自由度) 缩减一维</p>
<p> 区间判断是否可重排为 $k&#x3D;1$ 的等差数列有三种方法，你知道吗？</p>
<ul>
<li>若并不保证为一个排列，则可以取平方+哈希计算等方数列 <a href="https://www.luogu.com.cn/problem/P3792">大母神</a></li>
<li>若保证为一个排列，则可以 $max-min&#x3D;r-l$ 计算</li>
<li>若保证为一个排列，则可以计算其与数轴上相邻两项重合的部分，区间加重合部分表示相邻段的个数，根据鸽巢原理可得联通块数量，为 0 则连续</li>
</ul>
<p>常见的搭配有:</p>
<ul>
<li>对一区间的所有子区间查询，转化为上三角矩阵查询，搭配历史线段树解决，<a href="https://codeforces.com/contest/2009/problem/G3">例</a></li>
<li>区间操作+单点查询，换维进行扫描线，<a href="https://www.luogu.com.cn/problem/P7560">书虫</a></li>
<li>[[函数复合问题]]，搭配平衡树 </li>
<li>最值分治转化为多个矩形的求和，<a href="https://codeforces.com/contest/2009/problem/G3">例</a></li>
</ul>
<p>判断为空&#x2F;与0取max可以考虑根据上一次被清空位置分段 <a href="https://zhuanlan.zhihu.com/p/15860052292">美食家</a> </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<p>当 $n$ 很小却以幂次或阶乘的形式存在时，可以考虑折半双向搜索</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%94%AF%E9%85%8D%E5%AF%B9/</url>
    <content><![CDATA[<p>题单：<a href="https://www.luogu.com.cn/training/669501#information"># LXL的支配对题单</a></p>
<p>常见于找一个点对计算答案的问题</p>
<p>当我们拥有若干个点对时，我们可以考虑点对间的 “支配” 关系，即对于两个点对 $A,B$ ，选择 $A$ 是否一定比选择 $B$ 更优(贡献更大，可选范围为其的子集)，将问题转化为支配对的包含问题</p>
<p>常见的剔除方式有：</p>
<p><a href="https://www.luogu.com.cn/problem/P7880"># P7880 Ynoi2006 rldcot</a>，由于被包含的区间一定比其本身更优，因此剔除被包含的部分，支配点对数量与启发式合并相同，因此暴力维护即可</p>
<p>[[二进制#^8ecb0b | MINXORSEG]] ，利用前缀二进制的支配对只有 $logn$ 条</p>
<p><a href="https://pjudge.ac/problem/21624"># 背包</a>，将被包含且长度小于 $r-l$ 的部分删去，因为其无论如何都没有左右两个决策更优</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6%E7%9B%B8%E5%85%B3Trick/</url>
    <content><![CDATA[<h2 id="关于下取整："><a href="#关于下取整：" class="headerlink" title="关于下取整："></a>关于下取整：</h2><p>当题目中存在向下取整的除法不好处理时，可以考虑反过来做，用一个区间的数的乘法来表示 <a href="https://www.luogu.com.cn/problem/P3576"># MRO-Ant colony-蚂蚁窝</a></p>
<h2 id="摩尔投票法："><a href="#摩尔投票法：" class="headerlink" title="摩尔投票法："></a>摩尔投票法：</h2><p>相关链接：[[绝对众数]]</p>
<h2 id="普通幂转下降幂"><a href="#普通幂转下降幂" class="headerlink" title="普通幂转下降幂"></a>普通幂转下降幂</h2><p>$$x^n&#x3D;\sum_{i&#x3D;0}^{n} {n\brace i}x^{\underline i} $$</p>
<h2 id="曼哈顿距离转切比雪夫距离"><a href="#曼哈顿距离转切比雪夫距离" class="headerlink" title="曼哈顿距离转切比雪夫距离"></a>曼哈顿距离转切比雪夫距离</h2><p>$$\max{ a,b }&#x3D;\mid \frac{a+b}{2} \mid + \mid \frac{a-b}{2} \mid$$</p>
<h2 id="值域相关"><a href="#值域相关" class="headerlink" title="值域相关"></a>值域相关</h2><p>当遇见跟数的值域相关的题目时(排列，1e6，质数乘积，两数相加取模)，考虑将数通过拆分分为大小两部分，可能会产生若干关于匹配的性质</p>
<p>例如 [[质数相关#^372880 |卡牌]] ，<a href="https://codeforces.com/gym/100917/problem/E"># Extreme Permutations</a>,<a href="https://codeforces.com/problemset/problem/1325/E"># Ehab’s REAL Number Theory Problem</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="总题单"><a href="#总题单" class="headerlink" title="总题单"></a>总题单</h2><p><a href="https://www.luogu.com.cn/training/466929"># 何为数据结构</a><br><a href="https://www.luogu.com.cn/training/590967"># 何为数据结构二代目</a></p>
<h2 id="线段树-："><a href="#线段树-：" class="headerlink" title="[[线段树]]："></a>[[线段树]]：</h2><h2 id="平衡树-："><a href="#平衡树-：" class="headerlink" title="[[平衡树]]："></a>[[平衡树]]：</h2><h2 id="分块-："><a href="#分块-：" class="headerlink" title="[[分块]]："></a>[[分块]]：</h2><h2 id="笛卡尔树-："><a href="#笛卡尔树-：" class="headerlink" title="[[笛卡尔树]]："></a>[[笛卡尔树]]：</h2><h2 id="扫描线-："><a href="#扫描线-：" class="headerlink" title="[[扫描线]]："></a>[[扫描线]]：</h2><h2 id="堆-："><a href="#堆-：" class="headerlink" title="[[堆]]："></a>[[堆]]：</h2><h2 id="Trie-："><a href="#Trie-：" class="headerlink" title="[[Trie]]："></a>[[Trie]]：</h2><h2 id="模拟费用流-："><a href="#模拟费用流-：" class="headerlink" title="[[模拟费用流]]："></a>[[模拟费用流]]：</h2><h2 id="RMQ问题-："><a href="#RMQ问题-：" class="headerlink" title="[[RMQ问题]]："></a>[[RMQ问题]]：</h2><h2 id="KD-Tree"><a href="#KD-Tree" class="headerlink" title="[[KD-Tree]]"></a>[[KD-Tree]]</h2><h2 id="单调队列-单调栈"><a href="#单调队列-单调栈" class="headerlink" title="[[单调队列-单调栈]]"></a>[[单调队列-单调栈]]</h2><h1 id="综合模型-典型题析"><a href="#综合模型-典型题析" class="headerlink" title="综合模型&#x2F;典型题析"></a>综合模型&#x2F;典型题析</h1><h2 id="函数复合问题"><a href="#函数复合问题" class="headerlink" title="[[函数复合问题]]"></a>[[函数复合问题]]</h2><h2 id="区间的序列区间查询"><a href="#区间的序列区间查询" class="headerlink" title="[[区间的序列区间查询]]"></a>[[区间的序列区间查询]]</h2><h2 id="论区间覆盖的暴力退标记"><a href="#论区间覆盖的暴力退标记" class="headerlink" title="[[论区间覆盖的暴力退标记]]"></a>[[论区间覆盖的暴力退标记]]</h2><h2 id="支配对-："><a href="#支配对-：" class="headerlink" title="[[支配对]]："></a>[[支配对]]：</h2><p>#important</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/716987334"># 数学全家桶</a></p>
<h2 id="质数相关-："><a href="#质数相关-：" class="headerlink" title="[[质数相关]]："></a>[[质数相关]]：</h2><h2 id="斜率-："><a href="#斜率-：" class="headerlink" title="[[斜率]]："></a>[[斜率]]：</h2><h2 id="拉格朗日插值-："><a href="#拉格朗日插值-：" class="headerlink" title="[[拉格朗日插值]]："></a>[[拉格朗日插值]]：</h2><h2 id="组合数学-："><a href="#组合数学-：" class="headerlink" title="[[组合数学]]："></a>[[组合数学]]：</h2><h2 id="概率与期望-："><a href="#概率与期望-：" class="headerlink" title="[[概率与期望]]："></a>[[概率与期望]]：</h2><h2 id="异或-："><a href="#异或-：" class="headerlink" title="[[异或]]："></a>[[异或]]：</h2><h2 id="矩阵乘法-："><a href="#矩阵乘法-：" class="headerlink" title="[[矩阵乘法]]："></a>[[矩阵乘法]]：</h2><h2 id="卡特兰数-："><a href="#卡特兰数-：" class="headerlink" title="[[卡特兰数]]："></a>[[卡特兰数]]：</h2><h2 id="反射容斥-："><a href="#反射容斥-：" class="headerlink" title="[[反射容斥]]："></a>[[反射容斥]]：</h2><h2 id="BSET定理-："><a href="#BSET定理-：" class="headerlink" title="[[BSET定理]]："></a>[[BSET定理]]：</h2><h2 id="矩阵树定理-："><a href="#矩阵树定理-：" class="headerlink" title="[[矩阵树定理]]："></a>[[矩阵树定理]]：</h2><h2 id="数学相关Trick-："><a href="#数学相关Trick-：" class="headerlink" title="[[数学相关Trick]]："></a>[[数学相关Trick]]：</h2><h2 id="多项式-："><a href="#多项式-：" class="headerlink" title="[[多项式]]："></a>[[多项式]]：</h2><h2 id="复杂度证明-："><a href="#复杂度证明-：" class="headerlink" title="[[复杂度证明]]："></a>[[复杂度证明]]：</h2><p>#important </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%96%9C%E7%8E%87/</url>
    <content><![CDATA[<p>相关链接：[[计算几何]]，[[凸包]]，[[斜率优化]]，[[数论]]，[[李超线段树]] </p>
<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>$$等差数列 \Rightarrow 李超树 \Rightarrow 斜率优化(凸包)$$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="mygr的日记-："><a href="#mygr的日记-：" class="headerlink" title="[[mygr的日记]]："></a>[[mygr的日记]]：</h2><p>#structrue </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%A6%82%E7%8E%87%E4%B8%8E%E6%9C%9F%E6%9C%9B/</url>
    <content><![CDATA[<p>概率是顺推，而期望需要逆推 </p>
<h2 id="连续型期望"><a href="#连续型期望" class="headerlink" title="连续型期望"></a>连续型期望</h2><p><a href="https://zhuanlan.zhihu.com/p/717865570">Random Max</a></p>
<h2 id="转换Trick"><a href="#转换Trick" class="headerlink" title="转换Trick"></a>转换Trick</h2><p>对于求期望的问题，可以转换为求每个代价出现的概率乘上代价的和</p>
<p>对于状态设计转移阶段较为麻烦的题目，可以考虑爆列每个状态的转移，然后跑高斯消元</p>
<p>对于高消观察它的图上性质，树形结构可以考虑自下而上的消元</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F%E8%B4%B9%E7%94%A8%E6%B5%81/</url>
    <content><![CDATA[<p>当涉及到可能存在不优的操作撤回&#x2F;反悔到其他决策，且决策点影响范围不大（或者总结就是可以通过图论建模网络流建模得出）时，可以考虑模拟费用流去解决问题   </p>
<p>其实算法流程就是数据结构（或其他）去优化每条流的退流，增广的过程，根据网络流的相关知识可以得出，在残量网络上跑单条流的增广过程，所影响的流量此时是 $O(1)$ 的，通过数据结构将增广过程的 $O(n)$ 优化</p>
<p>模板题：[[P4694 PA 2013 Raper]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/</url>
    <content><![CDATA[<p>相关链接：[[BSET定理]]</p>
<p>给无向边定向，形成一种方案，当遇见 “决策二选一” + “ 决策结束后某些位置必须为 $\frac{1}{2}$ ” 的问题，往往就是他没错了</p>
<p>有时候可以配合分治，将边的方向的定义变为 “是否与右侧交换”，来得到最终答案 <a href="https://www.luogu.com.cn/problem/P9731"># Balance</a></p>
<p>若题目条件并非 “一定为 $\frac{1}{2}$” ，而是 “差值不能超过 1” ，可以考虑建一个超级源点再连上一条边，表示差值</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>当需要预处理且卡空间时，可以考虑将状压数组滚动，按照 popcount 的大小去分割，空间复杂度 $O(C_{n}^{\frac{n}{2}})$ <a href="https://www.luogu.com.cn/problem/P6622"># 信号传递</a></p>
<p>当查询序列方案数，且序列是否合法只需要判断相邻两个元素时，可以考虑状压一个三进制数组表示某个元素 左右都没安排元素&#x2F;左右有一侧安排了元素&#x2F;左右都安排了元素 的方案数</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%82%B9%E5%88%86%E6%B2%BB/</url>
    <content><![CDATA[<p>要点：画出分治中心，考虑一个子树内的询问如何计算得到其他子树内部的答案 即可<br>关于其他子树：两种方法，一种是容斥减去，若没有可减性则考虑前后缀合并</p>
<p><a href="https://www.luogu.com.cn/problem/P2664"># 树上游戏</a><br><a href="https://www.luogu.com.cn/problem/P3714"># 树的难题</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<p>对于无后效性的序列递推，或者状态数较少的最优性 dp，考虑矩阵快速幂解决 </p>
<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>分段矩阵快速幂，时间复杂度不会有很大的变化 <a href="https://www.luogu.com.cn/problem/AT_abc258_h">Odd Steps</a>，当分段处理相同的矩阵的乘法时，尝试预处理 $2$ 的次幂，这样子矩阵乘法时就可以省掉一个 $n$ (因为只需要处理一个行向量与一个矩阵的乘积) <a href="https://www.luogu.com.cn/problem/P6772">老八</a><br>优化矩阵乘法的取模，可以考虑用一个int128的数组来存，计算完后统一取模</p>
<p>可以尝试用矩阵乘法来更简单的实现区间历史和</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%9F%A9%E9%98%B5%E6%A0%91%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>设一个无向图 $G$ 的邻接矩阵为 $A$ ，度数矩阵为 $D$</p>
<p>则其的基尔霍夫为 $K&#x3D;D-A$</p>
<p>将基尔霍夫矩阵去掉一行一列，则无向图 $G$ 的生成树数量为 $det(K’)$</p>
<h2 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h2><p>对于有向图，我们则求的是它的内向生成树与外向生成树数量</p>
<p>对于内向生成树，则度数矩阵为节点的出度</p>
<p>对于外向生成树，则度数矩阵为节点的入度</p>
<p>例题： <a href="https://www.luogu.com.cn/problem/P4336"># 黑暗中的幻想乡</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
    <content><![CDATA[<p>涉及选择几个数使其异或起来最小时，若有数必选，则其一开始就异或上，后面统计答案时再贪心选择，而不是丢到线性基里面</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<h2 id="朴素线段树"><a href="#朴素线段树" class="headerlink" title="朴素线段树"></a>朴素线段树</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><a href="https://www.luogu.com.cn/problem/P8163"># 搭配倍增求解左右横跳问题</a><br><a href="https://www.luogu.com.cn/problem/CF594D"># 同种元素只有区间第一个产生影响时，离线并删去上一个元素</a></p>
<h3 id="优化dp"><a href="#优化dp" class="headerlink" title="优化dp"></a>优化dp</h3><p><a href="https://www.luogu.com.cn/problem/AT_abc262_h"># 某位歌姬的故事 加强版</a></p>
<h3 id="树剖"><a href="#树剖" class="headerlink" title="树剖"></a>树剖</h3><p>典</p>
<p>树剖+差分的例题：<a href="https://www.luogu.com.cn/problem/P9808"># P9808 [POI 2022 ~2023R1] zbo</a>，<a href="https://www.luogu.com.cn/problem/P4211">LCA</a>,<a href="https://www.luogu.com.cn/problem/P5305">旧词</a></p>
<h3 id="矩阵乘法优化"><a href="#矩阵乘法优化" class="headerlink" title="矩阵乘法优化"></a>矩阵乘法优化</h3><p>也可通过此实现更为简便的历史和<br><a href="https://www.luogu.com.cn/problem/CF718C"># 优化斐波那契数列求解</a></p>
<h2 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h2><p>“半离线”的二维问题解决方案</p>
<p><a href="https://www.luogu.com.cn/problem/CF543E"># 利用 long long 的压空间方法</a></p>
<h2 id="李超线段树"><a href="#李超线段树" class="headerlink" title="[[李超线段树]]"></a>[[李超线段树]]</h2><p>维护区间函数的第一方式</p>
<h2 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h2><p>用于带修二维问题<br><a href="https://www.luogu.com.cn/problem/P3242"># 经典dfs序转二维数点-接水果</a></p>
<h2 id="线段树合并"><a href="#线段树合并" class="headerlink" title="[[线段树合并]]"></a>[[线段树合并]]</h2><h2 id="单侧递归"><a href="#单侧递归" class="headerlink" title="单侧递归"></a>单侧递归</h2><p><a href="./%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E4%BE%A7%E9%80%92%E5%BD%92%E7%B1%BB%E9%97%AE%E9%A2%98.pptx">PPT</a></p>
<p>一般单侧递归问题都可以换维扫描线 <a href="https://qoj.ac/problem/5098"># 第一代图灵机</a></p>
<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>[[非重复元素配对问题]]<br>[[扫描线]] 问题的解决方案</p>
<p>区间中位数也可以用二分答案法解决，区间内仅有大小比较的找数问题，都可以用 二分答案+01赋值法解决 <a href="https://www.luogu.com.cn/problem/P2824"># HEOI2016 排序</a></p>
<p>对于区间每时刻加，加后有上限的问题，可以将所有数分为“已经爆仓”和“没有爆仓”两部分，计算出每个点经过 $a_i$ 秒会变爆仓，设上次修改时间为 $x_i$ ，当前时间为 $T$ ，那么判定他爆仓的标准即为 $T-x_i \ge a_i$ ，变为一个二维数点问题 <a href="https://www.luogu.com.cn/problem/CF453E">Little Pony and Lord Tirek</a></p>
<p>当寻找一个区间内部所有子区间中的最值时，可以考虑扫描线，观察子区间的存在合法方案的左端点的选取是否为一段区间，然后利用“子串&#x3D;前缀的后缀”解决 [[P7907 Ynoi2005 rmscne 题解 | rmscne]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<p>两种实现方式：朴素合并( $O(nlogn)$ ) 与 <a href="$O(nlog%5E2n)$">[启发式合并]</a></p>
<p>朴素合并例题：<br><a href="https://www.luogu.com.cn/problem/P5298"># [PKUWC2018] Minimax </a></p>
<p>李超树+线段树合并也是 $O(nlogn)$ 的，前提是所有直线都为全局直线(总结点数与直线数相同 $O(n)$ )</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%AE%B5%E8%A6%86%E7%9B%96/</url>
    <content><![CDATA[<h2 id="线段覆盖类问题"><a href="#线段覆盖类问题" class="headerlink" title="线段覆盖类问题"></a>线段覆盖类问题</h2><ul>
<li>选最少的点，使线段盖有点：线段按右端点从小到大扫，遇到没有盖有点的线段就选中右端点。<ul>
<li><a href="https://www.luogu.com.cn/problem/P11232">CSP-S 2024 T2</a> 预处理每辆车会被哪个区间的测速仪检测到，转为如上问题。</li>
</ul>
</li>
<li>选最少的线段，使目标区间全覆盖：找到覆盖目标区间左端点且右端点最大的线段，选择该线段，缩短目标区间后重复操作。<ul>
<li><a href="https://www.luogu.com.cn/problem/P1514">NOIP-S 2010 T4</a> 预处理在第一行某列放下一个蓄水厂后能使最后一行哪个区间有水，转为如上问题。</li>
</ul>
</li>
<li>选最多的线段，使线段两两不交：线段按右端点从小到大扫，找到一个没有相交的就计入答案。<ul>
<li><a href="https://www.luogu.com.cn/problem/AT_abc225_e">ABC225E</a> 将 7 的两端与原点连边，形成一个角。实际上一个 7 能被看到当且仅当这个角内部没有 7，转为如上问题。</li>
</ul>
</li>
<li>给线段最少分组，使得一个组中线段两两不交：按左端点排序，如果左端点比所有组的右端点都小，那么就新开一个组，否则加入右端点最小的组。</li>
<li>选最多的线段，使点覆盖数不超过限制（<a href="https://www.luogu.com.cn/problem/P3602">P3602</a>）。<ol>
<li>做法一：从左到右遍历每个点，如果有点超过限制就删除覆盖它的右端点最大的线段。</li>
<li>做法二：将线段按左&#x2F;右端点升序，按右&#x2F;左端点升&#x2F;降序排序，能加就加。</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h2 id="对-2-取模意义下的组合数"><a href="#对-2-取模意义下的组合数" class="headerlink" title="[[对 2 取模意义下的组合数]]"></a>[[对 2 取模意义下的组合数]]</h2><h2 id="组合意义"><a href="#组合意义" class="headerlink" title="组合意义"></a>组合意义</h2><p>$C_{x+y}^{x}$ 可以转换为从(0,0)走到(x,y)的路径条数</p>
<p> 当涉及到循环位移直到遇到空为止的问题时，考虑多开一个点，建环，变为判定多开的那个点是否被覆盖 <a href="https://www.luogu.com.cn/problem/CF838D">座位安排</a></p>
<p>对于整个序列全局加&#x2F;减，部分位置特殊变化，求最值何时变化为特定值的问题是，可以考虑直接设最值为状态而非整个序列 <a href="https://www.luogu.com.cn/problem/AT_abc270_h">add 1</a> </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%BB%9D%E5%AF%B9%E4%BC%97%E6%95%B0/</url>
    <content><![CDATA[<p>区间绝对众数有四种找法，你知道吗？</p>
<ul>
<li>二分答案，找区间内出现的数量</li>
<li>摩尔投票法</li>
<li>将序列有序后，取中间那个数，绝对众数一定是这个数</li>
<li>枚举每个数，将这个数所在的位置变为1，其余变为-1，找区间合大于1的区间</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E8%8E%AB%E9%98%9F/</url>
    <content><![CDATA[<p>相关链接：[[分块]]</p>
<p>当出现 “与区间内数的数量相关” 的题目，一般而言使用莫队</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E8%AE%A1%E6%95%B0%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<p>![[计数问题选讲.pdf]]</p>
<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>对于只关心结果而不关心中间过程的题目，可以考虑找到中间过程的代表元，此时中间过程就与结果形成双射 <a href="https://www.luogu.com.cn/problem/AT_arc184_d"># Erase Balls 2D</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E5%88%86%E5%9D%97/%E5%88%86%E5%9D%97/</url>
    <content><![CDATA[<p><a href="./%E5%88%86%E5%9D%97+%E8%8E%AB%E9%98%9F.pptx">经典PPT</a></p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>区间加+区间查询值域区间数的个数，可以分块 <a href="https://www.luogu.com.cn/problem/P5356">由乃打扑克</a></p>
<p>分块也可以用来进行类似于倍增的处理，可以用来跑类似于 LCA 一类的算法 <a href="https://www.luogu.com.cn/problem/CF1491H"># Yuezheng Ling and Dynamic Tree</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/</url>
    <content><![CDATA[<p>相关链接：[[凸包]]，[[斜率优化]]</p>
<h2 id="闵可夫斯基和-："><a href="#闵可夫斯基和-：" class="headerlink" title="[[闵可夫斯基和]]："></a>[[闵可夫斯基和]]：</h2><h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>当遇到类似…图形完全包含…图形的题目时，考虑从中间往外射线，考虑是否经过奇数个点，可以拆成分层图表示经过奇&#x2F;偶次射线的情况，最后变成这两种状态间的路径问题 <a href="https://www.luogu.com.cn/problem/CF1920F2">冲浪</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E8%AE%BA%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96%E7%9A%84%E6%9A%B4%E5%8A%9B%E9%80%80%E6%A0%87%E8%AE%B0/</url>
    <content><![CDATA[<p>我们有时候需要做 “区间染色，全局查询某颜色区间内，该颜色点的数量之和” 这样的问题</p>
<p>![[Pasted image 20250216163531.png]]![[Pasted image 20250216163557.png]]</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P6783"># P6783 Ynoi2008 rrusq</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E8%B4%A8%E6%95%B0%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>相关链接：[[最大公约数]]，[[筛法]]</p>
<h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>固定右端点，一段数中不同的最大公约数的数量最多只有 $logn$ 个<a href="https://www.luogu.com.cn/problem/P5502">最大公约数</a></p>
<p> 当遇到质因数分解+状态压缩&#x2F;容斥一类需要减小 $n$ 的范围的题目时，考虑将其按照 $\sqrt{n}$ 为界分解为大小质数 <a href="https://www.luogu.com.cn/problem/P2150">寿司晚宴</a> ， <a href="https://www.luogu.com.cn/problem/P8292">卡牌</a><br>  ^372880</p>
<p>$n$ 内的本质不同质因子个数不是 $log2$ 级别的，事实上比这小得多，使得其能够跑 $10^7$ 以内的范围</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<p>[[线段覆盖]]</p>
<h2 id="反悔贪心"><a href="#反悔贪心" class="headerlink" title="反悔贪心"></a>反悔贪心</h2><p><a href="https://www.luogu.com.cn/problem/P3620"># 数据备份</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E8%B5%9B%E5%89%8D%E9%87%91%E5%8F%A5/</url>
    <content><![CDATA[<ol>
<li><p>考试的时候不要再建立一个主文件夹！！！它会帮你创的！！！(2023.10.18)</p>
</li>
<li><p>考试时看清楚输入输出文件，尽管前几题可能是ABC(2023.10.18)</p>
</li>
<li><p>输入输出文件一般而言都是小写打头(2023.10.18)</p>
</li>
<li><p>求操作次数最小的问题(最优化问题)有时也可以转换为判定问题（二分答案解决）</p>
</li>
<li><p>博弈论问题可以考虑将操作被动最优的人忽略(2023.10.18)</p>
</li>
<li><p>相信自己（</p>
</li>
<li><p>树形dp问题可以考虑转换成边的思路求解(2023.10.20)</p>
</li>
<li><p>dp问题能初始化就初始化(2023.10.20)</p>
</li>
<li><p>dp问题时间复杂度不优秀时考虑合并状态，难转移或无法转移时考虑拆解状态(2023.11.17)</p>
</li>
<li><p>一些题目中的定义会放在题目背景中，注意审题(<a href="https://www.luogu.com.cn/problem/P8819">星战</a>）(2023.11.17)</p>
</li>
<li><p>不会的题，即使是第一题，想了半个钟就跳，能拿一分是一分！(2023.11.17)</p>
</li>
<li><p>不要第一时间就想到高级数据结构！(2023.11.17)</p>
</li>
<li><p>数论题再恶心也要看下去，能拿一分是一分(2023.11.17)</p>
</li>
<li><p>看着很恶心，数据范围开得很大的题目，打表找规律！(2023.11.17)</p>
</li>
<li><p>NOIP2023，破釜沉舟！(2023.11.17)</p>
</li>
<li><p>做需要离线的题目时记得区分n和q！排序时不要把q写成n！(2024.1.7)</p>
</li>
<li><p>网络流赋值时从1赋值到t，确保所有点都被赋值</p>
</li>
<li><p>dinic算法记得infl-&#x3D;nt(流量)</p>
</li>
<li><p>记得给s的dis[] 和 infl[]赋初值</p>
</li>
<li><p>注意不要把sin和cos写反(我知道这很蠢但这就是我会犯的问题 2024.1.8)</p>
</li>
<li><p>double输出自动四舍五入(2024.1.8)</p>
</li>
<li><p>网络流建图边数能开多大就开多大(2024.1.8)</p>
</li>
<li><p>初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化初始化(2024.1.9)</p>
</li>
<li><p>写fhq的sep和merge时记得判断当前点为空的情况(2024.1.16)</p>
</li>
<li><p>#define size Size  (2024.1.19)</p>
</li>
<li><p>撤销不了就分治 (2024.1.19)</p>
</li>
<li><p>在类似于斜率优化或单调栈优化或决策单调优化时，记得在清除先前不优状态时用while()循环，彻底清除干净(2024.1.23)</p>
</li>
<li><p>线段树上状态合并时，注意合并方向（左右  (2024.1.24)</p>
</li>
<li><p>费用流计算最终费用时记得拿距离<strong>乘上流量</strong>(2024.2.8)</p>
</li>
<li><p>最短路的角度想不通时，可以将原图转化为对偶图，在对偶图上考虑最大流&#x2F;最小割，可能会更好解决(2024.2.15)</p>
</li>
<li><p>考虑题目时多做转化，具体如下：序列(无论异或还是加和)&lt;-&gt;前缀和&lt;-&gt;差分数组  最短路&lt;-&gt;最大流&#x2F;最小割  等差数列&lt;-&gt;李超线段树&lt;-&gt;斜率优化（凸包） 无向图&lt;-&gt;树</p>
</li>
<li><p>根据一个数的根号来分数据计算时，考虑是否要+1(2024.2.16)</p>
</li>
<li><p>当区间的是否满足条件的角度不好考虑时，尝试从区间内每个点是否满足条件的角度考虑，再用线段树区间查询询问区间内所有点是否都满足答案(2024.2.17)</p>
</li>
<li><p>区间内有区间参与的问题可以从分治或是扫描线的角度考虑(2024.2.17)</p>
</li>
<li><p>当n很小却以次幂的形式存在于时间复杂度时，可以考虑折半，用双向搜索，$O(2^n) \rightarrow O(2 \times2^{\frac{n}{2}})$  (2024.2.17)</p>
</li>
<li><p>有关浮点数的题目多注意观察 int 和 double 相加或相乘的部分 <a href="https://www.luogu.com.cn/record/147222594">警示后人</a>(2024.2.17)</p>
</li>
<li><p>$C_{x+y}^{x}$ 可以转换为从(0,0)走到(x,y)的路径条数(2024.2.17)</p>
</li>
<li><p>注意数据范围，思路尽可能往值域较小的变量上靠(2024.2.17)</p>
</li>
<li><p>询问中有两个区间参与并且需要将两个区间信息合并的问题，可以把一个区间竖起来，转化为二维问题，扫描线解决(2024.2.18)</p>
</li>
<li><p>对于二维问题（包括双区间问题），能够离线就考虑扫描线，否则就树套树解决(2024.2.18)</p>
</li>
<li><p>当有指针指向数组元素时，可以考虑把指针放在数组前定义，以防越位到指针(2024.2.18)</p>
</li>
<li><p>注意数据读入顺序(2024.2.18)</p>
</li>
<li><p>区间间相互影响的问题，考虑离散化，变成多个限制区间的形式解决(2024.2.18)</p>
</li>
<li><p>当题目中存在向下取整的除法不好处理时，可以考虑反过来做，用一个区间的数的乘法来表示 <a href="https://www.luogu.com.cn/problem/P3576">例子</a> (2024.2.20)</p>
</li>
<li><p>求极大点双连通分量时，用指向点判断是否出栈而不是当前点(2024.2.21)</p>
</li>
<li><p>随机游走问题基本上都能使用动态规划解决(2024.2.21)</p>
</li>
<li><p>数据范围较小且每个统计的问题可以分解为几个互不相干的小问题再合并处理时，考虑区间dp(2024.2.21)</p>
</li>
<li><p>当求一个区间内每个元素的交集或每个元素若出现但仅统计若干次时，可以固定右端点，从左往右扫描并添加元素，每次删去左边的重复元素，查询时直接在主席树上查询即可 <a href="https://www.luogu.com.cn/problem/CF594D">例子</a>(2024.2.22)</p>
</li>
<li><p>判断元素个数是否为偶数时，可以考虑用异或操作(2024.2.22)</p>
</li>
<li><p>对于每一位只会出现一次的问题，可以考虑转化为一个数列(2024.2.23)</p>
</li>
<li><p>不要把容斥看得太麻烦，能用容斥就往哪方面多想想(2024.2.23)</p>
</li>
<li><p>当题目操作较多且会影响后续答案统计时，可以考虑操作分块(2024.2.23)</p>
</li>
<li><p>线段树上大力卡内存且每个点只需要一个参数时，可以考虑不建最下层的点，转而用最下层点的父节点的l r 来存储这个参数(2024.2.25)</p>
</li>
<li><p>线段树合并&#x2F;主席树 + 区间修改 ， 考虑转化为差分(2024.2.25)</p>
</li>
<li><p>dp状态可以尝试把离散的状态转化为连续的状态，便能使用差分优化，如原状态为 <strong>设 $dp_i$ 表示最小值为i的最小代价</strong>，可以转化为 <strong>设 $dp_i$ 表示最小值小于i的最小代价</strong> (2024.2.25)</p>
</li>
<li><p>定区间+区间查询问题，可以尝试往单调队列的角度考虑(2024.2.26)</p>
</li>
<li><p>kmp的fail数组既可以指<strong>最长的前后缀长度</strong>，也可以指<strong>当前位的最长的前缀匹配</strong>，有时可以换定义来理解，在一些题目里面从前后缀的角度考虑会有意想不到的效果(2024.2.26)</p>
</li>
<li><p>通过不断跳fail的方式可以求出最短的前缀匹配，可以通过继承优化到 $O(n+m)$ <a href="https://www.luogu.com.cn/problem/P3435">例子</a> (2024.2.26)</p>
</li>
<li><p>dp题目将答案分成若干个互不相关的部分来统计，可能会使答案的统计变得简单 <a href="https://www.luogu.com.cn/problem/P2605">例子</a> (2024.2.26)</p>
</li>
<li><p>仔细看好你填进去的变量到底是什么(2024.2.27)</p>
</li>
<li><p>求带删最大&#x2F;最小值时，不要第一时间往线段树上想，考虑堆是否能行(2024.2.28)</p>
</li>
<li><p>珂朵莉树，分裂时先分裂右边再分裂左边(2024.2.28)</p>
</li>
<li><p>注意审题啊唇笔，注意“且”和“或”这样的字眼，手模完样例了再想怎么做，题都读不懂还做什么题(2024.2.29)</p>
</li>
<li><p>所有能考虑区间合并,且区间信息能够较快合并，区间合并与大小无关的问题都能够通过线段树解决，否则就考虑区间dp(2024.2.29)</p>
</li>
<li><p>区间绝对众数有四种找法，你知道吗？</p>
</li>
</ol>
<ul>
<li>二分答案，找区间内出现的数量</li>
<li>摩尔投票法</li>
<li>将序列有序后，取中间那个数，绝对众数一定是这个数</li>
<li>枚举每个数，将这个数所在的位置变为1，其余变为-1，找区间合大于1的区间</li>
</ul>
<ol start="66">
<li><p>区间中位数也可以用二分答案法解决，区间内仅有大小比较的找数问题，都可以用 二分答案+01赋值法解决(2024,2,29)</p>
</li>
<li><p>区间找两个数异或的最大值有三种求法，你知道吗？</p>
</li>
</ol>
<ul>
<li>主席树上二分</li>
<li>可持久化trie树上寻找</li>
<li>找每个数所拥有的 $O(logn)$ 个支配数，具体看第 290 条 (Upd on 2025.1.4)</li>
</ul>
<ol start="68">
<li><p>只有合并没有撤销的题，考虑启发式合并(2024.2.29)</p>
</li>
<li><p>第一次省选，一发入魂！(2024.3.1)</p>
</li>
<li><p>对于代价随着时间的变化而增长，满足条件后停止增长的问题，可以考虑把每一时刻的代价表示为每一时刻未满足条件的代价的和 <a href="https://www.luogu.com.cn/problem/UVA1336">例子</a> ，或是将每一段的代价乘上未来累计所需的时间 <a href="https://www.luogu.com.cn/problem/P2053">例子</a> (2024.3.1)</p>
</li>
<li><p>对于求期望的问题，可以转换为求每个代价出现的概率乘上代价的和(2024.3.1)</p>
</li>
<li><p>只有一个前驱节点的不一定是一棵树，也可能是个基环树(2024.3.1)</p>
</li>
<li><p>淦式子里面的整数能不能直接转成浮点数啊淦(2024.5.14)</p>
</li>
<li><p>喜欢我线段树上插查询但是不取max吗？(2024.5.21)</p>
</li>
<li><p>询问一棵树上一些标记点中祖先包含某点的数量，可以转化为求某点子树中有多少个标记点 <a href="https://www.luogu.com.cn/problem/P2414">阿狸的打字机</a>(2024.5.29)</p>
</li>
<li><p>fail 不一定是祖先，祖先不一定是 fail ，找前缀跳祖先，找后缀跳fail (2024.5.29)</p>
</li>
<li><p>注意看题目中 n,m 分别代表什么含义及其取值范围(2024.5.30)</p>
</li>
<li><p>有时候AC自动机上打END的点不代表全部，有时还要看一些点的 fail 上是否包含它，即后缀是否包含它 <a href="https://www.luogu.com.cn/problem/P4052">文本生成器</a> (2024.5.30)</p>
</li>
<li><p>回文自动机，last 与 now 的区别 <a href="https://www.luogu.com.cn/problem/P3649">回文串</a> (2024.5.31)</p>
</li>
<li><p>后缀数组，将 x 设为 num 时，用 “++num” 而不是 “num++” (2024.6.4)</p>
</li>
<li><p>统计不同的子串数量，可以用每个后缀的长度减去每个 h[i] 求得(2024.6.13)</p>
</li>
<li><p>后缀关系或子串计数，看 parent tree，前缀关系或子串匹配，看 SAM 边(2024.6.13)</p>
</li>
<li><p>清空 SA 的时候，x[i],y[i] 都要清空到n+5,c[i] 清空到 505 (2024.6.14)</p>
</li>
<li><p>dp设计状态时不一定是“选择右端点”，也可以是“到右端点的区间已选择完”(2024.6.19)</p>
</li>
<li><p>后缀数组枚举每一位进行匹配时，可以像递推 h[i] 数组一样继承，从而使得枚举的复杂度降为 $O(n)$ <a href="https://www.luogu.com.cn/problem/P4770">君名</a> (2024.6.21)</p>
</li>
<li><p>矩形赋值问题，往前缀和和差分方向考虑准没错(2024.6.23)</p>
</li>
<li><p>矩形问题注意观察左右端点是否能相等 <a href="https://www.luogu.com.cn/problem/CF1592F2">爱丽丝</a> (2024.6.23)</p>
</li>
<li><p>当遇到 $\frac{x}{1-w}$ 这类式子且 w 有可能取到 1 时，可以考虑将 w 等效替换为 1-w <a href="https://www.luogu.com.cn/problem/P3317">rebuild</a> (2024.6.24)</p>
</li>
<li><p>1&lt;&lt;(-1) 想死就直说 (2024.6.27)</p>
</li>
<li><p>splay树的rotate操作，pushup时先pushup位于下方的点(2024.6.30)</p>
</li>
<li><p>LCT的access操作，记得pushup(x) <a href="https://www.luogu.com.cn/problem/P3203">弹飞绵羊</a>(2024.6.30)</p>
</li>
<li><p>什么？这不是树剖，这是LCT，吸水之后变大变高，用LCT来判断环啊，做小生成树啊，都是非常方便的(2024.7.1)</p>
</li>
<li><p>匈牙利算法，用tim记录vis数组能极大优化时间 <a href="https://www.luogu.com.cn/problem/P4055">game</a> (2024.7.3)</p>
</li>
<li><p>当涉及到异或操作时，多考虑其重叠部分是否会相互抵消<a href="https://www.luogu.com.cn/problem/P4151">最大异或路径</a>(2024.7.9)</p>
</li>
<li><p>涉及选择几个数使其异或起来最小时，若有数必选，则其一开始就异或上，后面统计答案时再贪心选择，而不是丢到线性基里面(2024.7.9)</p>
</li>
<li><p>对于询问一个图是否是二分图，先考虑其中是否有奇环(2024.7.9)</p>
</li>
<li><p>如果只能合并长度为 $2^k$ 这样的序列，但却要将一个长度为 $n$ 的序列合并为一个最多有两种元素不同的序列，可以考虑取最大的 $k$ 使得 $2^k \le n$，然后合并区间 $(1,2^k),(n-2^k+1,n)$ <a href="https://www.luogu.com.cn/problem/CF1408F">2different</a>(2024.7.11)</p>
</li>
<li><p>对于区间取最小值且又有数字都对一个常数取 $max$ 的问题，可以直接不考虑取 $max$ ，这样就会取到最右侧的最小点 (2024.8.3)</p>
</li>
<li><p>对于几串括号序列串在一起，判断是否合法的的问题，可以将括号序列转换为一个二元组 $(sum,min)$，表示左括号减右括号的和 与 添加过程中 $sum$ 的最小值，添加时判断只需要看它加上 $min$ 后会不会小于零即可 (2024.8.5)</p>
</li>
<li><p>找一群数中找两个数的异或值的最大值，可以先排序再在 trie 树上寻找(2024.8.8)</p>
</li>
<li><p>找最…的区间或树上找…的链，可以考虑用分治对其进行分类再寻找 (2024.8.8)</p>
</li>
<li><p>当dp中有操作使得某一维变为…，且一些维度间并没有差别，可以考虑把这一维去掉，因为它已知 <a href="https://www.luogu.com.cn/problem/AT_arc073_d">many moves</a> (2024.8.10)</p>
</li>
<li><p>找前 $k$ 大&#x2F;小 元素，用 nth_element() 而非 sort() 会更快 (2024.8.11)</p>
</li>
<li><p>当遇到 $\sum_{i&#x3D;1}^{n}\frac{n}{i}$ 时，不要害怕，这是调和级数，可以变为 $nlogn$ (2024.8.15)</p>
</li>
<li><p>当多次询问询问最优方案，维护的信息较简单且方便维护时，考虑倍增 <a href="https://www.luogu.com.cn/problem/P8163">铁路</a>(2024.8.20)</p>
</li>
<li><p>组合数怎么横向求前缀和 <a href="https://zhuanlan.zhihu.com/p/715767647">这里这里</a>(2024.8.21)</p>
</li>
<li><p>SG 函数指的是 $mex(S_u)$ ，但是它的子节点中也可以有 SG 值大于其本身的，所以要注意反边也能连<a href="https://www.luogu.com.cn/problem/AT_agc016_f">DAG</a>(2024.8.22)</p>
</li>
<li><p>线段树优化dp，注意条件的清空顺序,特别是离散化<a href="https://www.luogu.com.cn/problem/AT_abc262_h">歌姬</a>(2024.8.23)</p>
</li>
<li><p>注意特判时输出前该加的变量加了没有<a href="https://www.luogu.com.cn/problem/P4195">exBSGS</a>(2024.8.25)</p>
</li>
<li><p>能不用快速幂就别用快速幂(2024.8.25)</p>
</li>
<li><p>十六岁生日快乐！(2024.8.25)</p>
</li>
<li><p>当范围较小时(能开二维数组时)，可以考虑用二维树状数组而不是树套树(2024.8.26)</p>
</li>
<li><p>当随机化判断正确的概率百分百，判断错误的概率较小时，考虑随机化多测几次 <a href="https://www.luogu.com.cn/problem/CF1746F">神秘题</a>(2024.8.26)</p>
</li>
<li><p>对顶栈有时候没必要分中点重构，有时候直接分右端点会更优(2024.8.26)</p>
</li>
<li><p>有时候树剖没必要直接上线段树，可以用任意数据结构维护，如 set (2024.8.26)</p>
</li>
<li><p>注意模数到底是 $10^9+7$ 还是 $10^9+9$(2024.8.28)</p>
</li>
<li><p>即使是读入，也可能要先取模(2024.8.30)</p>
</li>
<li><p>对于取 max 还有一个分式的结构，可以变成 min 然后取倒数(2024.8.30)</p>
</li>
<li><p>ABC，看完题目再开始做，即使题面很长(2024.8.31)</p>
</li>
<li><p>当在外部使用 if 时，记得判断里面的break的范围 <a href="https://www.luogu.com.cn/problem/P3763">DNA</a> (2024.9.1)</p>
</li>
<li><p>多项式积分可以通过将数组调小观察次数变化来调试(2024.9.2)</p>
</li>
<li><p>gcd相当于对所有质数取min，lcm相当于取max，利用好这两点有时可以省掉高精度或质因数分解(2024.9.2)</p>
</li>
<li><p>状压dp可以尝试搭配容斥，对时间复杂度的影响不大(2024.9.3)</p>
</li>
<li><p>状压多一维n一维不是大问题，不要惯性思维(2024.9.3)</p>
</li>
<li><p>状压判断两个集合的边是否有交时，可以用于集合有交的边的数量关系来判断$(a_{S_1}+a_{S_2}&#x3D;a_{S_1 \cup S_1})$ (2024.9.3)</p>
</li>
<li><p>查后缀包含的区间和，可以不用二维数点(2024.9.3)</p>
</li>
<li><p>当你要向一个队列全局加一时，可以考虑添加一个新的元素，取出时的值设为(q.front()+q.size())(2024.9.4)</p>
</li>
<li><p>线段树合并，先合并后修改，否则两倍时间+空间常数 <a href="https://www.luogu.com.cn/problem/P3925">aaa被续</a> (2024.9.6)</p>
</li>
<li><p>如果你在写类似于并查集或是圆方树这类需要把一些节点当作一个节点的算法，注意你的节点对应的新点究竟是 i 还是 rk[i] <a href="https://www.luogu.com.cn/problem/P4208">最小生成树计数</a>(2024.9.9)</p>
</li>
<li><p>自然溢出不是取绝对值，取绝对值不是自然溢出！(2024.9.10)</p>
</li>
<li><p>$O(\sum_{d\mid n}d )&#x3D; O(nloglogn)$ (2024.9.10)</p>
</li>
<li><p>cdq不一定是单纯左右递归完了再合并，也可以是先处理左侧，再合并左右，再处理右侧，像中序遍历(2024.9.11)</p>
</li>
<li><p>模 $X$ 意义下求某个矩阵的解，可以考虑高斯消元 <a href="https://www.luogu.com.cn/problem/P3164">和谐矩阵</a>(2024.9.12)</p>
</li>
<li><p>无论怎么样，无向图上 dfs 考虑是否要设置 vis[i] 数组记忆化 <a href="https://www.luogu.com.cn/problem/P2685">桥碧萝殿下</a> (2024.9.14)</p>
</li>
<li><p>dp不能，上搜索，$2^n$ 不能，考虑搜索 <a href="https://www.luogu.com.cn/problem/P3262">战争调度</a> (2024.9.18)</p>
</li>
<li><p>看到异或先往线性基上靠，哪怕是在 SG 函数里 <a href="https://www.luogu.com.cn/problem/P4301">New Nim</a> (2024.9.22)</p>
</li>
<li><p>动态规划问题添加元素不一定是唯一的出路，也可以考虑在原有状态的基础上合并状态 <a href="https://www.luogu.com.cn/problem/P5228">找硬币</a> (2024.9.22)</p>
</li>
<li><p>bfs塞入队列前，考虑是否要初始化 vis[] 数组 <a href="https://www.luogu.com.cn/problem/P5954">侦探已死</a> (2024.9.22)</p>
</li>
<li><p>tarjan里的 vis[] 数组代表是否在栈中，只有在出栈时才会设为 0 <a href="https://www.luogu.com.cn/problem/P7251">板</a> (2024.9.22)</p>
</li>
<li><p>固定右端点，一段数中不同的最大公约数的数量最多只有 $logn$ 个<a href="https://www.luogu.com.cn/problem/P5502">最大公约数</a> (2024.9.24)</p>
</li>
<li><p>如果公约数间有联系，不要担心不同最大公约数的数量问题 (2024.9.24)</p>
</li>
<li><p>二维dp很难从左往右推时，可以考虑固定右端点，向左去推 <a href="https://www.luogu.com.cn/problem/P5774">JYY病毒</a> (2024.9.25)</p>
</li>
<li><p>看到“循环”两字及计数，考虑矩阵乘法 <a href="https://www.luogu.com.cn/problem/P5772">位运算</a> (2024.9.26)</p>
</li>
<li><p>该容斥就容斥 (2024.9.25)</p>
</li>
<li><p>注意加边是加单向还是双向 (2024.9.27)</p>
</li>
<li><p>当字符串的个数固定，且要求字典序最大的最小时，可以求一遍后缀排序然后二分 <a href="https://www.luogu.com.cn/problem/P6095">llch分割</a> (2024.9.29)</p>
</li>
<li><p>树剖的时候，注意你填进去的究竟是 rk 还是 dfn (2024.9.29)</p>
</li>
<li><p>树剖可以尝试着把点的编号随机打乱下，因为可能会出现 rk&#x3D;dfn 的样例 (2024.9.29)</p>
</li>
<li><p>树形 dp，当所有儿子合并在一起很难转移时，考虑变成一个一个添加<a href="https://www.luogu.com.cn/problem/P3267">草了，史题</a> (2024.9.30)</p>
</li>
<li><p>排列计数问题，找最后一个影响答案的位置 <a href="https://www.luogu.com.cn/problem/P4562">game</a> (2024.9.30)</p>
</li>
<li><p>$n^2$ 以内都能区间 dp 记录区间最优决策，但不一定是标准区间 dp (2024.9.30)</p>
</li>
<li><p>当遇到只会向某一侧产生影响的条件时，找到最开始的点，递推即可 <a href="https://www.luogu.com.cn/problem/P4563">大树守卫</a> (2024.9.30)</p>
</li>
<li><p>树上添加一条边时，注意考虑环可以从左右两边通过(2024.10.2)</p>
</li>
<li><p>树内联通集大小，考虑类比dfs的过程，dfs序相邻的点的路径和除以二 异象石 (2024.10.2)</p>
</li>
<li><p>对于求解模数的问题，考虑在其整除的基础上减去一，得到模数减一的结果 <a href="https://www.luogu.com.cn/problem/P11145">homura</a> (2024.10.2)</p>
</li>
<li><p>1e9 floyd ，循环展开！<a href="https://www.luogu.com.cn/problem/P7516">图函数</a> (2024.10.3)</p>
</li>
<li><p>floyd 一定好保证,$i,j,k$ 都枚举到 $n$ ，否则无法保证正确性 (2024.10.3)</p>
</li>
<li><p>对于取 $\frac{1}{2}$ 一类的问题，一半进一半出，考虑欧拉回路 (2024.10.3)</p>
</li>
<li><p>将图上的点拉平到序列上了之后，序列上某点处往左往右的数量一定相等 (2024.10.3)</p>
</li>
<li><p>边权为 $2^i$ 的图，其两两最短路为最小生成树 (2024.10.3)</p>
</li>
<li><p>审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题 (2024.10.4 模拟赛祭)</p>
</li>
<li><p>当 $n$ 很小且影响为一个区间时，考虑区间 dp (2024.10.5)</p>
</li>
<li><p>不要相信小样例，会变得不幸(2024.10.5)</p>
</li>
<li><p>注意数据范围，枚举范围不一定是输入数据中的最大值 (2024.10.6)</p>
</li>
<li><p>1e8 是能过的，不要过于相信本地结果 (2024.10.6)</p>
</li>
<li><p>求经过 $n$ 个点的最短路时，考虑直接 bfs (2024.10.6)</p>
</li>
<li><p>做当前弧优化时，如果有点会重复入栈，那么注意编号要取地址，否则复杂度会被卡成 $m^2$ <a href="https://codeforces.com/contest/1634/problem/E">欧拉回路</a> (2024.10.6)</p>
</li>
<li><p>$O(n)$ 算多项式的值时，用秦九韶算法 <a href="https://www.luogu.com.cn/problem/P2312">解方程</a> (2024.10.8)</p>
</li>
<li><p>统计子串时，建trie可能会导致mle，考虑哈希解决可能更稳(2024.10.9)</p>
</li>
<li><p>当答案对某数取模且某数能拆成若干个小质数时，考虑拆成素数幂然后CRT合并起来 (2024.10.9)</p>
</li>
<li><p>快写时，记得考虑等于0的情况是否需要输出，否则可能不输出 (2024.10.9)</p>
</li>
<li><p>世界上有种图，叫竞赛图，缩点后会变成一条链 (2024.10.10)</p>
</li>
<li><p>把图拆成树，再对非树边跑树上染色，有时候对路径问题有奇效 <a href="https://codeforces.com/problemset/problem/521/E">CF512E</a> (2024.10.10)</p>
</li>
<li><p>动态维持连通性时，割点有奇效 <a href="https://www.luogu.com.cn/problem/CF1916F">图的分割</a> (2024.10.10)</p>
</li>
<li><p>考试不到最后一刻不要放弃，加快速度才能有更多机会 (2024.10.11)</p>
</li>
<li><p>当遇到带修的 dp 时，注意分析其是否具有可撤销性 (2024.10.11)</p>
</li>
<li><p>无论怎么样，总得试试反过来做 (2024.10.11)</p>
</li>
<li><p>若一棵树有两个重心，那么每个重心的最大子树一定是另一个重心为根的子树 (2024.10.11)</p>
</li>
<li><p>审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题审题 (2024.10.12)</p>
</li>
<li><p>笛卡尔树在处理区间最大值于…的关系这类题时配合启发式合并有奇效 <a href="https://codeforces.com/gym/104068/problem/K">异或最大值</a> (2024.10.13)</p>
</li>
<li><p>当状压枚举子集行不通时，想想类似复杂度的算法，比如说容斥 <a href="https://www.luogu.com.cn/problem/P3349">小星星</a> (2024.10.14)</p>
</li>
<li><p>看到组合数与次方的结合时，第一时间要想到普通幂转下降幂 <a href="https://www.luogu.com.cn/problem/CF932E">Team Work</a> (2024.10.14)</p>
</li>
<li><p>当有操作涉及到对集合中的选择一个或两个元素同时进行操作时，可以考虑向集合中添加类似 “0” 的元素，这样就能将选择一个元素的方案合并到两个里面去 <a href="https://www.luogu.com.cn/problem/AT_arc121_d">1 or 2</a> (2024.10.14)</p>
</li>
<li><p>注意分析题中最坏能卡到多慢，有时能发现根号的存在 (2024.10.14)</p>
</li>
<li><p>$\max{ a,b }&#x3D;\mid \frac{a+b}{2} \mid + \mid \frac{a-b}{2} \mid$ (2024.10.15)</p>
</li>
<li><p>当遇到“使得任意两个数都有 $a+b \ge k$”这这样的题目时，可以考虑将数分为两类：一类是 $a*2\ge k$ 的，另一类为其他，分别根据他们的性质分类讨论 <a href="https://www.luogu.com.cn/problem/AT_arc148_e">老K</a> (2024.10.15)</p>
</li>
<li><p>当遇到“排列某些数使得…”这样的题时，先往排序的方向上思考，再不济就dp (2024.10.15)</p>
</li>
<li><p>$\sum_{i&#x3D;1}^{n-1} \sum_{j&#x3D;i+1}^{n}a_j-a_i &#x3D;\sum_{i&#x3D;1}^{\frac{n}{2}}(n-2i+1)(a_{n-i+1}-a_{i})$，在遇到递增数列两两间差值求和时可以考虑用这个式子 <a href="https://www.luogu.com.cn/problem/AT_arc147_c">两两求和</a>(2024.10.15)</p>
</li>
<li><p>在遇到序列差值的绝对值时，第一步考虑将其转化为一个单调序列 (2024.10.15)</p>
</li>
<li><p>对于每一步变化一个位置，统计答案总数这类的的题，可以考虑拆成两部分：操作序列和初始序列，考虑将他们以某种方式合并可能会是一种思路 <a href="https://www.luogu.com.cn/problem/AT_arc147_d">集合打分</a> (2024.10.15)</p>
</li>
<li><p>$C_{n}^{i} \mod 2 &#x3D;\begin{cases} 1 &amp;&amp; i&amp;  n&#x3D;i\ 0 &amp;&amp; otherwise\\end{cases} $，转化为枚举子集的式子 <a href="https://www.luogu.com.cn/problem/AT_arc137_d">前缀xor</a> (2024.10.16)</p>
</li>
<li><p>$2x \equiv 2y \pmod{P}$ 是，可能是 $x \equiv y$，也有可能是 $x\equiv y + \frac{P}{2}$ (2024.10.17)</p>
</li>
<li><p>做序列分割这样一类的问题时，考虑决策的交和并的关系 (交比并优或并比交优) (2024.10.17)</p>
</li>
<li><p>在做涉及到类似向量一类的问题时，考虑将两点化为线，将三点化为面 <a href="https://www.luogu.com.cn/problem/P4049">合金</a> (2024.10.18)</p>
</li>
<li><p>当涉及到多维度的条件时，注意观察题设条件，看能否用某些维度表示出剩下维度 (2024.10.18)</p>
</li>
<li><p>断断续续做了一年记录了，感悟良多，没想到当初的一时兴起居然能坚持这么久 (2024.10.18)</p>
</li>
<li><p>窝趣怎么都一年过去了，要退役了啊！ (2024.10.18)</p>
</li>
<li><p>数位 dp 不要过分关注于当前完整状态，注意到当前能够支持合并的特征状态即可 (2024.10.20)</p>
</li>
<li><p>当发现求解某一问题时可以将其转化为更小规模的同等问题时，不止可以考虑分治，更可以想想记忆化搜索，再用记搜的式子推出 dp 式，转化为动规问题 (2024.10.20)</p>
</li>
<li><p>当遇到两个数的异或一类的问题时，首先考虑能否将这两个数绑定为一个二元组，再对每一种二进制情况进行讨论 (2024.10.20)</p>
</li>
<li><p>向左右染色问题一类的问题，可以转化为求本质不同子序列 (2024.10.22)</p>
</li>
<li><p>将树上染色的第一个点作为根，说不定会有奇效 <a href="https://www.luogu.com.cn/problem/CF825G">树上询问</a> (2024.10.22)</p>
</li>
<li><p>调和级数不止可以用于枚举倍数，还可以用于取模的分块计算中(前提是取模连续) <a href="https://www.luogu.com.cn/problem/AT_arc126_c">例</a> (2024.10.22)</p>
</li>
<li><p>分类法是个好东西，特别是在计数本质不同问题时 (2024.10.23)</p>
</li>
<li><p>看到序列操作+加减加减加+121 这类题，想想有没有可能是 $n$ 阶差分 (2024.10.24)</p>
</li>
<li><p>当遇到二选一这类做选择的题目时，可以考虑建图连边，用边的方向来代表选择，可能会有奇效 (2024.10.25)</p>
</li>
<li><p>当遇到类似…图形完全包含…图形的题目时，考虑从中间往外射线，考虑是否经过奇数个点，可以拆成分层图表示经过奇&#x2F;偶次射线的情况，最后变成这两种状态间的路径问题 <a href="https://www.luogu.com.cn/problem/CF1920F2">冲浪</a> (2024.10.28)</p>
</li>
<li><p>注意当使用set时，若结构体由多种元素构成，当心因比较函数导致的去重自动 (2024.10.28)</p>
</li>
<li><p>看到两数异或+大小比较，首先要想到trie (2024.10.29)</p>
</li>
<li><p>当序列上推式子很麻烦时，考虑转化为桶试试 (2024.10.30)</p>
</li>
<li><p>对递增序列计数时，可以考虑枚举其的差分数组 (2024.10.31)</p>
</li>
<li><p>对欧拉回路计数，可以考虑用BEST定理 (2024.10.31)</p>
</li>
<li><p>当涉及到循环位移直到遇到空为止的问题时，考虑多开一个点，建环，变为判定多开的那个点是否被覆盖 <a href="https://www.luogu.com.cn/problem/CF838D">座位安排</a> (2024.10.31)</p>
</li>
<li><p>当看到序列某段前缀和不得低过某定值时，考虑用 Raney引理+原排列计数 <a href="https://www.luogu.com.cn/problem/P6672">游戏王</a> (2024.10.31)</p>
</li>
<li><p>集合计数问题，注意转移时是否记重的问题 (2024.10.31)</p>
</li>
<li><p>当题目涉及到“一棵树上加上一条边”时，考虑对这个可能的环单独剖离出来，树的其他部分照旧 <a href="https://www.luogu.com.cn/problem/P3244">落忆枫音</a> (2024.11.1)</p>
</li>
<li><p>dp时线段树不一定用来维护决策点，也不一定用来维护dp值，最好两种情况同时分析取最优 <a href="https://www.luogu.com.cn/problem/P6144">Help Yourself P</a> (2024.11.1)</p>
</li>
<li><p>当很难一个个的求解出函数值时，考虑递推式 (2024.11.4)</p>
</li>
<li><p>当元素种类只有两种时，此时的交换两个元素可以等价的视作“将某个元素修改为另一种元素” <a href="https://www.luogu.com.cn/problem/P1136">教主</a> (2024.11.5)</p>
</li>
<li><p>当遇到“买一送一”这类题时要注意，买后还没送时游戏是否已经结束 <a href="https://www.luogu.com.cn/problem/P1174">打砖块</a> (2024.11.5)(感谢 @liugh_ 的贡献)</p>
</li>
<li><p>有时候在序列整体上去考虑组合插板，会比转化为序列分割更容易 <a href="https://www.luogu.com.cn/problem/P8594">一个仇的复</a> (2024.11.6)</p>
</li>
<li><p>二项式定理展开时，注意符号的指数究竟跟的是哪个 (2024.11.6)</p>
</li>
<li><p>当当见到形如 $n^0,n^1,n^2…$ 这样的形式时，考虑转化为 $n$ 进制解决 (2024.11.6)</p>
</li>
<li><p>分段矩阵快速幂，时间复杂度不会有很大的变化 <a href="https://www.luogu.com.cn/problem/AT_abc258_h">Odd Steps</a> (2024.11.7)</p>
</li>
<li><p>对于无后效性的序列递推，考虑矩阵快速幂解决 (2024.11.7)</p>
</li>
<li><p>对于图上取min&#x2F;max的问题，考虑用最短路优化 (2024.11.8)</p>
</li>
<li><p>对于操作有规律变化的最短路问题，可以尝试分主元，拓扑+最短路解决 <a href="https://www.luogu.com.cn/problem/AT_abc261_h">图上游戏</a> (2024.11.8)</p>
</li>
<li><p>李超树+线段树合并是 $O(nlogn)$ 的(2024.11.11)</p>
</li>
<li><p>当遇到决策点全局加，询问某固定区间 $[l,r]$ 内是否有决策点时，假设有三个决策点 $a_1&lt;a_2&lt;a_3$ ，且有 $a_3-a_1&lt;r-l$ 时，决策点 $a_2$ 可以视作无用 <a href="https://pjudge.ac/problem/21624">背包</a>(2024.11.13)</p>
</li>
<li><p>当遇见需要用类似断环为链的思路解决的题目时，可以尝试考虑环上的特殊点，从而使得不再用枚举断点 <a href="https://qoj.ac/contest/1038/problem/5035">foo~</a> (2024.11.14)</p>
</li>
<li><p>对于整个序列全局加&#x2F;减，部分位置特殊变化，求最值何时变化为特定值的问题是，可以考虑直接设最值为状态而非整个序列 <a href="https://www.luogu.com.cn/problem/AT_abc270_h">add 1</a> (2024.11.15)</p>
</li>
<li><p>DAG上生成树，考虑对每条横插边分别考虑 (2024.11.15)</p>
</li>
<li><p>子树内计算符合条件的点的数量，考虑转化为在数轴上某区间内点的数量，然后转线段树合并解决 <a href="https://luogu.com.cn/problem/P10304">道路修建</a> (2024.11.15)</p>
</li>
<li><p>当遇见对某些数取模且都等于定值时，考虑做差成0，变为寻找因数 <a href="https://www.luogu.com.cn/problem/AT_abc272_g">Mod M</a>(2024.11.15)</p>
</li>
<li><p>当在平面上找顶点使得构成轴对称图形时，可以尝试着找边的中垂线，变为寻找是否存在相同线段的问题 <a href="https://www.luogu.com.cn/problem/AT_abc220_g">等腰梯形</a> (2024.11.16)</p>
</li>
<li><p>增长量的递减也可用于二分 <a href="https://www.luogu.com.cn/problem/CF626E">平均值与中位数</a> (2024.11.18)</p>
</li>
<li><p>使用欧拉回路做“某段路径被经过若干次”这类的题目是，注意BEST定理计算的是两点间若干条边有顺序的方案数，一般情况下应当除去 $\frac{1}{w!}$ 将顺序消掉 <a href="https://www.luogu.com.cn/problem/CF1919E">Counting Prefixes</a> (2024.11.18)</p>
</li>
<li><p>当循环复制的次数很大时，考虑每次循环是否都能够产生贡献 或 循环过多会导致答案成为定值，实际应循环次数与数量级不符 <a href="https://www.luogu.com.cn/problem/CF261D">复制最长上升子序列</a> (2024.11.19)</p>
</li>
<li><p>当先选定区间两端点再选定区间中的元素是，尝试着看区间能否贪心的取最大 <a href="https://www.luogu.com.cn/problem/CF38H">马拉松</a> (2024.11.20)</p>
</li>
<li><p>有时候分奇偶讨论会有奇效，不要担心麻烦的问题 <a href="https://www.luogu.com.cn/problem/CF283D">酷酷牛牛序列</a> (2024.11.20)</p>
</li>
<li><p>当想到可能会炸 long long 时，在代码一旁标记上，警示后面的自己记得开 long long (2024.11.21)</p>
</li>
<li><p>当一个序列的需要由前边的元素推导得出后边的元素时，考虑该数的实际值是否重要，还是仅仅只需要满足递推式即可，（说人话：数列的递推式能不能变为下一个元素是否可行的判别式）<a href="https://www.luogu.com.cn/problem/CF1142D">歪果仁</a> (2024.11.21)</p>
</li>
<li><p>对于边权较小的最短路，考虑bfs (2024.11.22)</p>
</li>
<li><p>对于具有博弈成分的题目，分清主次，既谁的决策决定谁的决策 (2024.11.24)</p>
</li>
<li><p>对于生成一个序列使得其中的最小值最大的问题而言，照样可以使用动态规划解决，对于前一步决策取min，对方案取 max 即可 <a href="https://www.luogu.com.cn/problem/CF868E">金山打字王</a> (2024.11.24)</p>
</li>
<li><p>当遇到类似倍数或是整除的问题，当每个数唯一出现时，考虑枚举倍数，时间复杂度 $O(nlogn)$ ，当每个数并不唯一出现时，考虑枚举因数，时间复杂度 $O(nlog^2n)$ <a href="https://www.luogu.com.cn/problem/CF1730E">区间最大最小倍数</a> (2024.11.24)</p>
</li>
<li><p>当遇到数位dp且两两数之间仅有一部分的限制关系，可以考虑将其在状态中存储下来，用类似分治的方式解决 <a href="https://www.luogu.com.cn/problem/CF1982E">popcount(k)区间计数</a> (2024.11.25)</p>
</li>
<li><p>不妨试着大力枚举一下，万一某几步过后所有决策都变得确定了呢 <a href="https://www.luogu.com.cn/problem/CF1977D">行取反与列最大</a> (2024.11.25)</p>
</li>
<li><p>exgcd求逆元，注意在返回时取模，可能得到负数结果 (2024.11.26)</p>
</li>
<li><p>分多段矩阵快速幂，尝试预处理二的次幂，这样矩阵乘法时可以省掉一个n(因为只用处理一个行向量与矩阵相乘) <a href="https://www.luogu.com.cn/problem/P6772">老八</a>(2024.12.17)</p>
</li>
<li><p>概率是顺推，而期望需要逆推 (2024.12.17)</p>
</li>
<li><p>优化矩阵乘法的取模，可以考虑用一个int128的数组来存，计算完后统一取模 (2024.12.17)</p>
</li>
<li><p>当遇见子串+前缀相同段长度的问题时，考虑SA <a href="https://www.luogu.com.cn/problem/P6793">串</a> (2024.12.24)</p>
</li>
<li><p>对于求是否构成有序数列的题目也可以考虑倍增，考虑跳 $2^j$ 次到达的点，只要每个点到达时的所代表的状态相同即可 <a href="https://www.luogu.com.cn/problem/P7518">宝石</a> (2024.12.25)</p>
</li>
<li><p>对于钦定一个序列一类的问题，若我们不需要知道序列的全貌，可以考虑状压解决 <a href="https://www.luogu.com.cn/problem/P7519">滚榜</a>(2024.12.25)</p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/92288604">高楼抛鸡蛋</a>  (2024.12.26)</p>
</li>
<li><p>纸带的折叠的长度结果与纸带的折叠顺序无关 <a href="https://www.luogu.com.cn/problem/CF1965C">折叠纸带</a>(2024.12.26)</p>
</li>
<li><p>LCP有两种求法，你知道嘛</p>
</li>
</ol>
<ul>
<li>SA&#x2F;SAM 朴素求</li>
<li>前缀哈希+二分(可搭配主席树)</li>
</ul>
<ol start="259">
<li><p>比较两字符串字典序，可以通过找到两字符串 LCP，并比较 LCP 后一位字符大小的方式实现(可搭配 hash+线段树一类数据结构前缀求和) <a href="https://vjudge.net/problem/HackerRank-marmelade-kingdom">例</a> (2024.12.27)</p>
</li>
<li><p>SA做某后缀的最长公共子串，相当容易 (2024.12.27)</p>
</li>
<li><p>动规转移式可能可以通过左右两侧同时变换得到相同结构式，留心观察 <a href="https://www.luogu.com.cn/problem/P4022">熟悉的文章</a> (2024.12.27)</p>
</li>
<li><p>当动规中的某个状态的范围与值域有关时，考虑将其变为动规的结果 (2024.12.27)</p>
</li>
<li><p>随机数列最长上升子序列的期望长度为 $O(\sqrt n)$ <a href="https://www.zhihu.com/question/266958886?sort=created">好像只能计算机近似计算</a> (2024.12.27)</p>
</li>
<li><p>区间内两数异或的和 $\sum\limits_{i \in [0,r_1]}\sum\limits_{j \in [0,r_2]}i\oplus j$ ，发现若有其中一个的表示范围能够拆分为为 $a + [0,2^{i}-1]$ ，那么后半部分无论与何数异或和都不变，对于两个与上述同类的数而言，则和将完全取决于后缀较长的一个，故可将 $r_1,r_2$ 按照 lowbit 二进制分解，$O(log^2)$ 的合并即可得到答案 (2024.12.28)</p>
</li>
<li><p>当碰到“某类方案数的 $x$ ”次方一类的题目时，可以考虑用类似多项式拆分一类的方法，将其拆为“ $x$ 个线程同时，全程相等的方案数 ”<a href="https://www.luogu.com.cn/problem/P1758">管道取珠</a> (2024.12.29)</p>
</li>
<li><p>当动规转移式与值域有关时，分析其实际值是否重要，通过离散化缩小范围 <a href="https://www.luogu.com.cn/problem/P3643">划艇</a> (2024.12.29)</p>
</li>
<li><p>当遇到质因数分解+状态压缩&#x2F;容斥一类需要减小 $n$ 的范围的题目时，考虑将其分解为大小质数 <a href="https://www.luogu.com.cn/problem/P2150">寿司晚宴</a> ， <a href="https://www.luogu.com.cn/problem/P8292">卡牌</a> (2024.12.29)</p>
</li>
<li><p>有时候适当的分段进行 dp 会更好做(当段与段之间相互独立时) (2024.12.29)</p>
</li>
<li><p>概率dp中，当你钦定了某个状态时，记得从反面去思考：这个状态同时确定了哪些信息 <a href="https://www.luogu.com.cn/problem/P3239">亚瑟王</a> (2024.12.29)</p>
</li>
<li><p>当区间&#x2F;矩阵大小固定时，考虑使用单调队列来省去一个维度 <a href="https://www.luogu.com.cn/problem/P5193">爆弹魔</a> (2024.12.29)</p>
</li>
<li><p>不一定只有字符串才会用到哈希，具体要看这个数列是否需要满足字符串的某些形式(如字典序等) <a href="https://www.luogu.com.cn/problem/P5537">系统设计</a> (2024.12.30)</p>
</li>
<li><p>我擦这自然溢出真好用吧，取模我们不熟 (2024.12.30)</p>
</li>
<li><p>当遇到图上点分类染色一类的问题时，从其连通性角度思考有无特殊性质 (2024.12.30)</p>
</li>
<li><p>对于子区间计数问题，考虑将其转化为变为二维平面，换成 2-side 矩形进行二维数点解决 <a href="https://www.luogu.com.cn/api/team/downloadFile/w2qrskum">LXLの课件</a> (2024.12.30)</p>
</li>
<li><p>区间判断是否可重排为 $k&#x3D;1$ 的等差数列有三种方法，你知道吗？</p>
</li>
</ol>
<ul>
<li>若并不保证为一个排列，则可以取平方+哈希计算等方数列 <a href="https://www.luogu.com.cn/problem/P3792">大母神</a></li>
<li>若保证为一个序列，则可以 $max-min&#x3D;r-l$ 计算</li>
<li>若保证为一个序列，则可以计算其与数轴上相邻两项重合的部分，区间加重合部分表示相邻段的个数，根据鸽巢原理可得联通块数量，为 0 则连续</li>
</ul>
<ol start="275">
<li><p>如何判断是否为 <strong>一棵树</strong>，同时满足无环(LCT&#x2F;并查集)与点数-边数&#x3D;1 (2024.12.31)</p>
</li>
<li><p>当分析性质时，若有不同联通块间的信息，则需要考虑是否会影响到所有联通块 (2025.1.1)</p>
</li>
<li><p>区间加+区间查询值域区间数的个数，可以分块 <a href="https://www.luogu.com.cn/problem/P5356">由乃打扑克</a> (2025.1.1)</p>
</li>
<li><p>不一定要对时间扫描线，也可能对序列扫描线会更好解决 <a href="https://www.luogu.com.cn/problem/P3863">序列</a> (2025.1.1)</p>
</li>
<li><p>判断为空&#x2F;与0取max可以考虑根据上一次被清空位置分段 <a href="https://zhuanlan.zhihu.com/p/15860052292">美食家</a> (2025.1.2)</p>
</li>
<li><p>一个排列的逆序对数，与其的复合逆的逆序对数相同 (2025.1.2)</p>
</li>
<li><p>当遇到方案数对 $2$ 取模的问题时，考虑能不能构造双射使得其去除掉某些计算过程，或将不满足条件的方案剔除 (2025.1.2)</p>
</li>
<li><p>对于方案数对 $2$ 取模的题目，考虑是否能够通过 bitset 优化 (2025.1.2)</p>
</li>
<li><p>当遇到某些选择只有两种变化，问合法方案的题目，考虑使用 2-sat解决 <a href="https://www.luogu.com.cn/problem/P6965">毛子老哥重量级建图技巧题</a> (2024.1.3)</p>
</li>
<li><p>利用好 2-sat 的传递性，可以轻松实现区间加限制 (2024.1.3)</p>
</li>
<li><p>如果建图中只有前缀加边，可以考虑不使用线段树优化建图而使用前缀优化建图 (2024.1.3)</p>
</li>
<li><p>判断是否为必割边后，记得判断是否要返还流量 (2024.1.3)</p>
</li>
<li><p>当遇见判断区间是否为等差数列时，可以转化为区间内所有数 $\mod d$ 意义下相同 (2025.1.4)</p>
</li>
<li><p>负数取模无论在什么情况下，只要不保留符号，那都是用 <code>(a%d+d)%d</code> (2025.1.4)</p>
</li>
<li><p>非 4-side 矩形查询，就可以尝试使用区间取 min&#x2F;max 解决问题，单点查询的区间 min&#x2F;max 问题，可以标记永久化的搞 (2025.1.4)</p>
</li>
<li><p>对于查询 区间 两数异或最小值的问题，可以考虑求出某个数仅有的 $O(logn)$ 个支配数，变为查询支配对的最小值问题 <a href="https://www.codechef.com/problems/MINXORSEG">区间最大异或值</a> (2025.1.4)</p>
</li>
<li><p>稍微尝试着扩域，可能能够发现不合法方案一定不优 (2025.1.5)</p>
</li>
<li><p>当碰到关于圆的计算几何题时，记得多从反面去考虑，即将圆变为一个点，然后对其他图形向圆心收缩 <a href="https://www.luogu.com.cn/problem/P5525">失望至极</a> (2024.1.5)</p>
</li>
<li><p>博弈论不一定要推奇奇怪怪的式子，也有可能从最朴素的 dp 出发也能达到推出类 SG 函数的状态式，而且就大部分题目而言的话还是 dp 占大头 <a href="https://www.luogu.com.cn/problem/CF2005E2">Subtangle Game </a> (2025.1.5)</p>
</li>
<li><p>当线段树上维护当前点与左侧一个点的差时，记得每次更新一个点时还要对 <strong>右侧一个点</strong> 更新答案 <a href="https://www.luogu.com.cn/problem/P5278">琪露诺大战等差数列</a> (2025.1.6)</p>
</li>
<li><p>当遇到序列上改变一个元素，会对其他元素相互间有影响的时候，最好把所有可能的情况都更新一遍，有时候同种类型的元素之间也会产生影响 (2025.1.6)</p>
</li>
<li><p>当遇见是否完全包含某类区间的问题时，找出是否有完全包含某区间，但是产生贡献相同的情况，将较大那一方删掉(因为一定不优)，借此减小询问复杂度或修改复杂度 <a href="https://www.luogu.com.cn/problem/P6617">垃圾桶爱情故事</a> (2025.1.6)</p>
</li>
<li><p>对于区间推平，每时刻都有位置加上定值(每个点加上的值不一定相等)的问题，可以对查询区间内上次修改时间不同的子区间全部查询一遍，因为最后推平所以时间复杂度不变 (2025.1.6)</p>
</li>
<li><p>对于区间每时刻加，加后有上限的问题，可以将所有数分为“已经爆仓”和“没有爆仓”两部分，计算出每个点经过 $a_i$ 秒会变爆仓，设上次修改时间为 $x_i$ ，当前时间为 $T$ ，那么判定他爆仓的标准即为 $T-x_i \ge a_i$ ，变为一个二维数点问题 <a href="https://www.luogu.com.cn/problem/CF453E">Little Pony and Lord Tirek</a> (2025.1.6)</p>
</li>
<li><p>问凸包的形成问题，考虑 dp，但这样的转移是无序的，因为是个凸包，所有可以考虑极角排序，最后边回到起始位置时一定构成凸包 <a href="https://www.luogu.com.cn/problem/CF1146H">五个点凸包？一辈子乐队！</a> (2025.1.6)</p>
</li>
<li><p>嘻嘻我是第三百条 tips (2077.1.6)</p>
</li>
<li><p>遇见分割凸包的问题时，考虑使用区间 dp 将其分割为若干个子问题解决，由于凸包的特性，无论怎么分都相当于序列分割问题，注意枚举的中点 $k$ 不代表“在此处分割”，而代表着“从将该点左右两侧的凸包合并” (2025.1.6)</p>
</li>
<li><p>二维数点问题也要注意是否需要开 long long (2025.1.7)</p>
</li>
<li><p>2-Sat 中可以通过向自己的反连边的方式代表某个点不能被选择 (2025.1.7)</p>
</li>
<li><p>产生对立事件时，无法使用拓扑序推出 2-sat 方案，此时可以使用拓扑排序跑SCC的反图求解答案 <a href="https://www.luogu.com.cn/problem/P3825">[NOI2017] 游戏</a> (2025.1.7)</p>
</li>
<li><p>在2Sat中，记得将反向关系添加上才能保证最后方案搜索的正确性 (2025.1.7)</p>
</li>
<li><p>找到以一个点为右端点的最小区间使得区间内包含所有元素，可以用 $f_{i}&#x3D;\min\limits_{i&lt;nxt_j}j$ 来求 (2025.1.8)</p>
</li>
<li><p>当遇到排列问题问某数成为排列内最小值的概率时，需要额外考虑那些 <strong>已经确定比他小的数</strong> 造成的影响(具体来说，已经确定比他小的数会将其额外垫起来一部分，从而导致其概率发生改变) <a href="https://www.luogu.com.cn/problem/AT_agc060_c">堆上大小比较</a> (2025.1.9)</p>
</li>
<li><ol start="307">
<li>对于线段树优化dp的问题(例如多个区间的最大子段和)，可以考虑将其转化为 max+ 矩阵去优化求解(前提是具有线性递推性质)<a href="https://codeforces.com/problemset/problem/2042/F">两个子数组</a> (2025.1.11)</li>
</ol>
</li>
<li><p>博弈论中，盯好变与不变量，结合结束状态+不变量反推出中间过程，构造方案使得某些量一直不变且与结束状态相同，常见的不变量有和等 (2025.1.11)</p>
</li>
<li><p>博弈论问题，可以尝试将元素分组，利用二分图一类的性质，选择一边时就直接选择另一边 <a href="https://www.luogu.com.cn/problem/CF1839E">偶遇两人选数取min相减，实力强悍强如怪物，拼尽全力也无法战胜</a>(2025.1.11)</p>
</li>
<li><p>对于区间内每个数的贡献为前缀max&#x2F;min的问题，可以考虑用线段树单侧递归解决 <a href="https://www.luogu.com.cn/problem/AT_jsc2019_final_h">第一回日本最強プログラマー学生選手権決勝</a> (2025.1.12)</p>
</li>
<li><p>对于随着序列变化而递减，最后会减至 0 ，不再变化，单点修改的问题，可以考虑转化为括号匹配模型，使用单侧递归解决 <a href="https://www.luogu.com.cn/problem/P9130">第一回米国最強プログラマー乳牛選手権決勝</a>  (2025.1.12)</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E9%9A%8F%E6%9C%BA%E5%8C%96/</url>
    <content><![CDATA[<p>任意取出树上的一条路径，有大于 $\frac{1}{2}$ 的概率经过树的重心，可以通过此乱搞 <a href="https://qoj.ac/problem/5029"># 在路上</a></p>
<p>当只需要提取出一个序列的中位数&#x2F;kth元素时，可以考虑像 nth_element 一样随机一个节点，然后分治，时间复杂度是期望 $O(n)$ 的 <a href="https://qoj.ac/problem/5029"># 在路上</a></p>
<p>当图上问题转化为二分图问题更好解决时，可以考虑将图随机染色 <a href="https://www.luogu.com.cn/problem/CF1310D"># Tourism</a> ，<a href="https://loj.ac/p/3400"># 「2020-2021 集训队作业」Storm</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E9%97%B5%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E5%92%8C/</url>
    <content><![CDATA[<p>考虑对于两个几何图形 $A,B$ ，那么他们的闵可夫斯基和即为</p>
<p>$$C&#x3D;\bigcup_{a\in A,b\in B}a+b$$<br>考虑他的数学意义： $(A_x+B_x,A_y+B_y)$ ，可以利用其来做一些跟凸性相关的东西</p>
<p>例如当我们需要在两个二元组集合 $A,B$ 中分别选出一个元素，使得 $(a_x+b_x)(a_y+b_y)$ 最小时，我们可以这么考虑</p>
<p>将集合内每个点转换到坐标轴上，并对 $A,B$ 求出闵可夫斯基和，最后面的答案一定是下凸包上的点</p>
<p>由于只需要求下凸包，所以对 $A,B$ 分别求出下凸包，再跑闵可夫斯基凸包和就可以了</p>
<p>可能还有许多性质，但本质都在于将二元组的加和再乘积转化为凸包上问题</p>
<p>放到本质上来说，我们对于函数 $f_{i}&#x3D;\max_{j}{g_j + h_{i-j} }$ (max+卷积)，若有 $g_{i},h_{i}$ 都为凸函数，则最终的 $f_i$ 为 $g_i,h_i$ 的闵可夫斯基凸包和</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E8%BF%9E%E9%80%9A%E6%80%A7%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="2-SAT"><a href="#2-SAT" class="headerlink" title="2-SAT"></a>2-SAT</h2><p>当遇到某些选择只有两种变化，问合法方案的题目，考虑使用 2-sat解决 <a href="https://www.luogu.com.cn/problem/P6965">毛子老哥重量级建图技巧题</a> </p>
<p>通过向自己的反连边的方式代表某个点不能被选择 </p>
<h2 id="环"><a href="#环" class="headerlink" title="环"></a>环</h2><p>无向图无权图上找最小环，可以考虑枚举每个点作为环上一端点，然后bfs处理 $dep$ ，在发现已访问的节点后更新答案，保证不走重复边即可，这样子跑一遍是 $O(n+m)$ 的，当发现实际环的代表元端点数量很少时，可以暴力枚举 <a href="https://www.luogu.com.cn/problem/CF1325E"># CF1325E Ehab’s REAL Number Theory Problem</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E9%9D%9E%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E9%85%8D%E5%AF%B9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3586"># LOG</a></p>
<p>判断方法：将所有元素对当前值取min，判断和是否大于当前值乘配对数即可</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E7%AE%97%E6%B3%95/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
    <content><![CDATA[<h2 id="模拟费用流-："><a href="#模拟费用流-：" class="headerlink" title="[[模拟费用流]]："></a>[[模拟费用流]]：</h2><h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>$$最大流 \Rightarrow 平面图最小割 \Rightarrow 对偶图最短路$$<br>$$二分图最小路径覆盖 \Rightarrow 最大独立集 \Rightarrow N-最大匹配$$</p>
<p>对于代价随着时间的变化而增长，满足条件后停止增长的问题，可以考虑把每一时刻的代价表示为每一时刻未满足条件的代价的和 <a href="https://www.luogu.com.cn/problem/UVA1336">修缮长城</a> ，或是将每一段的代价乘上未来累计所需的时间 <a href="https://www.luogu.com.cn/problem/P2053">修车</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E9%A2%98%E8%A7%A3/AT_awtf2024_d%20Almost%20Bubble%20Sort%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>考虑这么证明：</p>
<p>将所有点绘制到一个坐标系上，若一个点被选择了，则我们称其为 $1$ </p>
<p>结论：当我们有 $i &lt; j,p_{i} &gt; p_{j}$ 且 $i$ 被选择，则 $j$ 一定被选择</p>
<p>我们考虑这么证明：若 $j$ 被选择，则一定能够构造出一种新的方案使得其比当前方案更优</p>
<p>使用反证法，不妨设当前是最优答案且答案中存在两位置 $i,j$ 使得 $i&lt;j,p_i&gt;p_j$ 且 $i$ 选 $j$ 不选</p>
<p>不妨找到其中使得 $p_j-p_i$ 最小的 $i,j$ ，那么他就会满足</p>
<ul>
<li>$p_i,p_j$ 中间没有比 $p_i$ 小且被选择的点</li>
<li>$p_i,p_j$ 中间没有比 $p_j$ 大且未被选择的点</li>
<li>没有值在 $i，j$ 中间的元素</li>
</ul>
<p>发现这样就将整个平面分割为了九个部分，我们分别将其称为</p>
<p>$$\begin{array}{a|a|a|a}<br>\hline 1 &amp; 2 &amp; 3 \<br>\hline 4 &amp; 5 &amp; 6 \<br>\hline 7 &amp; 8 &amp; 9 \<br>\hline<br>\end{array}$$<br>考虑让 $i,j$ 选择反转，计算每一部分的贡献</p>
<ul>
<li>$(1,0),1 \rightarrow 0$</li>
<li>$(4,0),1 \rightarrow 0$</li>
<li>$(7,0),0 \rightarrow 0$</li>
<li>$(2,0),1 \rightarrow 0$</li>
<li>$(8,0),1 \rightarrow 1$</li>
<li>$(3,0),1 \rightarrow 1$</li>
<li>$(1,1),2 \rightarrow 2$</li>
<li>$(7,1),1 \rightarrow 1$</li>
<li>$(2,1),1 \rightarrow 1$</li>
<li>$(8,1),1 \rightarrow 0$</li>
<li>$(3,1),0 \rightarrow 0$</li>
<li>$(6,1),1 \rightarrow 0$</li>
<li>$(9,1),1 \rightarrow 1$</li>
</ul>
<p>然后你发现每一位要么不变，要么变小，再加上本次操作后一定会 $-1$ ，于是我们就构造出了一种方案使得答案比当前答案更小，与假设相悖，所以得证</p>
<p>故最终答案中一定不存在 $i&lt;j,p_i&gt;p_j$ 且 $i$ 被选择的情况，故我们可以推出当 $i$ 被选择时，$j$ 一定选择  </p>
<p>然后我们就可以拆贡献，考虑计算当一个点被选择时能够产生的贡献</p>
<p>此时以此为原点绘制平面直角坐标系，则第一象限的 $0$ 点会产生 $1$ 的贡献，第二象限的 $0$ 会产生 $-1$ 的贡献，第三象限的 $1$ 会产生 $-1$ 的贡献，第四象限的 $1$ 会产生 $1$ 的贡献</p>
<p>这样要同时讨论 $0,1$ 两种点，有点麻烦，不妨在一开始就加上每个点一二象限的贡献，转化成一三象限会产生 $1$ 的贡献，二四象限会产生 $-1$ 的贡献</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E9%A2%98%E8%A7%A3/AT_cf17_final_j%20Tree%20MST%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>考虑使用 b 算法解决</p>
<p>问题就变成了：对于一个集合 $S$ ，我如何去寻找一个点 $p$ 使得 </p>
<p>$$\min_{s \in S}w_{p}+w_{s}+dis_{p,s} \le \min_{s\in S,j\not \in S \wedge j \not &#x3D; p}w_{s}+w_{j}+dis_{s,j}$$<br>我们称每个节点所属的集合为他的颜色</p>
<p>考虑启发式合并，对树上每一个点 $u$ 用一个 $set$  维护子树内每种颜色的点的 $dis_{u,p}+w_{p}$ 的最小值，额外维护所有颜色中的最小值和次小值，启发式合并的同时统计每种颜色的答案即可</p>
<p>发现其实不用启发式合并，用类似树形dp的方式上下 dfs 即可</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E9%A2%98%E8%A7%A3/P4694%20PA%202013%20Raper/</url>
    <content><![CDATA[<p>考虑将每次的决策分为两部分：从左往右的以及从右往左的</p>
<p>额外记录一个 $f_i,g_i$ 表示 $a_i,b_i$ 是否被选择</p>
<p>对于从左往右的，直接线段树上分治即可</p>
<p>对于从右往左的，我们考虑记录一个 $h_i$ 表示 $i+1$ 到 $i$ 的反向边的流量</p>
<p>考虑记录区间前缀的最大联通 $b_i$ ，区间后缀的最大联通 $a_i$ ，区间内最大的从右到左段的大小，区间从右往左方案中的最大值</p>
<p>因为区间内 $h_i$ 非负，所以只需要记录区间内 $Min$ 为 $0$ 以及 $Min$ 非 $0$ 的情况即可</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E9%A2%98%E8%A7%A3/P7486%20%E3%80%8CStoi2031%E3%80%8D%E5%BD%A9%E8%99%B9%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>没啥好说的，暴解</p>
<p>$$\begin{eqnarray}<br>&amp;&amp; \prod_{i&#x3D;l}^{r}\prod_{j&#x3D;l}^{r} \frac{ij}{gcd(i,j)}^{\frac{ij}{gcd(i,j)}} \<br>\end{eqnarray}$$<br>设 $f(x,y)&#x3D;\prod_{i&#x3D;1}^{x}\prod_{j&#x3D;1}^{y} \frac{ij}{gcd(i,j)}^{\frac{ij}{gcd(i,j)}}$</p>
<p>那么答案则为</p>
<p>$$\frac{f(r,r)f(l-1,l-1)}{f(l-1,r)f(r,l-1)}$$</p>
<p>$$\begin{eqnarray}</p>
<p>f(x,y)&amp;&#x3D;&amp;\prod_{i&#x3D;1}^{x}\prod_{j&#x3D;1}^{y} \frac{ij}{gcd(i,j)}^{\frac{ij}{gcd(i,j)}}\<br>&amp;&#x3D;&amp;\prod_{d&#x3D;1}^{y}\prod_{i&#x3D;1}^{x}\prod_{j&#x3D;1}^{y} \frac{ij}{d}^{\frac{ij}{d}[gcd(i,j)&#x3D;d]}\<br>&amp;&#x3D;&amp;\prod_{d&#x3D;1}^{y}\prod_{i&#x3D;1}^{\left\lfloor\frac{x}{d}\right\rfloor}\prod_{j&#x3D;1}^{\left\lfloor\frac{y}{d}\right\rfloor} dij^{dij[gcd(i,j)&#x3D;1]}\<br>&amp;&#x3D;&amp;\prod_{d&#x3D;1}^{y}\prod_{i&#x3D;1}^{\left\lfloor\frac{x}{d}\right\rfloor}\prod_{j&#x3D;1}^{\left\lfloor\frac{y}{d}\right\rfloor} dij^{dij\sum\limits_{p \mid gcd(i,j)}\mu(p)}\<br>&amp;&#x3D;&amp;\prod_{d&#x3D;1}^{y}\prod_{i&#x3D;1}^{\left\lfloor\frac{x}{d}\right\rfloor}\prod_{j&#x3D;1}^{\left\lfloor\frac{y}{d}\right\rfloor} dij^{dij\sum\limits_{p&#x3D;1}^{\left\lfloor \frac{y}{d} \right\rfloor}\mu(p)[p \mid i][\mid j]}\<br>&amp;&#x3D;&amp;\prod_{d&#x3D;1}^{y}\prod\limits_{p&#x3D;1}^{\left\lfloor \frac{y}{d} \right\rfloor}\prod_{i&#x3D;1}^{\left\lfloor\frac{x}{dp}\right\rfloor}\prod_{j&#x3D;1}^{\left\lfloor\frac{y}{dp}\right\rfloor} (ijdp^2)^{ijdp^2\mu(p)}\<br>&amp;&#x3D;&amp;\prod_{T&#x3D;1}^{y}\prod\limits_{p\mid T}\prod_{i&#x3D;1}^{\left\lfloor\frac{x}{T}\right\rfloor}\prod_{j&#x3D;1}^{\left\lfloor\frac{y}{T}\right\rfloor} (ijTp)^{ijTp\mu(p)}\<br>&amp;&#x3D;&amp;\prod_{T&#x3D;1}^{y}\prod\limits_{p\mid T}\left(\prod_{i&#x3D;1}^{\left\lfloor\frac{x}{T}\right\rfloor}\prod_{j&#x3D;1}^{\left\lfloor\frac{y}{T}\right\rfloor} (ij)^{ij}\times(Tp)^{S(\left\lfloor\frac{x}{T}\right\rfloor)S(\left\lfloor\frac{y}{T}\right\rfloor)}\right)^{Tp\mu(p)}\</p>
<p>\end{eqnarray}$$<br>不妨设 $g(x,y)&#x3D;\prod_{i&#x3D;1}^{x}\prod_{j&#x3D;1}^{y} (ij)^{ij},D(x)&#x3D;\prod_{i&#x3D;1}^{x}i^i$ ，那么有</p>
<p>$$g(x,y)&#x3D;D(x)^{S_{y}} \times D(y)^{S_{x}}$$<br>将其替换</p>
<p>$$\begin{eqnarray}<br>&amp;&#x3D;&amp;\prod_{T&#x3D;1}^{y}\prod\limits_{p\mid T}\left(g\left(\left\lfloor \frac{x}{T} \right\rfloor,\left\lfloor \frac{y}{T} \right\rfloor\right) \times(Tp)^{S(\left\lfloor\frac{x}{T}\right\rfloor)S(\left\lfloor\frac{y}{T}\right\rfloor)}\right)^{Tp\mu(p)}\</p>
<p>\end{eqnarray}$$<br>不妨设 $h(x)&#x3D;\sum_{d \mid x}d\mu(d),w(x)&#x3D;\prod_{d \mid x}d^{d\mu(d)}$，那么有</p>
<p>$$\begin{eqnarray}<br>&amp;&#x3D;&amp;\prod_{T&#x3D;1}^{y}\left(g\left(\left\lfloor \frac{x}{T} \right\rfloor,\left\lfloor \frac{y}{T} \right\rfloor\right)^{Th(T)}(T^{h(T)}\prod\limits_{p\mid T}p^{p\mu(p)})^{TS(\left\lfloor\frac{x}{T}\right\rfloor)S(\left\lfloor\frac{y}{T}\right\rfloor)}\right)\<br>&amp;&#x3D;&amp;\prod_{T&#x3D;1}^{y}g\left(\left\lfloor \frac{x}{T} \right\rfloor,\left\lfloor \frac{y}{T} \right\rfloor\right)^{Th(T)}\left(T^{h(T)}w(T)\right)^{TS(\left\lfloor\frac{x}{T}\right\rfloor)S(\left\lfloor\frac{y}{T}\right\rfloor)}\</p>
<p>\end{eqnarray}$$<br>最后再设 $E(x)&#x3D;\left(T^{h(T)}w(T)\right)^T,H(x)&#x3D;Th(T)$ ，就变成了</p>
<p>$$\begin{eqnarray}</p>
<p>&amp;&#x3D;&amp;\prod_{T&#x3D;1}^{y}g\left(\left\lfloor \frac{x}{T} \right\rfloor,\left\lfloor \frac{y}{T} \right\rfloor\right)^{Th(T)}E(T)^{S(\left\lfloor\frac{x}{T}\right\rfloor)S(\left\lfloor\frac{y}{T}\right\rfloor)}\</p>
<p>\end{eqnarray}$$</p>
<p>于是我们需要预处理以下东西</p>
<p>$h(i),E(i)$ 的前缀和</p>
<p>$D(i),w(i)$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E9%A2%98%E8%A7%A3/P7907%20Ynoi2005%20rmscne%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>很妙的思路转换</p>
<p>显然扫描线，一个很自然的想法是用数据结构维护 $f_i$ 表示左端点为 $i$ 时…的答案，然后单点查询，但是我们发现当 $l$ 不同时，其对应的答案其实也是不好维护的</p>
<p>考虑这么转换，假设查询区间为 $[l,r]$ ，其内部有一个子区间 $[l’,r’]$ ，那么合法的 $l’$ 一定是 $[l,r]$ 的一段前缀，发现通过这么转化可以成功的将单点查询转化为区间查询</p>
<p>这样有什么好处呢？首先我们可以二分得到这个前缀的具体区间，接下来对于这个前缀内的每个 $l’$ 一定能够找到一个对应的 $r’$ 使得其合法，所以说即使对于不同的 $l$ ，只要其被包含在前缀区间内，那么他的答案都是相同的，记其为 $f_i$ ，那么我们最后要求的其实就是</p>
<p>$$\min_{p \in [l_e,r_e]}f_{p}-p+1$$<br>然后我们发现当我们对应的 $r \leftarrow r+1$ 时，我们只需要更新 $i \in [las_{a_r},r]$ 的 $f_{i}\leftarrow r$ 即可 </p>
<p>然后就做完了</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E6%96%87%E5%8C%96%E8%AF%BE%E4%B8%93%E6%A0%8F/</url>
    <content><![CDATA[<h2 id="化学-："><a href="#化学-：" class="headerlink" title="[[化学]]："></a>[[化学]]：</h2><h2 id="物理-："><a href="#物理-：" class="headerlink" title="[[物理]]："></a>[[物理]]：</h2><h2 id="生物-："><a href="#生物-：" class="headerlink" title="[[生物]]："></a>[[生物]]：</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%97%A0%E6%9C%BA%E7%89%A9/KMnO4/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%97%A0%E6%9C%BA%E7%89%A9/%E5%8D%A4%E7%B4%A0%E5%8D%95%E8%B4%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%97%A0%E6%9C%BA%E7%89%A9/%E5%8D%A4%E9%85%B8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E5%8D%A4%E4%BB%A3%E7%83%83/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>‌卤代烃是烃分子中的氢原子被 [[卤素]]原子（氟、氯、溴、碘）取代后生成的化合物</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E5%AE%98%E8%83%BD%E5%9B%A2/</url>
    <content><![CDATA[<h3 id="常见官能团："><a href="#常见官能团：" class="headerlink" title="常见官能团："></a>常见官能团：</h3><ol>
<li>[[烯烃]]</li>
<li>[[炔烃]]</li>
<li>[[醇]]</li>
<li>[[卤代烃]]</li>
<li>[[甲基]]</li>
<li>[[乙基]]</li>
<li>[[醚键]]</li>
<li>[[醛基]]</li>
<li>[[羧基]]</li>
<li>[[酯基]]</li>
<li>[[肽键]]</li>
<li>[[苯]]</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E6%BA%B4%E8%8B%AF/</url>
    <content><![CDATA[<p>无色液体，不溶于水，特殊气味</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>与水反应，发生分液<br>对于水层，成分为 [[HBr]] 和 [[FeBr3]]<br>对于有机层，成分为 [[溴苯]] ，[[苯]] 和 [[溴]]</p>
<p>对有机层用 5%的 [[NaOH]] 溶液碱洗后再次分液<br>对于水层则为 [[Br2]]<br>对于有机层则为 [[苯]] 与 [[溴苯]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E7%82%94%E7%83%83/</url>
    <content><![CDATA[<h3 id="加成反应"><a href="#加成反应" class="headerlink" title="加成反应"></a>加成反应</h3><p>能与 [[H2O]],[[卤素单质]]，[[卤酸]],[[氰化氢]] 发生加成反应</p>
<h3 id="加聚反应"><a href="#加聚反应" class="headerlink" title="[[加聚反应]]"></a>[[加聚反应]]</h3><h3 id="乙炔的实验室制备"><a href="#乙炔的实验室制备" class="headerlink" title="乙炔的实验室制备"></a>乙炔的实验室制备</h3><p>电石(CaC2)与水反应</p>
<h3 id="燃烧"><a href="#燃烧" class="headerlink" title="燃烧"></a>燃烧</h3><p>浓烈的黑烟</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E7%83%AF%E7%83%83/</url>
    <content><![CDATA[<h3 id="加成反应"><a href="#加成反应" class="headerlink" title="加成反应"></a>加成反应</h3><p>能与 [[H2O]],[[卤素单质]]，[[卤酸]],[[氰化氢]] 发生加成反应</p>
<h3 id="加聚反应"><a href="#加聚反应" class="headerlink" title="[[加聚反应]]"></a>[[加聚反应]]</h3><h3 id="氧化反应"><a href="#氧化反应" class="headerlink" title="氧化反应"></a>氧化反应</h3><p>能被 [[KMnO4]] 等氧化为 [[CO2]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E7%94%B2%E5%9F%BA/</url>
    <content><![CDATA[<h3 id="化学性质"><a href="#化学性质" class="headerlink" title="化学性质"></a>化学性质</h3><p>[[苯]] 上的甲基能够被 [[KMnO4]] 氧化为 [[羧基]]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E7%94%B2%E5%9F%BA%E8%8B%AF/</url>
    <content><![CDATA[<p>[[苯]] 上接 [[甲基]]</p>
<h3 id="与卤素相关反应"><a href="#与卤素相关反应" class="headerlink" title="与卤素相关反应"></a>与卤素相关反应</h3><ol>
<li>与 [[卤素单质]] 在光照的条件下将 [[甲基]] 上的一个氢替换为卤素</li>
<li>与 [[卤素单质]] 在 [[FeBr2]] 的催化下将苯环上的一个氢替换为卤素</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E7%A1%9D%E5%9F%BA%E8%8B%AF/</url>
    <content><![CDATA[<p>无色液体，不溶于水，苦杏仁气味</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E7%A1%9D%E5%9F%BA/</url>
    <content><![CDATA[<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>[[苯]] 与 硝酸的反应</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E7%BE%A7%E5%9F%BA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%9C%89%E6%9C%BA%E7%89%A9/%E9%86%87/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%9A%E4%B9%89/%E5%90%8C%E7%B3%BB%E7%89%A9/</url>
    <content><![CDATA[<p>是指结构相似、分子组成相差若干个“CH2”原子团的有机化合物<br>一般出现在有机化学中，且必须是同一类物质（含有相同且数量相等的官能团，羟基例外，酚和醇不能成为同系物</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%9A%E4%B9%89/%E5%AE%98%E8%83%BD%E5%9B%A2%E7%9A%84%E5%BC%95%E5%85%A5/</url>
    <content><![CDATA[<h4 id="卤原子引入"><a href="#卤原子引入" class="headerlink" title="卤原子引入"></a>卤原子引入</h4><p>[[烷烃]] 取代</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E5%8C%96%E5%AD%A6/%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%9A%E4%B9%89/%E6%9C%89%E6%9C%BA%E5%90%88%E6%88%90/</url>
    <content><![CDATA[<ol>
<li>[[官能团的引入]]</li>
<li>[[碳链的构建]]</li>
<li>[[官能团的保护]]</li>
<li>[[基团间的影响]]</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E4%BA%A4%E5%8F%98%E7%94%B5%E6%B5%81/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E5%88%86%E5%AD%90%E9%80%9F%E7%8E%87%E5%88%86%E5%B8%83%E8%A7%84%E5%BE%8B/</url>
    <content><![CDATA[<p>温度越高，热运动越剧烈，峰值越靠右，但不是所有分子的运动速率都加快</p>
<p>无论温度高低，速率很大，速率很小的永远都是少数</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E5%88%86%E5%AD%90%E5%8A%A8%E8%83%BD/</url>
    <content><![CDATA[<p>分子总动能：所有分子动能的总和</p>
<p>分子平均动能：分子总动能的平均值</p>
<p>温度：衡量平均动能的值</p>
<p>注意：分子动能与动能无关</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E6%89%A9%E6%95%A3%E7%8E%B0%E8%B1%A1%E4%B8%8E%E5%B8%83%E6%9C%97%E8%BF%90%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="布朗运动"><a href="#布朗运动" class="headerlink" title="布朗运动"></a>布朗运动</h2><p>定义：悬浮在液体&#x2F;气体中的微粒&#x2F;颗粒所做的无规则运动</p>
<p>根本原因：液体或气体分子对微粒的无规则热运动(宏观运动，可以被观察到)</p>
<p>影响因素：温度越高越显著</p>
<p>意义：间接的反映了气体或液体分紫的无规则运动</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E6%B2%B9%E8%86%9C%E6%B3%95%E4%BC%B0%E7%AE%97%E6%B2%B9%E6%BB%B4%E5%88%86%E5%AD%90%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<p>考虑在水面上形成单分子油层，假设加入的体积为 $V$ ，油滴在水面上的面积为 $S$，那么有油滴分子的直径 $d&#x3D;\frac{V}{S}$ (理想模型：油滴分子为单分子油膜，分子间无间隙)</p>
<h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="1-装水，撒粉："><a href="#1-装水，撒粉：" class="headerlink" title="1. 装水，撒粉："></a>1. 装水，撒粉：</h3><p>用浅盘装入约 $2cm$ 深的水，将石膏粉或痱子粉均匀的撒到水面上</p>
<h3 id="2-配溶液："><a href="#2-配溶液：" class="headerlink" title="2. 配溶液："></a>2. 配溶液：</h3><p>向 $1ml$ 油滴中滴入 $499ml$ 的酒精，得到浓度为 $\frac{1}{500}$ 的油滴溶液(稀释)</p>
<p>注意：</p>
<ol>
<li>酒精的作用：便于形成单分子油膜</li>
<li>不能取 $1ml$ 油滴和 $499ml$ 酒精来配，分子间有间隙</li>
<li>现配现用，酒精会挥发</li>
</ol>
<h3 id="3-测总体积，滴数："><a href="#3-测总体积，滴数：" class="headerlink" title="3. 测总体积，滴数："></a>3. 测总体积，滴数：</h3><p>注射器取一部分油酸酒精溶液，一滴一滴的滴入水盆中，同时记录滴的数量(便于计算每一滴的油酸体积)</p>
<h3 id="4-滴入水，描玻璃："><a href="#4-滴入水，描玻璃：" class="headerlink" title="4. 滴入水，描玻璃："></a>4. 滴入水，描玻璃：</h3><p>油酸会在水面散开，等形状稳定后将一玻璃板盖在上方，用带方格的纸描出轮廓<br>注意：</p>
<ol>
<li>痱子粉的作用：方便看清轮廓</li>
<li>格子纸的作用：方便计算面积</li>
</ol>
<h3 id="5-数格子"><a href="#5-数格子" class="headerlink" title="5. 数格子"></a>5. 数格子</h3><p>计算被油滴完全包含的格子数量，若有超过半格的则按一格来算</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E6%8E%A8%E5%87%BA%E5%AE%89%E5%9F%B9%E5%8A%9B/</url>
    <content><![CDATA[<p>首先根据定义有 $I&#x3D;\frac{Q}{t},F&#x3D;qvB\sin\theta$</p>
<p>那么对于一段导体，设其内部的自由电子电荷量为 $Q’$ ，那么有每秒运动了导体中 $\frac{I}{Q’}$ 的电子，由于导体质地均匀，故这部分电子运动了 $\frac{I}{Q’}L$ 米每秒，故电子的运动速率为 $\frac{I}{Q’}L$</p>
<p>那么最后面受到的安培力为其所有自由电子受到的洛伦兹力的总和，即</p>
<p>$$Q’ \frac{I}{Q’}LB &#x3D;BIL$$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E7%83%AD%E5%8A%9B%E5%AD%A6/</url>
    <content><![CDATA[<h2 id="油膜法估算油滴分子大小-："><a href="#油膜法估算油滴分子大小-：" class="headerlink" title="[[油膜法估算油滴分子大小]]："></a>[[油膜法估算油滴分子大小]]：</h2><h2 id="扩散现象与布朗运动-："><a href="#扩散现象与布朗运动-：" class="headerlink" title="[[扩散现象与布朗运动]]："></a>[[扩散现象与布朗运动]]：</h2><h2 id="分子速率分布规律-："><a href="#分子速率分布规律-：" class="headerlink" title="[[分子速率分布规律]]："></a>[[分子速率分布规律]]：</h2><h2 id="分子动能-："><a href="#分子动能-：" class="headerlink" title="[[分子动能]]："></a>[[分子动能]]：</h2><h2 id="热力学定律-："><a href="#热力学定律-：" class="headerlink" title="[[热力学定律]]："></a>[[热力学定律]]：</h2><h2 id="理想气体状态方程-："><a href="#理想气体状态方程-：" class="headerlink" title="[[理想气体状态方程]]："></a>[[理想气体状态方程]]：</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E7%83%AD%E5%8A%9B%E5%AD%A6%E5%AE%9A%E5%BE%8B/</url>
    <content><![CDATA[<h2 id="热力学第一定律："><a href="#热力学第一定律：" class="headerlink" title="热力学第一定律："></a>热力学第一定律：</h2><p>一个热力学系统的内能增量等于外界向他传递的热量+外界对他做的功<br>$$\Delta U&#x3D;Q+W$$</p>
<h2 id="热力学第二定律："><a href="#热力学第二定律：" class="headerlink" title="热力学第二定律："></a>热力学第二定律：</h2><p>一共有四种表述(后两种已删)：</p>
<ol>
<li>不能自发的从低温转移到高温</li>
<li>不能全部以做功的形式转化为机械能(一定会产生损耗)</li>
<li>系统自发的向无序性增加的方向变化</li>
<li>系统总熵不会减少</li>
</ol>
<h2 id="热力学第三定律："><a href="#热力学第三定律：" class="headerlink" title="热力学第三定律："></a>热力学第三定律：</h2><p>物体永远不可能冷却到绝对0度</p>
<p>本质：分子运动永不停息</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E7%89%A9%E7%90%86/</url>
    <content><![CDATA[<h2 id="电磁学-："><a href="#电磁学-：" class="headerlink" title="[[电磁学]]："></a>[[电磁学]]：</h2><h2 id="热力学-："><a href="#热力学-：" class="headerlink" title="[[热力学]]："></a>[[热力学]]：</h2><h2 id="光学-："><a href="#光学-：" class="headerlink" title="[[光学]]："></a>[[光学]]：</h2><h2 id="交变电流-："><a href="#交变电流-：" class="headerlink" title="[[交变电流]]："></a>[[交变电流]]：</h2><h3 id="近代物理-："><a href="#近代物理-：" class="headerlink" title="[[近代物理]]："></a>[[近代物理]]：</h3>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E7%90%86%E6%83%B3%E6%B0%94%E4%BD%93%E7%8A%B6%E6%80%81%E6%96%B9%E7%A8%8B/</url>
    <content><![CDATA[<p>$$\frac{pV}{T}&#x3D;C  \longrightleftharpoons pV&#x3D;nRT$$</p>
<p>$C$ 是与压强 $p$ ，体积 $V$ ，温度 $T$ 无关的常量，他与气体的质量，种类有关</p>
<p>注：$T$ 要用热力学温度</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E7%94%B5%E5%9C%BA/</url>
    <content><![CDATA[<h2 id="库仑定律"><a href="#库仑定律" class="headerlink" title="库仑定律"></a>库仑定律</h2><p>真空中两个静止点电荷 $Q_1,Q_2$ ,他们之间有</p>
<p>$$ F_{库}&#x3D;k\frac{Q_1Q_2}{r^2} $$<br>其中 $k \approx 9 \times 10^9 N \cdot m^2&#x2F;C^2$ 代表静电力常数</p>
<h2 id="电场强度"><a href="#电场强度" class="headerlink" title="电场强度"></a>电场强度</h2><p>定义：试探电荷在电场中所受的力与其所带电荷量的比值$$E&#x3D;\frac{F}{q}$$<br>在图像上，有电场线越密，场强越强</p>
<p>点电荷的场强：$E&#x3D;k\frac{q}{r^2}$</p>
<h2 id="电势"><a href="#电势" class="headerlink" title="电势"></a>电势</h2><p>定义：电场中试探电荷与电势能的比值(标量)$$\varphi&#x3D;\frac{E_p}{q}$$<br>等势面：等势面与电场线处处垂直，带电粒子在同一条等势线上移动不做功</p>
<h2 id="电势能"><a href="#电势能" class="headerlink" title="电势能"></a>电势能</h2><p>$$E_{p}&#x3D;\varphi q$$</p>
<h2 id="电场对带电粒子做的功"><a href="#电场对带电粒子做的功" class="headerlink" title="电场对带电粒子做的功"></a>电场对带电粒子做的功</h2><p>利用功能关系：$W&#x3D;U q&#x3D;qEd$<br>利用功能关系：$W&#x3D;E_t-E_s$</p>
<h2 id="电容器"><a href="#电容器" class="headerlink" title="电容器"></a>电容器</h2><p>定义式：$C&#x3D;\frac{Q}{U}$</p>
<p>决定式：$C&#x3D;\frac{\epsilon S}{4\pi kd}$，其中 $\epsilon$ 代表相对介电常数，$S$ 代表两电极板间对位面积，$d$ 代表两极板间距离</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E7%A3%81%E5%9C%BA/</url>
    <content><![CDATA[<h2 id="安培定则"><a href="#安培定则" class="headerlink" title="安培定则"></a>安培定则</h2><p>又称右手螺旋定则</p>
<p>用右手握紧通电直导线，<strong>拇指</strong>方向指向电流方向，则<strong>手指</strong>方向则为产生的磁场方向</p>
<p>用右手握紧通电螺线管，<strong>手指</strong>方向指向电流方向，则<strong>拇指</strong>方向则为产生的磁场方向</p>
<h2 id="左手定则"><a href="#左手定则" class="headerlink" title="左手定则"></a>左手定则</h2><p>用于判断通电导体在磁场中受力的方向</p>
<p>伸出左手，让磁感线穿过手心，手指方向指向电流方向，则拇指方向为安培力方向</p>
<h2 id="安培力"><a href="#安培力" class="headerlink" title="安培力"></a>安培力</h2><p>通电导体在磁场中所受到的力<br>$$F&#x3D;BIL$$<br>其中 $B$ 代表磁感应强度，$I$ 为电流大小，$L$ 为导体在磁感应强度面上的投影长度</p>
<p>注：所有部分都处于同一磁场中的物体，不会受到安培力</p>
<h2 id="洛伦兹力"><a href="#洛伦兹力" class="headerlink" title="洛伦兹力"></a>洛伦兹力</h2><p>与安培力的关系：$$安培力 \mathop{\longrightleftharpoons}_{微观实质}^{宏观表现} 洛伦兹力$$<br>定义：带电运动粒子在磁场中受到的力<br>$$F&#x3D;qvBsin{\theta}$$</p>
<p>从这个角度就可以[[推出安培力]]了</p>
<h2 id="楞次定律"><a href="#楞次定律" class="headerlink" title="楞次定律"></a>楞次定律</h2><p>感应电流总有以下的性质：其产生的磁场一定要阻碍引起感应电流的磁通量变化</p>
<h2 id="电动势"><a href="#电动势" class="headerlink" title="电动势"></a>电动势</h2><p>有法拉第电磁感应定律：$E&#x3D;\frac{\Delta \phi}{\Delta t}$</p>
<p>对于切割磁感线的导体，有 $$\begin{eqnarray} \Delta\phi &amp;&#x3D;&amp; B\Delta S&#x3D;BLvt   \ E&amp;&#x3D;&amp;BLv \ \end{eqnarray}$$</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E8%BF%91%E4%BB%A3%E7%89%A9%E7%90%86/</url>
    <content><![CDATA[<h2 id="黑体"><a href="#黑体" class="headerlink" title="黑体"></a>黑体</h2><p>如果某种物体能够完全吸收电磁波而不反射电磁波，这种物体就叫“绝对黑体”，简称黑体</p>
<p>注：黑体可以发出电磁波，只是不反射电磁波</p>
<p>对不同温度下电磁波的</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%89%A9%E7%90%86/%E7%94%B5%E7%A3%81%E5%AD%A6/</url>
    <content><![CDATA[<p>注意需要对电场与磁场分辨分析</p>
<p>磁场常与运动相关，而电场往往可以视作随位置变化的力</p>
<h2 id="电场-："><a href="#电场-：" class="headerlink" title="[[电场]]："></a>[[电场]]：</h2><h2 id="磁场-："><a href="#磁场-：" class="headerlink" title="[[磁场]]："></a>[[磁场]]：</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%94%9F%E7%89%A9/%E5%8A%A8%E7%89%A9%E7%BB%86%E8%83%9E%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p>定义：从动物体中提取出相关组织，分散成若干个单一细胞，然后在适宜的条件下让这些细胞生长和增值的技术</p>
<h3 id="动物细胞培养："><a href="#动物细胞培养：" class="headerlink" title="动物细胞培养："></a>动物细胞培养：</h3><p>取材：取自胚胎或刚出生不久的幼龄动物的组织或器官(细胞增殖能力强)</p>
<p>分散成单个细胞培养的原因：与大块组织相比，分散为单个细胞后更好培养，细胞所需的营养更好供应，其代谢产物更好排出，另外可以使细胞水平的其他技术得以实现，一般用机械的方法，胰蛋白酶，胶原蛋白酶来分散</p>
<p>细胞贴壁：<br>   体内培养的细胞可以分为两大类：一类可以悬浮在培养液中繁殖，另一类则需要贴附于某些基质表面才可以生长增殖，大多数细胞属于这种类型，这类细胞往往要贴附于培养瓶壁上，这种现象成为细胞贴壁，需要满足培养瓶或培养皿无毒，光滑，易粘附</p>
<p>接触抑制：<br>   贴壁细胞生长到互相接触(一层)时，细胞就会停止分裂增殖的现象(癌细胞无接触抑制现象，可形成多层细胞)</p>
<h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ol>
<li>取动物组织块</li>
<li>切碎组织</li>
<li>用胰蛋白酶等处理分散为单个细胞</li>
<li>制成细胞悬液，转入培养液中进行原代培养</li>
<li>对贴满瓶壁的细胞使用胰蛋白酶，再次分散为单个细胞</li>
<li>分瓶，进行传代培养</li>
</ol>
<p>原代培养：分瓶前的培养过程，即动物组织块的初次培养过程</p>
<p>传代培养：将分瓶后的细胞培养称为传代培养，对于悬浮于培养液的细胞可以直接用离心法处理，对于贴壁细胞则需要用胰蛋白酶等进行处理，使其变为单个细胞，然后将收集到的细胞制成细胞悬液，分瓶处理</p>
<h4 id="干细胞培养及其应用"><a href="#干细胞培养及其应用" class="headerlink" title="干细胞培养及其应用"></a>干细胞培养及其应用</h4><p>分布：早期胚胎，骨髓和脐带血等多种组织和器官中<br>类型：胚胎干细胞，成体干细胞等</p>
<p>胚胎干细胞：<br>   存在于早期胚胎中，具有分化为成年动物体中任意一种细胞，并进一步形成机体中的所有组织和器官的潜能</p>
<p>成体干细胞：<br>   成体组织内的干细胞，包括骨髓中的造血干细胞，神经系统中的神经干细胞 和 睾丸中的精原干细胞等</p>
<h3 id="动物细胞融合"><a href="#动物细胞融合" class="headerlink" title="动物细胞融合"></a>动物细胞融合</h3><p>定义：两个或多个动物细胞结合形成一个细胞的过程，也成为细胞杂交</p>
<p>原理：细胞膜的流动性</p>
<p>诱导方法：PEG融合法(聚乙二醇)，电融合法和灭活病毒诱导法</p>
<p>意义：突破了有性杂交的局限性，使远缘杂交成为可能</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%94%9F%E7%89%A9/%E5%8F%91%E9%85%B5%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="1-培养基"><a href="#1-培养基" class="headerlink" title="1. 培养基"></a>1. 培养基</h3><p>人们按照微生物对营养物质的需求不同，配置出的供其生长繁殖的基本物质，用于培养，分离，鉴定或保存微生物及其代谢物</p>
<h3 id="2-培养基的营养构成和配置原则"><a href="#2-培养基的营养构成和配置原则" class="headerlink" title="2. 培养基的营养构成和配置原则"></a>2. 培养基的营养构成和配置原则</h3><h4 id="营养构成"><a href="#营养构成" class="headerlink" title="营养构成"></a>营养构成</h4><p>一般而言都离不开以下几种：水，碳源，氮源，无机盐<br>不同营养基还要满足不同微生物生长对pH，特殊营养物质以及氧气的需求</p>
<p>碳源：</p>
<ol>
<li>无机含碳化合物：二氧化碳，碳酸盐等</li>
<li>有机天然化合物：葡萄糖，牛肉膏，蛋白质等<br>氮源：</li>
<li>无机含氮物质：氮气，铵盐，硝酸盐，亚硝酸盐等</li>
<li>有机含氮物质：蛋白质及其各种降解产物，嘌呤，嘧啶等</li>
</ol>
<h4 id="配置原则"><a href="#配置原则" class="headerlink" title="配置原则"></a>配置原则</h4><ol>
<li>目的明确</li>
<li>营养协调</li>
<li>pH适宜(菌类偏酸，其他偏中性或碱性)</li>
</ol>
<h3 id="3-培养基种类"><a href="#3-培养基种类" class="headerlink" title="3. 培养基种类"></a>3. 培养基种类</h3><h4 id="选择培养基"><a href="#选择培养基" class="headerlink" title="选择培养基"></a>选择培养基</h4><p>特殊成分：加入某些化学物质<br>目的：抑制其他微生物生长，促进目标微生物的生长<br>用途：培养，分离某些微生物</p>
<h4 id="鉴别培养基"><a href="#鉴别培养基" class="headerlink" title="鉴别培养基"></a>鉴别培养基</h4><p>特殊成分：指示剂或化学药品<br>目的：与微生物代谢物或培养基中的某些成分反应<br>用途：鉴别不同的微生物</p>
<h3 id="无菌技术"><a href="#无菌技术" class="headerlink" title="无菌技术"></a>无菌技术</h3><p>定义：培养微生物的操作中，所有防止杂菌的方法<br>关键：防止外来杂菌的污染</p>
<h4 id="消毒和灭菌的区别"><a href="#消毒和灭菌的区别" class="headerlink" title="消毒和灭菌的区别"></a>消毒和灭菌的区别</h4><p>消毒：较为温和的方法<br>仅杀死物体表面或内部的部分对人体有害的微生物<br>如煮沸，巴氏，紫外线化学药物</p>
<p>消毒：较为强烈的理化因素<br>杀死物体内外所有微生物，包括芽孢和孢子<br>如灼烧灭菌，干热灭菌，高温蒸汽灭菌</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%94%9F%E7%89%A9/%E5%9F%BA%E5%9B%A0%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p>定义：按照人们的愿望，通过转基因等技术，赋予生物新的遗传性质</p>
<h3 id="限制性内切核酸酶-限制酶"><a href="#限制性内切核酸酶-限制酶" class="headerlink" title="限制性内切核酸酶(限制酶)"></a>限制性内切核酸酶(限制酶)</h3><p>来源：主要是从原核生物中分离钝化出来的</p>
<p>功能：能够识别双链DNA分子的特定核苷酸序列，并且使每一条链中特定部位的两个核苷酸的磷酸二酯键断开</p>
<p>结果：形成粘性末端或平末端</p>
<h3 id="DNA连接酶"><a href="#DNA连接酶" class="headerlink" title="DNA连接酶"></a>DNA连接酶</h3><p>作用：将双链DNA拼接起来，恢复被限制酶切开的两个核苷酸之间的磷酸二酯键</p>
<h3 id="运载体"><a href="#运载体" class="headerlink" title="运载体"></a>运载体</h3><ol>
<li>载体的作用<ol>
<li>将外源基因转移到受体细胞中去</li>
<li>利用载体在受体细胞中大量复制外源细胞</li>
</ol>
</li>
<li>具备条件<ol>
<li>能在受体细胞中稳定保存并复制</li>
<li>具有一至多个限制酶切点，供外源DNA片段切入其中</li>
<li>具有标记基因，便于重组DNA分子的筛选</li>
<li>大小合适，方便操作</li>
<li>对受体细胞无害</li>
</ol>
</li>
<li>种类：质粒，噬菌体，动植物病毒等</li>
</ol>
<h3 id="PCR的条件和过程"><a href="#PCR的条件和过程" class="headerlink" title="PCR的条件和过程"></a>PCR的条件和过程</h3><h4 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h4><ol>
<li>模板：DNA母链</li>
<li>原料：四种脱氧核苷酸(dNTP)</li>
<li>引物：使DNA聚合酶能够从引物的3’端开始连接脱氧核苷酸<ol>
<li>长度通常为20-30个脱氧核苷酸(特异性较强)</li>
<li>引物自身不应有互补序列导致其自身折叠，也不应存在互补引物</li>
<li>PCR中有两种引物(两条链)</li>
</ol>
</li>
<li>耐高温的聚合酶(Taq DNA聚合酶)</li>
<li>缓冲液，$Mg^{2+}$ ：提供合适的酸碱度和某些离子(Taq DNA聚合酶需要 $Mg^{2+}$)</li>
</ol>
<h4 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h4><ol>
<li>变性($90^\circ C$ 以上)，DNA之间氢键被破坏，断开成两条DNA单链</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%94%9F%E7%89%A9/%E6%A0%B8%E7%B3%96%EF%BC%9F%E6%A0%B8%E8%8B%B7%EF%BC%9F%E6%A0%B8%E7%B3%96%E6%A0%B8%E8%8B%B7%EF%BC%9F/</url>
    <content><![CDATA[<p>左：脱氧核糖<br>右：核糖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">C(C=O)[C@@H]([C@@H](CO)O)O</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C([C@H]([C@H]([C@H](C=O)O)O)O)O</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>核糖</strong>与<strong>碱基</strong>之间成键，形成<strong>核糖核苷</strong><br><strong>脱氧核糖</strong>与<strong>碱基</strong>之间成键，形成<strong>脱氧核糖核苷</strong></p>
<p>两者统称为 <strong>核苷</strong></p>
<hr>
<p><strong>核糖核苷</strong>与<strong>磷酸基团</strong>之间成键，形成<strong>核糖核苷酸</strong><br><strong>脱氧核糖核苷</strong>与<strong>磷酸基团</strong>之间成键，形成<strong>脱氧核糖核苷酸</strong></p>
<p>两者统称为 <strong>核苷酸</strong></p>
<hr>
<p>多个<strong>核糖核苷酸</strong>用化学键相连，得到<strong>核糖核酸</strong>(RNA)<br>多个<strong>脱氧核糖核苷酸</strong>用化学键相连，得到<strong>脱氧核糖核酸</strong>(DNA)</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%94%9F%E7%89%A9/%E6%A4%8D%E7%89%A9%E7%BB%86%E8%83%9E%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="植物组织培养："><a href="#植物组织培养：" class="headerlink" title="植物组织培养："></a>植物组织培养：</h3><p>将离体的植物器官，组织或细胞等，培养在人工配置的培养基上，给予适宜的条件，诱导其成为一棵完整植株的技术</p>
<p>原理：植物细胞具有全能性</p>
<h4 id="植物组织的培养过程"><a href="#植物组织的培养过程" class="headerlink" title="植物组织的培养过程"></a>植物组织的培养过程</h4><p>外植体(离体的组织，器官或细胞) $\mathop{\longrightarrow}\limits ^{脱分化}$ 愈伤组织 $\mathop{\longrightarrow}\limits ^{再分化}$  根，芽或胚状体 $\mathop{\longrightarrow}\limits ^{ }$ 完整植株</p>
<p>外植体：离体培养的植物组织，器官或细胞被称作外植体，一般取植物的幼嫩部位(如茎尖或花药等)</p>
<p>愈伤组织：在一定的激素和营养的等条件的诱导下，已经分化的细胞可以经过脱分化，即失去其特有的结构和功能，转变为未分化的细胞，进而形成不定形的薄壁组织团块，成为愈伤组织(高度疏松，无规则，高度液泡化)</p>
<h4 id="诱导愈伤组织："><a href="#诱导愈伤组织：" class="headerlink" title="诱导愈伤组织："></a>诱导愈伤组织：</h4><p>激素使用顺序不同，效果不同</p>
<p>先使用生长素，后使用细胞分裂素——有利于细胞分裂，但是不分化<br>先使用细胞分裂素，后使用生长素——既分裂又分化<br>同时使用——分化频率提高</p>
<p>生长素与细胞分裂素比值不同，效果不同</p>
<p>比值大——有利于根的分化，抑制芽的形成<br>比值小——有利于芽的分化，抑制根的形成<br>比值适中——醋精愈伤组织的生长</p>
<h3 id="植物体细胞杂交技术"><a href="#植物体细胞杂交技术" class="headerlink" title="植物体细胞杂交技术"></a>植物体细胞杂交技术</h3><p>概念：将不同种的植物体细胞，在一定条件下融合成杂种细胞，并将杂种细胞培育成新植物体的技术</p>
<p>注意事项：</p>
<ol>
<li>去壁方法：最常用的方法是酶解法</li>
<li>植物体细胞原生质体融合方法：必须通过人工诱导的方法<ol>
<li>物理法：电融合法，离心法等</li>
<li>化学法：聚乙二醇融合法</li>
</ol>
</li>
<li>植物体细胞完成融合的标志：细胞壁开始生长</li>
<li>细胞融合的实质：细胞核的融合</li>
<li>植物体细胞杂交的终点：形成完整植株</li>
</ol>
<p>应用：</p>
<ol>
<li>无性繁殖，快速培育优良品种</li>
<li>作物脱毒</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%94%9F%E7%89%A9/%E7%94%9F%E7%89%A9/</url>
    <content><![CDATA[<h2 id="必修一："><a href="#必修一：" class="headerlink" title="必修一："></a>必修一：</h2><h3 id="核糖？核苷？核糖核苷？"><a href="#核糖？核苷？核糖核苷？" class="headerlink" title="[[核糖？核苷？核糖核苷？]]"></a>[[核糖？核苷？核糖核苷？]]</h3><h2 id="选择性必修三"><a href="#选择性必修三" class="headerlink" title="选择性必修三"></a>选择性必修三</h2><h3 id="发酵工程-："><a href="#发酵工程-：" class="headerlink" title="[[发酵工程]]："></a>[[发酵工程]]：</h3><h3 id="细胞工程-："><a href="#细胞工程-：" class="headerlink" title="[[细胞工程]]："></a>[[细胞工程]]：</h3>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%94%9F%E7%89%A9/%E7%BB%86%E8%83%9E%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="植物细胞工程-："><a href="#植物细胞工程-：" class="headerlink" title="[[植物细胞工程]]："></a>[[植物细胞工程]]：</h3><h3 id="动物细胞工程-："><a href="#动物细胞工程-：" class="headerlink" title="[[动物细胞工程]]："></a>[[动物细胞工程]]：</h3><h3 id="胚胎工程-："><a href="#胚胎工程-：" class="headerlink" title="[[胚胎工程]]："></a>[[胚胎工程]]：</h3><h3 id="基因工程-："><a href="#基因工程-：" class="headerlink" title="[[基因工程]]："></a>[[基因工程]]：</h3>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/03/06/%E6%96%87%E5%8C%96%E8%AF%BE/%E7%94%9F%E7%89%A9/%E8%83%9A%E8%83%8E%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p>定义：指对生殖细胞，受精卵或早期胚胎细胞进行显微操作和处理，然后将获得的胚胎移植到雌性个体体内培育成新后代，以满足人类的各种需求</p>
<p>胚胎工程技术包括：体外受精，胚胎移植和胚胎分割等技术</p>
<h3 id="受精作用"><a href="#受精作用" class="headerlink" title="受精作用"></a>受精作用</h3><p>场所：自然情况下，哺乳动物的受精在输卵管内完成</p>
<p>过程：</p>
<ol>
<li>受精前的准备阶段<ol>
<li>精子获能：精子必须在雌性动物的生殖道中发生相应的生理变化后才能得到受精能力</li>
<li>卵子的准备：在输卵管内进一步成熟，到减数第二次分裂中期，才具备受精能力</li>
</ol>
</li>
<li>受精阶段<ol>
<li>精子穿越放射冠和透明带，顶体反应使顶体内的酶释放出来并溶解放射冠内的卵丘细胞之间的物质，透明带反应是防止多精入卵的第一道屏障</li>
<li>精子进入卵细胞膜，卵细胞膜是防止多精入卵的第二道屏障</li>
<li>原核形成(雌雄原核形成)</li>
<li>配子结合，雌雄原核融合形成合子</li>
</ol>
</li>
</ol>
<h4 id="早期胚胎发育过程："><a href="#早期胚胎发育过程：" class="headerlink" title="早期胚胎发育过程："></a>早期胚胎发育过程：</h4><p>受精卵 $\rightarrow$ 卵裂期 $\rightarrow$ 桑葚胚 $\rightarrow$ 囊胚 $\rightarrow$ 原肠胚</p>
]]></content>
  </entry>
</search>
